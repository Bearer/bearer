---
title: Using the GitHub Action
---
{% renderTemplate "md" %}
# Using the GitHub Action

Running Bearer from the CLI is great, but if you want it integrated directly with your Git workflow there's nothing easier than a GitHub action. If you're unfamiliar with GitHub actions, here's a [primer available from GitHub](https://github.com/features/actions). You can also see how the action works directly on our [Bear Publishing example app](https://github.com/Bearer/bear-publishing/actions/workflows/bearer.yml).

## Getting started

You can [view the action here](https://github.com/marketplace/actions/bearer-security), or follow along below.

Actions live in the `.github/workflows/` directory within your repository. Start by creating a `bearer.yml` file in the workflows directory.

We recommend the following config in `.github/workflows/bearer.yml` to run Bearer's security report:

```yml
name: Bearer

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  rule_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Report
        id: report
        uses: bearer/bearer-action@v2
```

This will run the [security report](/explanations/reports), display the results to the action summary screen within GitHub, and flag the action as pass or fail based on whether Bearer's default rules pass or fail.

## Further configuration

Just as with the CLI app, you can configure the action to meet the needs of your project. Set custom inputs and outputs using the `with` key. Here's an example using the `config-file`, `skip-path`, and `only-rule` flags:

```yml
steps:
  - uses: actions/checkout@v3
  - name: Bearer
    uses: bearer/bearer-action@v2
    with:
      config-file: '/some/path/bearer.yml'
      only-rule: 'ruby_lang_cookies,ruby_lang_http_post_insecure_with_data'
      skip-path: 'users/*.go,users/admin.sql'
```

The following are a list of available inputs and outputs:
{% endrenderTemplate %}

<h3>Inputs</h3>

{% for key, value in bearerAction.inputs %}
  <h4>
    <code class="language-">{{key}}</code>
  </h4>
  <p>{{value.description}}
    {% if not value.required %}
      <strong>(Optional)</strong>
    {% endif %}
  </p>
{% endfor %}

<h3>Outputs</h3>
{% for key, value in bearerAction.outputs %}
  <h4>
    <code class="language-">{{key}}</code>
  </h4>
  <p>{{value.description}}
    {% if not value.required %}
      <strong>(Optional)</strong>
    {% endif %}
  </p>
{% endfor %}

{% renderTemplate "md" %}
## Configure GitHub code scanning
Bearer CLI supports [GitHub code scanning](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning). By using the SARIF output format, you can display [security report](/explanations/reports/#security-report) findings directly in the Security tab of your repository.

![Bearer CLI results in GitHub security tab](/assets/img/gh-code-scanning.jpg)

To enable this feature, update your action configuration to include new permissions, new format and outputs, and an additional step. Here's an example configuration:

```diff-yml
name: Bearer

on:
  push:
    branches:
      - main

permissions:
  contents: read
+ # Add the security-events permission
  security-events: write

jobs:
  rule_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Report
        id: report
        uses: bearer/bearer-action@v2
        with:
+         # Include these two options
          format: sarif
          output: results.sarif
+       # Add a new step to upload the SARIF file
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif
```

By setting the format and output path, and adding a new upload step, the action will upload SARIF-formatted findings to GitHub's code scanner.

## Code Review Comments
Bearer CLI supports [Reviewdog](https://github.com/reviewdog/reviewdog) rdjson format so you can use any of the reviewdog reporters to quickly add bearer feedback directly to your pull requests.

![Bearer CLI results in Github PR](/assets/img/gh-pr-review.png)

```yaml
name: Bearer PR Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read

jobs:
  rule_check:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3
      - name: Run Report
        id: report
        uses: bearer/bearer-action@v2
        with:
          format: rdjson
          output: rd.json
      - uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest
      - name: Run reviewdog
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.REVIEWDOG_GITHUB_API_TOKEN }}
        run: |
          cat rd.json | reviewdog -f=rdjson -reporter=github-pr-review
```
Remember to set a personal access [token](https://github.com/settings/personal-access-tokens/new) with read and write permissions and save it to your repo secrets as `REVIEWDOG_GITHUB_API_TOKEN` and you should be good to go.

## Make the most of Bearer

For more ways to use Bearer, check out the different [report types](/explanations/reports/), [available rules](/reference/rules/), [supported data types](/reference/datatypes/).

Have a question or need help? Join our [Discord community](https://discord.gg/eaHZBJUXRF) or [open an issue on GitHub](https://github.com/Bearer/bearer/issues).
{% endrenderTemplate %}