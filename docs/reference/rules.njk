---
title: Rules
---
{# This content of this page is generated. #}
{% renderTemplate "liquid,md" %}
# Rules

Rules are ways to enforce data security best practices across your codebase. Curio's summary report allows you to quickly identify rule violations in your code.

Curio includes the following rules by default.
{% endrenderTemplate %}

<form action="" id="rule-search">
  <label for="search-input">Search</label>
  <input class="block w-full px-4 py-2 border-neutral-300 border-2 rounded" type="search" name="" id="search-input">

</form>

<ul class="flex flex-col gap-4 not-prose list-none p-0">
  {% for rule in rules | sortById %}
    <li class="block rounded border-2 border-neutral-300 p-4 js-rule">
      <a href="/reference/rules/{{rule.metadata.id}}/">
        <h2 class="font-bold text-main dark:text-main-400">{{rule.metadata.id}}</h2>
        <p>
          {{rule.metadata.description}}
        </p>
      </a>
      <div>
        <ul class="flex justify-end">
          <li class=" text-sm py-2 px-4 rounded-full bg-neutral-200">{{rule.metadata.dsr_id}}</li>
        </ul>
      </div>
    </li>
  {% endfor %}
</ul>

<script>
  function filterResults() {
    const rules = document.querySelectorAll('.js-rule')
    const query = document
      .getElementById('search-input')
      .value
      rules
      .forEach(rule => {
        if (rule.innerHTML.toLowerCase().includes(query.toLowerCase())) {
          rule
            .classList
            .remove('hidden')
        } else {
          rule
            .classList
            .add('hidden')
        }
      })
  };
  const input = document.getElementById('search-input')
  let timer;
  const delay = 500;
  input.addEventListener('keyup', (e) => {
    clearTimeout(timer)
    timer = setTimeout(filterResults, delay)
  })
</script>