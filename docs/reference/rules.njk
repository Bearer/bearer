---
title: Rules
---
{# This content of this page is generated. #}
{% renderTemplate "liquid,md" %}
# Rules

Rules are ways to enforce data security best practices across your codebase. Curio's summary report allows you to quickly identify rule violations in your code.

Curio's built-in rules aim to keep you protected from the top data security risks for web applcations and include a corresponding DSR ID to help you identify the risk. 

{% endrenderTemplate %}

<form action="" id="rule-search">
  <label for="search-input" class="font-bold">Search</label>
  <input class="block w-full px-4 py-2 border-neutral-300 border-2 rounded dark:text-neutral-500" type="search" name="" id="search-input" placeholder="Try searching for DSR-2, encryption, etc.">

  <div class="flex gap-2 mt-4">
    <div>
      <input type="checkbox" name="lang-ruby" id="lang-ruby" class='filter-toggle' value="ruby">
      <label for="lang-ruby" class="toggle-label">Ruby</label>
    </div>

    {# <div>
      <input type="checkbox" name="lang-jsts" id="lang-jsts" class='filter-toggle' value="javascript">
      <label for="lang-jsts" class="toggle-label">Typescript / Javascript</label>
    </div> #}
  </div>
</form>

<ul class="flex flex-col gap-4 not-prose list-none p-0">
  {% for rule in rules | sortById %}
    <li class="block rounded border-2 border-neutral-200 dark:border-code p-4 js-rule">
      <a href="/reference/rules/{{rule.metadata.id}}/">
        <h2 class="font-bold text-main dark:text-main-300">{{rule.metadata.id}}</h2>
        <p>
          {{rule.metadata.description}}
        </p>
      </a>
      <div>
        <ul class="flex gap-2 justify-end">
          {% if rule.languages %}
            <li class=" text-xs py-2 px-4 rounded-full bg-neutral-200 dark:bg-code">{{rule.languages}}</li>
          {% endif %}
          <li class=" text-xs py-2 px-4 rounded-full bg-neutral-200 dark:bg-code">{{rule.metadata.dsr_id}}</li>
        </ul>
      </div>
    </li>
  {% endfor %}
</ul>

<script>
  function compare(item, query, filters) {
    let source = item
      .innerHTML
      .toLowerCase();
    let filtersActive = filters.length == 0
      ? false
      : true
    let matchFilters = false
    let found = false
    if (filtersActive) {
      filters.forEach(f => {
        if (source.includes(f.value)) {
          found = true
        }
      })
      if (source.includes(query) && found === true) {
        return true
      }
    } else {
      if (source.includes(query)) {
        return true
      }
      return false
    }
  }

  function filterResults() {
    const rules = document.querySelectorAll('.js-rule')
    const filters = document.querySelectorAll('.filter-toggle:checked')
    const query = document
      .getElementById('search-input')
      .value;
    rules.forEach(rule => {
      if (compare(rule, query, filters)) {
        rule
          .classList
          .remove('hidden')
      } else {
        rule
          .classList
          .add('hidden')
      }
    })
  };
  const input = document.getElementById('search-input')
  const checkboxes = document.querySelectorAll('.filter-toggle')
  let timer;
  const delay = 300;
  input.addEventListener('keyup', (e) => {
    clearTimeout(timer)
    timer = setTimeout(filterResults, delay)
  })

  checkboxes.forEach(checkbox => {
    checkbox.addEventListener('change', e => {
      filterResults()
    })
  })
</script>