ruby_http_get_detection:
  type: "risk"
  languages:
    - ruby
  patterns:
    - |
      URI.encode_www_form(<$DATA_TYPE>)
    - |
      URI(<$DATA_TYPE>)
    - pattern: |
        $CLIENT.get(<$DATA_TYPE>)
      filters:
        - variable: CLIENT
          values:
            - Curl
            - Excon
            - Faraday
            - HTTP
            - HTTParty
            - HTTPX
            - RestClient
            - Typhoeus
  stored: false
ruby_http_post_detection:
  type: "risk"
  languages:
    - ruby
  patterns:
    - |
      URI.encode_www_form(<$DATA_TYPE>)
    - |
      Net::HTTP.post_form(<$DATA_TYPE>)
    - pattern: |
        $CLIENT.post(<$DATA_TYPE>)
      filters:
        - variable: CLIENT
          values:
            - Curl
            - Excon
            - Faraday
            - HTTP
            - HTTParty
            - HTTPX
            - RestClient
            - Typhoeus
  stored: false
ruby_http_get_insecure:
  type: "risk"
  languages:
    - ruby
  patterns:
    - |
      URI(<$INSECURE_URL>)
    - pattern: |
        $CLIENT.get(<$INSECURE_URL>)
      filters:
        - variable: CLIENT
          values:
            - Curl
            - Excon
            - Faraday
            - HTTP
            - HTTParty
            - HTTPX
            - RestClient
            - Typhoeus
  detect_presence: true
ruby_http_post_insecure:
  type: "risk"
  languages:
    - ruby
  patterns:
    - |
      Net::HTTP.post_form(<$INSECURE_URL>)
    - pattern: |
        $CLIENT.post(<$INSECURE_URL>)
      filters:
        - variable: CLIENT
          values:
            - Curl
            - Excon
            - Faraday
            - HTTP
            - HTTParty
            - HTTPX
            - RestClient
            - Typhoeus
  detect_presence: true
ruby_file_detection:
  type: "risk"
  languages:
    - ruby
  patterns:
    - |
      CSV.generate do
        <$DATA_TYPE>
      end
    - |
      CSV.generate { <$DATA_TYPE> }
    - |
      CSV.open { <$DATA_TYPE> }
    - |
      CSV.open do
        <$DATA_TYPE>
      end
    - |
      File.open do
        <$DATA_TYPE>
      end
    - |
      File.open { <$DATA_TYPE> }
  param_parenting: true
  metavars: {}
  stored: false
detect_ruby_logger:
  type: "risk"
  patterns:
    - |
      logger.info(<$ARGUMENT>)
    - |
      Rails.logger.info(<$ARGUMENT>)
  languages:
    - ruby
detect_rails_session:
  type: "risk"
  patterns:
    - |
      session[...] = $ANYTHING
  languages:
    - ruby
detect_rails_jwt:
  type: "risk"
  patterns:
    - |
      JWT.encode(<$ARGUMENT>)
  languages:
    - ruby
detect_rails_cookies:
  type: "risk"
  patterns:
    - |
      cookies[...] = $ANYTHING
    - pattern: |
        cookies.$METHOD_CHAIN[...] = $ANYTHING
      filters:
        - variable: METHOD_CHAIN
          values:
            - permanent
            - encrypted
            - signed
            - permanent.encrypted
            - permanent.signed
            - permanent.encrypted.signed
            - permanent.signed.encrypted
            - encrypted.permanent
            - encrypted.signed
            - encrypted.permanent.signed
            - encrypted.signed.permanent
            - signed.encrypted
            - signed.permanent
            - signed.permanent.encrypted
            - signed.encrypted.permanent
  languages:
    - ruby
ssl_certificate_verification_disabled:
  type: "risk"
  patterns:
    - |
      $_.verify_mode = OpenSSL::SSL::VERIFY_NONE
  languages:
    - ruby
  detect_presence: true
detect_encrypted_ruby_class_properties:
  type: "verifier"
  patterns:
    - |
      class $CLASS_NAME < ApplicationRecord
        encrypts <$ARGUMENT>
      end
  param_parenting: true
  root_singularize: true
  root_lowercase: true
  languages:
    - ruby
detect_sql_create_public_table:
  type: "data_type"
  patterns:
    - |
      CREATE TABLE public.$TABLE_NAME (
        <$COLUMN>
      )
  param_parenting: true
  root_singularize: true
  root_lowercase: true
  languages:
    - sql
  processors:
    - query: |
        verified_by = data.bearer.encrypted_verified.verified_by
        encrypted = data.bearer.encrypted_verified.encrypted
      modules:
        - path: processors/encrypted_verified.rego
          name: bearer.encrypted_verified
detect_rails_insecure_smtp:
  type: "risk"
  patterns:
    - |
      Rails.application.configure do
        config.action_mailer.smtp_settings = {
          openssl_verify_mode: OpenSSL::SSL::VERIFY_NONE
        }
      end
    - |
      Rails.application.configure do
        config.action_mailer.smtp_settings = {
          openssl_verify_mode: "none"
        }
      end
  languages:
    - ruby
  detect_presence: true
  omit_parent: true
detect_rails_insecure_communication:
  type: "risk"
  patterns:
    - |
      Rails.application.configure do
        config.force_ssl = false
      end
  languages:
    - ruby
  detect_presence: true
  omit_parent: true
detect_rails_insecure_ftp:
  type: "risk"
  patterns:
    - |
      Net::FTP.new()
    - |
      Net::FTP.open()
  languages:
    - ruby
  detect_presence: true
detect_ruby_third_party_data_send:
  type: "risk"
  patterns:
    - |
      Sentry::Breadcrumb.new(<$ARGUMENT>)
    - |
      Sentry.init do |config|
        config.before_breadcrumb = lambda do |breadcrumb, hint|
          breadcrumb.message = $ANYTHING
          breadcrumb
        end
      end
    - |
      Sentry.set_user(<$ARGUMENT>)
  languages:
    - ruby
