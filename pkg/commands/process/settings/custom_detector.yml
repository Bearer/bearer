ruby_http_get_detection:
  type: "risk"
  languages:
    - ruby
  patterns:
    - |
      URI.encode_www_form(<$DATA_TYPE>)
    - |
      URI(<$DATA_TYPE>)
    - pattern: |
        $CLIENT.get(<$DATA_TYPE>)
      filters:
        - variable: CLIENT
          values:
            - Curl
            - Excon
            - Faraday
            - HTTP
            - HTTParty
            - HTTPX
            - RestClient
            - Typhoeus
  stored: false
ruby_http_post_detection:
  type: "risk"
  languages:
    - ruby
  patterns:
    - |
      URI.encode_www_form(<$DATA_TYPE>)
    - |
      Net::HTTP.post_form(<$DATA_TYPE>)
    - pattern: |
        $CLIENT.post(<$DATA_TYPE>)
      filters:
        - variable: CLIENT
          values:
            - Curl
            - Excon
            - Faraday
            - HTTP
            - HTTParty
            - HTTPX
            - RestClient
            - Typhoeus
  stored: false
ruby_http_get_insecure:
  type: "risk"
  languages:
    - ruby
  patterns:
    - |
      URI(<$INSECURE_URL>)
    - pattern: |
        $CLIENT.get(<$INSECURE_URL>)
      filters:
        - variable: CLIENT
          values:
            - Curl
            - Excon
            - Faraday
            - HTTP
            - HTTParty
            - HTTPX
            - RestClient
            - Typhoeus
  detect_presence: true
ruby_http_post_insecure:
  type: "risk"
  languages:
    - ruby
  patterns:
    - |
      Net::HTTP.post_form(<$INSECURE_URL>)
    - pattern: |
        $CLIENT.post(<$INSECURE_URL>)
      filters:
        - variable: CLIENT
          values:
            - Curl
            - Excon
            - Faraday
            - HTTP
            - HTTParty
            - HTTPX
            - RestClient
            - Typhoeus
  detect_presence: true
ruby_file_detection:
  type: "risk"
  languages:
    - ruby
  patterns:
    - |
      CSV.generate { <$DATA_TYPE> }
    - |
      CSV.generate do
        <$DATA_TYPE>
      end
    - pattern: |
        $LIBRARY.open do
          <$DATA_TYPE>
        end
      filters:
        - variable: LIBRARY
          values:
            - CSV
            - File
  param_parenting: true
  metavars: {}
  stored: false
detect_ruby_logger:
  type: "risk"
  patterns:
    - |
      logger.info(<$ARGUMENT>)
    - |
      Rails.logger.info(<$ARGUMENT>)
  languages:
    - ruby
detect_rails_session:
  type: "risk"
  patterns:
    - |
      session[...] = $ANYTHING
  languages:
    - ruby
detect_rails_jwt:
  type: "risk"
  patterns:
    - |
      JWT.encode(<$ARGUMENT>)
  languages:
    - ruby
detect_rails_cookies:
  type: "risk"
  patterns:
    - |
      cookies[...] = $ANYTHING
    - pattern: |
        cookies.$METHOD_CHAIN[...] = $ANYTHING
      filters:
        - variable: METHOD_CHAIN
          values:
            - permanent
            - encrypted
            - signed
            - permanent.encrypted
            - permanent.signed
            - permanent.encrypted.signed
            - permanent.signed.encrypted
            - encrypted.permanent
            - encrypted.signed
            - encrypted.permanent.signed
            - encrypted.signed.permanent
            - signed.encrypted
            - signed.permanent
            - signed.permanent.encrypted
            - signed.encrypted.permanent
  languages:
    - ruby
ssl_certificate_verification_disabled:
  type: "risk"
  patterns:
    - |
      Net::HTTP.start($_, $_, $_, :verify_mode => OpenSSL::SSL::VERIFY_NONE) do
      end
    - |
      $_.verify_mode = OpenSSL::SSL::VERIFY_NONE
  languages:
    - ruby
  detect_presence: true
detect_encrypted_ruby_class_properties:
  type: "verifier"
  patterns:
    - |
      class $CLASS_NAME < ApplicationRecord
        encrypts <$ARGUMENT>
      end
  param_parenting: true
  root_singularize: true
  root_lowercase: true
  languages:
    - ruby
detect_sql_create_public_table:
  type: "data_type"
  patterns:
    - |
      CREATE TABLE public.$TABLE_NAME (
        <$COLUMN>
      )
    - |
      CREATE TABLE $TABLE_NAME (
        <$COLUMN>
      )
  param_parenting: true
  root_singularize: true
  root_lowercase: true
  languages:
    - sql
  stored: true
detect_rails_insecure_smtp:
  type: "risk"
  patterns:
    - |
      Rails.application.configure do
        config.action_mailer.smtp_settings = {
          openssl_verify_mode: OpenSSL::SSL::VERIFY_NONE
        }
      end
    - |
      Rails.application.configure do
        config.action_mailer.smtp_settings = {
          openssl_verify_mode: "none"
        }
      end
  languages:
    - ruby
  detect_presence: true
  omit_parent: true
detect_rails_insecure_communication:
  type: "risk"
  patterns:
    - |
      Rails.application.configure do
        config.force_ssl = false
      end
  languages:
    - ruby
  detect_presence: true
  omit_parent: true
detect_rails_insecure_ftp:
  type: "risk"
  patterns:
    - |
      Net::FTP.new()
    - |
      Net::FTP.open()
  languages:
    - ruby
  detect_presence: true
detect_rails_insecure_ftp_data:
  type: "risk"
  patterns:
    - |
      Net::FTP.open do
        $ANYTHING
      end
  languages:
    - ruby
detect_ruby_third_party_data_send:
  type: "risk"
  patterns:
    - |
      Sentry::Breadcrumb.new(<$ARGUMENT>)
    - |
      Sentry.init do |config|
        config.before_breadcrumb = lambda do |breadcrumb, hint|
          breadcrumb.message = $ANYTHING
          breadcrumb
        end
      end
    - |
      Sentry.set_user(<$ARGUMENT>)
  languages:
    - ruby
detect_ruby_weak_encryption:
  type: "risk"
  patterns:
    - |
      Digest::SHA1.hexidigest(<$DATA_TYPE>)
    - |
      Digest::MD5.hexdigest(<$DATA_TYPE>)
    - pattern: |
        OpenSSL::PKey::$LIBRARY.new($_, <$DATA_TYPE>)
      filters:
        - variable: LIBRARY
        - values:
            - DSA
            - RSA
  languages:
    - "ruby"
initialize_ruby_rc4_encryption:
  type: "risk"
  patterns:
    - |
      $_ = RC4.new()
  languages:
    - "ruby"
  detect_presence: true
initialize_ruby_openssl_pkey_dsa_encryption:
  type: "risk"
  patterns:
    - |
      $_ = OpenSSL::PKey::DSA.new()
  languages:
    - "ruby"
  detect_presence: true
initialize_ruby_openssl_pkey_rsa_encryption:
  type: "risk"
  patterns:
    - |
      $_ = OpenSSL::PKey::RSA.new()
  languages:
    - "ruby"
  detect_presence: true
initialize_ruby_blowfish_encryption:
  type: "risk"
  patterns:
    - |
      $_ = Crypt::Blowfish.new(...)
  languages:
    - "ruby"
  detect_presence: true
encrypt_method_call:
  type: "risk"
  patterns:
    - pattern: |
        $_.$METHOD(<$DATA_TYPE>)
      filters:
        - variable: METHOD
          values:
            - encrypt
            - encrypt!
            - decrypt
  languages:
    - "ruby"
ruby_openssl_pkey_method_call:
  type: "risk"
  patterns:
    - pattern: |
        $_.$METHOD(<$DATA_TYPE>)
      filters:
        - variable: METHOD
          values:
            - export
            - to_pem
            - to_s
  languages:
    - "ruby"
ruby_openssl_pkey_rsa_method_call:
  type: "risk"
  patterns:
    - pattern: |
        $_.$METHOD(<$DATA_TYPE>)
      filters:
        - variable: METHOD
          values:
            - private_decrypt
            - private_encrypt
            - public_decrypt
            - public_encrypt
  languages:
    - "ruby"
ruby_blowfish_method_call:
  type: "risk"
  patterns:
    - pattern: |
        $_.$METHOD(<$DATA_TYPE>)
      filters:
        - variable: METHOD
          values:
            - encrypt_pair
            - encrypt_string
            - encrypt_block
  languages:
    - "ruby"
