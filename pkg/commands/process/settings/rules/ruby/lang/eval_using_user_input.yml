patterns:
  - pattern: |
      RubyVM::InstructionSequence.compile($<USER_INPUT>$<...>)
    filters:
      - variable: USER_INPUT
        detection: ruby_lang_eval_using_user_input_user_input
  - pattern: |
      $<_>.$<METHOD>($<USER_INPUT>$<...>)
    filters:
      - variable: METHOD
        values:
          - eval
          - instance_eval
          - class_eval
          - module_eval
      - variable: USER_INPUT
        detection: ruby_lang_eval_using_user_input_user_input
  - pattern: |
      $<METHOD>($<USER_INPUT>$<...>)
    filters:
      - variable: METHOD
        values:
          - eval
          - instance_eval
          - class_eval
          - module_eval
      - variable: USER_INPUT
        detection: ruby_lang_eval_using_user_input_user_input
auxiliary:
  - id: ruby_lang_eval_using_user_input_user_input
    patterns:
      - params
      - request
      - cookies
      - | # AWS lambda
        def $<_>($<!>event:, context:)
        end
languages:
  - ruby
trigger: presence
severity: high
metadata:
  description: "Potential command injection with user input detected."
  remediation_message: |
    ## Description
    It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

    ## Remediations
    ‚ùå Avoid using code execution methods with unsanitized user input.

    It might be possible to use dynamic hardcoded values, instead of user input directly.

    ```ruby
    get_total_str = if params["include_vat"]
      "def dynamic(a,b,c); a + b + c; end"
    else
      "def dynamic(a,b); a + b; end"
    end

    get_total = eval(get_total_str)
    ```

    ## Resources
    - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
  cwe_id:
    - 94
    - 95
  id: ruby_lang_eval_using_user_input
