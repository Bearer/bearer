languages:
  - ruby
patterns:
  - pattern: |
      Net::HTTP.$<METHOD>($<INSECURE_URL>$<...>)
    filters:
      - variable: METHOD
        values:
          - post
          - post_form
      - variable: INSECURE_URL
        detection: insecure_url
  - pattern: |
      Net::HTTP.$<METHOD>($<...>$<INSECURE_URL>$<...>)$<...>
    filters:
      - variable: METHOD
        values:
          - get
          - get_print
          - get_response
          - new
          - newobj
          - start
      - variable: INSECURE_URL
        detection: insecure_url
  - pattern: |
      Net::HTTP::$<CLASS>.new($<INSECURE_URL>$<...>)
    filters:
      - variable: CLASS
        values:
          - Get
          - Head
          - Post
          - Put
          - Delete
          - Options
          - Trace
          - Patch
          - Propfind
          - Proppatch
          - Mkcol
          - Copy
          - Move
          - Lock
          - Unlock
      - variable: INSECURE_URL
        detection: insecure_url
  - pattern: |
      URI($<INSECURE_URL>)
    filters:
      - variable: INSECURE_URL
        detection: insecure_url
  - pattern: |
      Curl.http($<_>, $<INSECURE_URL>$<...>)$<...>
    filters:
      - variable: INSECURE_URL
        detection: insecure_url
  - pattern: |
      Curl.$<METHOD>($<INSECURE_URL>$<...>)$<...>
    filters:
      - variable: METHOD
        values:
          - get
          - post
          - put
          - delete
          - patch
          - head
          - options
      - variable: INSECURE_URL
        detection: insecure_url
  - pattern: |
      Curl::Easy.$<METHOD>($<INSECURE_URL>$<...>)$<...>
    filters:
      - variable: METHOD
        values:
          - new
          - perform
          - download
          - http_delete
          - http_post
          - http_put
          - http_head
          - http_get
      - variable: INSECURE_URL
        detection: insecure_url
  - pattern: |
      $<CURB>.url = $<INSECURE_URL>
    filters:
      - variable: CURB
        detection: ruby_lang_http_insecure_curb
      - variable: INSECURE_URL
        detection: insecure_url
  - pattern: |
      Curl::Multi.$<METHOD>($<INSECURE_URL>$<...>)$<...>
    filters:
      - variable: METHOD
        values:
          - get
          - download
      - variable: INSECURE_URL
        detection: insecure_url
  - pattern: |
      Curl::Multi.$<METHOD>($<INSECURE_URL_HASH>$<...>)$<...>
    filters:
      - variable: METHOD
        values:
          - http
          - post
          - put
      - variable: INSECURE_URL_HASH
        detection: ruby_lang_http_insecure_url_hash
  - pattern: |
      Excon.$<METHOD>($<INSECURE_URL>$<...>)
    filters:
      - variable: METHOD
        values:
          - new
          - connect
          - delete
          - get
          - head
          - options
          - patch
          - post
          - put
          - trace
      - variable: INSECURE_URL
        detection: insecure_url
  - pattern: |
      $<CLIENT>.get($<INSECURE_URL>$<...>)$<...>
    filters:
      - variable: CLIENT
        values:
          - Faraday
          - HTTP
          - HTTParty
          - HTTPX
          - RestClient
          - Typhoeus
      - variable: INSECURE_URL
        detection: insecure_url
  - pattern: |
      $<CLIENT>.post($<INSECURE_URL>$<...>)$<...>
    filters:
      - variable: CLIENT
        values:
          - Faraday
          - HTTP
          - HTTParty
          - HTTPX
          - RestClient
          - Typhoeus
      - variable: INSECURE_URL
        detection: insecure_url
auxiliary:
  - id: ruby_lang_http_insecure_curb
    patterns:
      - |
        Curl::Easy.new$<...>
  - id: ruby_lang_http_insecure_url_hash
    patterns:
      - pattern: |
          { url: $<INSECURE_URL> }
        filters:
          - variable: INSECURE_URL
            detection: insecure_url
trigger: presence
severity:
  default: low
metadata:
  description: "Connection through an unsecure HTTP communication detected."
  remediation_message: |
    ## Description

    Applications processing sensitive data should only connect using HTTPS connections. This rule checks that all HTTP connections use HTTPS.

    ## Remediations

    ❌ Avoid using unsecured outgoing HTTP communication, especially in the context of API calls:

    ```ruby
    response = HTTParty.get('http://insecure-api.com')
    ```

    ✅ Ensure to always connect though HTTPS:

    ```ruby
    response = HTTParty.get('https://secure-api.com')
    ```
    <!--
    ## Resources
    Coming soon.
    -->
  dsr_id: DSR-2
  cwe_id:
    - 319
  id: ruby_lang_http_insecure
