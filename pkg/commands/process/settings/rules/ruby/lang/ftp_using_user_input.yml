patterns:
  - pattern: |
      Net::FTP.new($<...>$<USER_INPUT>$<...>)
    filters:
      - variable: USER_INPUT
        detection: ruby_lang_ftp_using_user_input_user_input
  - pattern: |
      Net::FTP.open($<...>$<USER_INPUT>$<...>)$<...>
    filters:
      - variable: USER_INPUT
        detection: ruby_lang_ftp_using_user_input_user_input
  - pattern: |
      $<FTP>.$<_>($<...>$<USER_INPUT>$<...>)$<...>
    filters:
      - variable: FTP
        detection: ruby_lang_ftp_using_user_input_ftp
      - variable: USER_INPUT
        detection: ruby_lang_ftp_using_user_input_user_input
auxiliary:
  - id: ruby_lang_ftp_using_user_input_user_input
    patterns:
      - params
      - request
      - cookies
      - | # AWS lambda
        def $<_>($<!>event:, context:)
        end
  - id: ruby_lang_ftp_using_user_input_ftp
    patterns:
      - Net::FTP.new()
      - Net::FTP.open()
      - Net::FTP.open() { |$<!>$<_:identifier>| }
languages:
  - ruby
trigger: presence
severity: high
metadata:
  description: "Do not use user input with FTP."
  remediation_message: |
    ## Description
    Using raw unsanitized input with FTP methods is bad practice.
    It could put your application at risk for code injection attacks, or lead to path traversal, by which attackers can gain access to resources outside of the intended scope


    ## Remediations
    ❌ Do not form filenames or file paths for FTP from raw user input
    ```ruby
    Net::FTP.open("public/#{params["resource_name"]}.txt" do
      # ...
    end
    ```
    ❌ Do not pass raw user input as arguments to FTP methods

    ```ruby
    Net::FTP.open("example.txt", username: params[:user]) do
      # ...
    end
    ```

    ## Resources
    - [OWASP code injection](https://owasp.org/www-community/attacks/Code_Injection)
    - [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)
  cwe_id:
    - 22
  id: ruby_lang_ftp_using_user_input
