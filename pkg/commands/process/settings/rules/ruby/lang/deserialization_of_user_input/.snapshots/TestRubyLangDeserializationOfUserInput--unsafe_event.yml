high:
    - rule:
        cwe_ids:
            - "502"
        id: ruby_lang_deserialization_of_user_input
        title: User input detected in an unsafe deserialization method.
        description: |
            ## Description
            It is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.
            Attackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.

            ## Remediations
            ❌ Do not deserialize untrusted data

            ✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML

            Avoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.

            ```javascript
              user_data = JSON.parse(params[:user])
              # handle any parsing errors

              JSON.load(user)
            ```

            ## Resources
            - [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input
      line_number: 2
      filename: unsafe_event.rb
      parent_line_number: 2
      snippet: YAML.load(event["oops"])
      fingerprint: dbb27be331e8b9bdb9545f304d99c91f_0
    - rule:
        cwe_ids:
            - "502"
        id: ruby_lang_deserialization_of_user_input
        title: User input detected in an unsafe deserialization method.
        description: |
            ## Description
            It is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.
            Attackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.

            ## Remediations
            ❌ Do not deserialize untrusted data

            ✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML

            Avoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.

            ```javascript
              user_data = JSON.parse(params[:user])
              # handle any parsing errors

              JSON.load(user)
            ```

            ## Resources
            - [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input
      line_number: 4
      filename: unsafe_event.rb
      parent_line_number: 4
      snippet: Psych.load(event["oops"])
      fingerprint: dbb27be331e8b9bdb9545f304d99c91f_1
    - rule:
        cwe_ids:
            - "502"
        id: ruby_lang_deserialization_of_user_input
        title: User input detected in an unsafe deserialization method.
        description: |
            ## Description
            It is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.
            Attackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.

            ## Remediations
            ❌ Do not deserialize untrusted data

            ✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML

            Avoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.

            ```javascript
              user_data = JSON.parse(params[:user])
              # handle any parsing errors

              JSON.load(user)
            ```

            ## Resources
            - [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input
      line_number: 6
      filename: unsafe_event.rb
      parent_line_number: 6
      snippet: Syck.load(event["oops"])
      fingerprint: dbb27be331e8b9bdb9545f304d99c91f_2
    - rule:
        cwe_ids:
            - "502"
        id: ruby_lang_deserialization_of_user_input
        title: User input detected in an unsafe deserialization method.
        description: |
            ## Description
            It is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.
            Attackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.

            ## Remediations
            ❌ Do not deserialize untrusted data

            ✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML

            Avoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.

            ```javascript
              user_data = JSON.parse(params[:user])
              # handle any parsing errors

              JSON.load(user)
            ```

            ## Resources
            - [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input
      line_number: 8
      filename: unsafe_event.rb
      parent_line_number: 8
      snippet: JSON.load(event["oops"])
      fingerprint: dbb27be331e8b9bdb9545f304d99c91f_3
    - rule:
        cwe_ids:
            - "502"
        id: ruby_lang_deserialization_of_user_input
        title: User input detected in an unsafe deserialization method.
        description: |
            ## Description
            It is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.
            Attackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.

            ## Remediations
            ❌ Do not deserialize untrusted data

            ✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML

            Avoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.

            ```javascript
              user_data = JSON.parse(params[:user])
              # handle any parsing errors

              JSON.load(user)
            ```

            ## Resources
            - [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input
      line_number: 10
      filename: unsafe_event.rb
      parent_line_number: 10
      snippet: Oj.load(event["oops"])
      fingerprint: dbb27be331e8b9bdb9545f304d99c91f_4
    - rule:
        cwe_ids:
            - "502"
        id: ruby_lang_deserialization_of_user_input
        title: User input detected in an unsafe deserialization method.
        description: |
            ## Description
            It is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.
            Attackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.

            ## Remediations
            ❌ Do not deserialize untrusted data

            ✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML

            Avoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.

            ```javascript
              user_data = JSON.parse(params[:user])
              # handle any parsing errors

              JSON.load(user)
            ```

            ## Resources
            - [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input
      line_number: 11
      filename: unsafe_event.rb
      parent_line_number: 11
      snippet: |-
        Oj.object_load(event["oops"]) do |json|
          end
      fingerprint: dbb27be331e8b9bdb9545f304d99c91f_5
    - rule:
        cwe_ids:
            - "502"
        id: ruby_lang_deserialization_of_user_input
        title: User input detected in an unsafe deserialization method.
        description: |
            ## Description
            It is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.
            Attackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.

            ## Remediations
            ❌ Do not deserialize untrusted data

            ✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML

            Avoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.

            ```javascript
              user_data = JSON.parse(params[:user])
              # handle any parsing errors

              JSON.load(user)
            ```

            ## Resources
            - [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input
      line_number: 14
      filename: unsafe_event.rb
      parent_line_number: 14
      snippet: Marshal.load(event["oops"])
      fingerprint: dbb27be331e8b9bdb9545f304d99c91f_6
    - rule:
        cwe_ids:
            - "502"
        id: ruby_lang_deserialization_of_user_input
        title: User input detected in an unsafe deserialization method.
        description: |
            ## Description
            It is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.
            Attackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.

            ## Remediations
            ❌ Do not deserialize untrusted data

            ✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML

            Avoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.

            ```javascript
              user_data = JSON.parse(params[:user])
              # handle any parsing errors

              JSON.load(user)
            ```

            ## Resources
            - [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input
      line_number: 15
      filename: unsafe_event.rb
      parent_line_number: 15
      snippet: Marshal.restore(event["oops"])
      fingerprint: dbb27be331e8b9bdb9545f304d99c91f_7

