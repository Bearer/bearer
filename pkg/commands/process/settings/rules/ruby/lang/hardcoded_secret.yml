patterns:
  - pattern: |
      $<NAME> = $<STRING_LITERAL>
    filters:
      - variable: NAME
        regex: (?i)(password|api_?key|secret)\b
      - variable: STRING_LITERAL
        detection: string_literal
        contains: false
  - pattern: |
      $<_>($<!>$<NAME>: $<STRING_LITERAL>)
    filters:
      - variable: NAME
        regex: (?i)(password|api_?key|secret)\b
      - variable: STRING_LITERAL
        detection: string_literal
        contains: false
  - pattern: |
      $<_>($<!>$<NAME> => $<STRING_LITERAL>)
    filters:
      - variable: NAME
        regex: (?i)['"](password|api_?key|secret)['"]
      - variable: STRING_LITERAL
        detection: string_literal
        contains: false
  - pattern: |
      { $<!>$<NAME>: $<STRING_LITERAL> }
    filters:
      - variable: NAME
        regex: (?i)(password|api_?key|secret)\b
      - variable: STRING_LITERAL
        detection: string_literal
        contains: false
  - pattern: |
      { $<!>$<NAME> => $<STRING_LITERAL> }
    filters:
      - variable: NAME
        regex: (?i)['"](password|api_?key|secret)['"]
      - variable: STRING_LITERAL
        detection: string_literal
        contains: false
languages:
  - ruby
severity: high
metadata:
  description: "Hard-coded secret detected."
  remediation_message: |
    ## Description

    Applications should store secret values securely and not as literal values
    in the source code.

    ## Remediations

    âœ… Retrieve secrets from a secure location at runtime

    ## Resources
    - [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)
    - [OWASP secrets management cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html#21-high-availability)
  cwe_id:
    - 798
  id: ruby_lang_hardcoded_secret
