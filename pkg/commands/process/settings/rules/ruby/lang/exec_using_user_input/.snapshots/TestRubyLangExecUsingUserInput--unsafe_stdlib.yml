high:
    - rule:
        cwe_ids:
            - "78"
        id: ruby_lang_exec_using_user_input
        title: Execution of OS command formed with user input detected.
        description: |
            ## Description

            Applications should not execute OS commands that are formed from user input.
            This rule checks for external commands containing user-supplied data.

            ## Remediations

            ❌ Avoid using user input when executing commands:

            ```ruby
            system(params[:command])
            ```

            ✅ Use user input indirectly when executing commands:

            ```ruby
            command =
              case params[:action]
              when "option1"
                "command1"
              when "option2"
                "command2"
              end

            system(command)
            ```

            ## Resources
            - [OWASP Ruby command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Ruby_on_Rails_Cheat_Sheet.html#command-injection)
            - [OWASP OS command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_exec_using_user_input
      line_number: 3
      filename: unsafe_stdlib.rb
      parent_line_number: 3
      snippet: Kernel.exec(params[:oops])
      fingerprint: 317e176e853b9f8a94cc0783303f5bdf_0
    - rule:
        cwe_ids:
            - "78"
        id: ruby_lang_exec_using_user_input
        title: Execution of OS command formed with user input detected.
        description: |
            ## Description

            Applications should not execute OS commands that are formed from user input.
            This rule checks for external commands containing user-supplied data.

            ## Remediations

            ❌ Avoid using user input when executing commands:

            ```ruby
            system(params[:command])
            ```

            ✅ Use user input indirectly when executing commands:

            ```ruby
            command =
              case params[:action]
              when "option1"
                "command1"
              when "option2"
                "command2"
              end

            system(command)
            ```

            ## Resources
            - [OWASP Ruby command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Ruby_on_Rails_Cheat_Sheet.html#command-injection)
            - [OWASP OS command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_exec_using_user_input
      line_number: 5
      filename: unsafe_stdlib.rb
      parent_line_number: 5
      snippet: spawn(params[:oops])
      fingerprint: 317e176e853b9f8a94cc0783303f5bdf_1
    - rule:
        cwe_ids:
            - "78"
        id: ruby_lang_exec_using_user_input
        title: Execution of OS command formed with user input detected.
        description: |
            ## Description

            Applications should not execute OS commands that are formed from user input.
            This rule checks for external commands containing user-supplied data.

            ## Remediations

            ❌ Avoid using user input when executing commands:

            ```ruby
            system(params[:command])
            ```

            ✅ Use user input indirectly when executing commands:

            ```ruby
            command =
              case params[:action]
              when "option1"
                "command1"
              when "option2"
                "command2"
              end

            system(command)
            ```

            ## Resources
            - [OWASP Ruby command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Ruby_on_Rails_Cheat_Sheet.html#command-injection)
            - [OWASP OS command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_exec_using_user_input
      line_number: 7
      filename: unsafe_stdlib.rb
      parent_line_number: 7
      snippet: IO.popen(params[:oops]) {}
      fingerprint: 317e176e853b9f8a94cc0783303f5bdf_2
    - rule:
        cwe_ids:
            - "78"
        id: ruby_lang_exec_using_user_input
        title: Execution of OS command formed with user input detected.
        description: |
            ## Description

            Applications should not execute OS commands that are formed from user input.
            This rule checks for external commands containing user-supplied data.

            ## Remediations

            ❌ Avoid using user input when executing commands:

            ```ruby
            system(params[:command])
            ```

            ✅ Use user input indirectly when executing commands:

            ```ruby
            command =
              case params[:action]
              when "option1"
                "command1"
              when "option2"
                "command2"
              end

            system(command)
            ```

            ## Resources
            - [OWASP Ruby command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Ruby_on_Rails_Cheat_Sheet.html#command-injection)
            - [OWASP OS command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_exec_using_user_input
      line_number: 9
      filename: unsafe_stdlib.rb
      parent_line_number: 9
      snippet: Process.exec(params[:oops])
      fingerprint: 317e176e853b9f8a94cc0783303f5bdf_3
    - rule:
        cwe_ids:
            - "78"
        id: ruby_lang_exec_using_user_input
        title: Execution of OS command formed with user input detected.
        description: |
            ## Description

            Applications should not execute OS commands that are formed from user input.
            This rule checks for external commands containing user-supplied data.

            ## Remediations

            ❌ Avoid using user input when executing commands:

            ```ruby
            system(params[:command])
            ```

            ✅ Use user input indirectly when executing commands:

            ```ruby
            command =
              case params[:action]
              when "option1"
                "command1"
              when "option2"
                "command2"
              end

            system(command)
            ```

            ## Resources
            - [OWASP Ruby command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Ruby_on_Rails_Cheat_Sheet.html#command-injection)
            - [OWASP OS command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_exec_using_user_input
      line_number: 11
      filename: unsafe_stdlib.rb
      parent_line_number: 11
      snippet: Open3.popen3(["cmd", params[:oops]], "abc") {}
      fingerprint: 317e176e853b9f8a94cc0783303f5bdf_4
    - rule:
        cwe_ids:
            - "78"
        id: ruby_lang_exec_using_user_input
        title: Execution of OS command formed with user input detected.
        description: |
            ## Description

            Applications should not execute OS commands that are formed from user input.
            This rule checks for external commands containing user-supplied data.

            ## Remediations

            ❌ Avoid using user input when executing commands:

            ```ruby
            system(params[:command])
            ```

            ✅ Use user input indirectly when executing commands:

            ```ruby
            command =
              case params[:action]
              when "option1"
                "command1"
              when "option2"
                "command2"
              end

            system(command)
            ```

            ## Resources
            - [OWASP Ruby command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Ruby_on_Rails_Cheat_Sheet.html#command-injection)
            - [OWASP OS command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_exec_using_user_input
      line_number: 13
      filename: unsafe_stdlib.rb
      parent_line_number: 13
      snippet: Gem::Util.silent_system(x, params[:oops])
      fingerprint: 317e176e853b9f8a94cc0783303f5bdf_5
    - rule:
        cwe_ids:
            - "78"
        id: ruby_lang_exec_using_user_input
        title: Execution of OS command formed with user input detected.
        description: |
            ## Description

            Applications should not execute OS commands that are formed from user input.
            This rule checks for external commands containing user-supplied data.

            ## Remediations

            ❌ Avoid using user input when executing commands:

            ```ruby
            system(params[:command])
            ```

            ✅ Use user input indirectly when executing commands:

            ```ruby
            command =
              case params[:action]
              when "option1"
                "command1"
              when "option2"
                "command2"
              end

            system(command)
            ```

            ## Resources
            - [OWASP Ruby command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Ruby_on_Rails_Cheat_Sheet.html#command-injection)
            - [OWASP OS command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_exec_using_user_input
      line_number: 15
      filename: unsafe_stdlib.rb
      parent_line_number: 15
      snippet: PTY.spawn("/bin/#{params[:oops]}") {}
      fingerprint: 317e176e853b9f8a94cc0783303f5bdf_6
    - rule:
        cwe_ids:
            - "78"
        id: ruby_lang_exec_using_user_input
        title: Execution of OS command formed with user input detected.
        description: |
            ## Description

            Applications should not execute OS commands that are formed from user input.
            This rule checks for external commands containing user-supplied data.

            ## Remediations

            ❌ Avoid using user input when executing commands:

            ```ruby
            system(params[:command])
            ```

            ✅ Use user input indirectly when executing commands:

            ```ruby
            command =
              case params[:action]
              when "option1"
                "command1"
              when "option2"
                "command2"
              end

            system(command)
            ```

            ## Resources
            - [OWASP Ruby command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Ruby_on_Rails_Cheat_Sheet.html#command-injection)
            - [OWASP OS command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_exec_using_user_input
      line_number: 17
      filename: unsafe_stdlib.rb
      parent_line_number: 17
      snippet: '%x{/bin/#{params[:oops]}}'
      fingerprint: 317e176e853b9f8a94cc0783303f5bdf_7
    - rule:
        cwe_ids:
            - "78"
        id: ruby_lang_exec_using_user_input
        title: Execution of OS command formed with user input detected.
        description: |
            ## Description

            Applications should not execute OS commands that are formed from user input.
            This rule checks for external commands containing user-supplied data.

            ## Remediations

            ❌ Avoid using user input when executing commands:

            ```ruby
            system(params[:command])
            ```

            ✅ Use user input indirectly when executing commands:

            ```ruby
            command =
              case params[:action]
              when "option1"
                "command1"
              when "option2"
                "command2"
              end

            system(command)
            ```

            ## Resources
            - [OWASP Ruby command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Ruby_on_Rails_Cheat_Sheet.html#command-injection)
            - [OWASP OS command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_exec_using_user_input
      line_number: 19
      filename: unsafe_stdlib.rb
      parent_line_number: 19
      snippet: '`/bin/#{params[:oops]}`'
      fingerprint: 317e176e853b9f8a94cc0783303f5bdf_8

