languages:
  - ruby
patterns:
  - pattern: |
      Kernel.$<METHOD>($<...>$<USER_INPUT>$<...>)
    filters:
      - variable: METHOD
        values:
          - exec
          - spawn
          - system
      - variable: USER_INPUT
        detection: ruby_lang_exec_using_user_input_user_input
  - pattern: |
      $<METHOD>($<...>$<USER_INPUT>$<...>)
    filters:
      - variable: METHOD
        values:
          - exec
          - spawn
          - system
      - variable: USER_INPUT
        detection: ruby_lang_exec_using_user_input_user_input
  - pattern: |
      IO.popen($<...>$<USER_INPUT>$<...>)$<...>
    filters:
      - variable: USER_INPUT
        detection: ruby_lang_exec_using_user_input_user_input
  - pattern: |
      Process.$<METHOD>($<...>$<USER_INPUT>$<...>)
    filters:
      - variable: METHOD
        values:
          - exec
          - spawn
      - variable: USER_INPUT
        detection: ruby_lang_exec_using_user_input_user_input
  - pattern: |
      Open3.$<_>($<...>$<USER_INPUT>$<...>)$<...>
    filters:
      - variable: USER_INPUT
        detection: ruby_lang_exec_using_user_input_user_input
  - pattern: |
      Gem::Util.$<METHOD>($<...>$<USER_INPUT>$<...>)
    filters:
      - variable: METHOD
        values:
          - popen
          - silent_system
      - variable: USER_INPUT
        detection: ruby_lang_exec_using_user_input_user_input
  - pattern: |
      PTY.spawn($<...>$<USER_INPUT>$<...>)$<...>
    filters:
      - variable: USER_INPUT
        detection: ruby_lang_exec_using_user_input_user_input
  - pattern: |
      %x{$<...>$<USER_INPUT>$<...>}
    filters:
      - variable: USER_INPUT
        detection: ruby_lang_exec_using_user_input_user_input
  - pattern: |
      `{$<...>$<USER_INPUT>$<...>`
    filters:
      - variable: USER_INPUT
        detection: ruby_lang_exec_using_user_input_user_input
  - pattern: |
      Shell.$<METHOD>($<...>$<USER_INPUT>$<...>)$<...>
    filters:
      - variable: METHOD
        values:
          - alias_command
          - def_system_command
      - variable: USER_INPUT
        detection: ruby_lang_exec_using_user_input_user_input
  - pattern: |
      Shell::CommandProcessor.$<METHOD>($<...>$<USER_INPUT>$<...>)$<...>
    filters:
      - variable: METHOD
        values:
          - alias_command
          - def_system_command
      - variable: USER_INPUT
        detection: ruby_lang_exec_using_user_input_user_input
  - pattern: |
      $<PROCESSOR>.system($<...>$<USER_INPUT>$<...>)
    filters:
      - variable: PROCESSOR
        detection: ruby_lang_exec_using_user_input_shell_cmd_proc
      - variable: USER_INPUT
        detection: ruby_lang_exec_using_user_input_user_input
auxiliary:
  - id: ruby_lang_exec_using_user_input_user_input
    patterns:
      - params
      - request
      - cookies
      - | # AWS lambda
        def $<_>($<!>event:, context:)
        end
  - id: ruby_lang_exec_using_user_input_shell
    patterns:
      - |
        Shell.new$<...>
  - id: ruby_lang_exec_using_user_input_shell_cmd_proc
    patterns:
      - pattern: |
          $<SHELL>.command_processor
        filters:
          - variable: SHELL
            detection: ruby_lang_exec_using_user_input_shell
      - Shell::CommandProcessor.new$<...>
trigger: presence
severity: high
metadata:
  description: "Execution of OS command formed with user input detected."
  remediation_message: |
    ## Description

    Applications should not execute OS commands that are formed from user input.
    This rule checks for external commands containing user-supplied data.

    ## Remediations

    ❌ Avoid using user input when executing commands:

    ```ruby
    system(params[:command])
    ```

    ✅ Use user input indirectly when executing commands:

    ```ruby
    command =
      case params[:action]
      when "option1"
        "command1"
      when "option2"
        "command2"
      end

    system(command)
    ```
    <!--
    ## Resources
    Coming soon.
    -->
  cwe_id:
    - 78
  id: ruby_lang_exec_using_user_input
