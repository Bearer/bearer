languages:
  - ruby
patterns:
  - pattern: |
      $<FILE> << $<DATA_TYPE>
    filters:
      - variable: FILE
        detection: ruby_lang_file_generation_file
      - variable: DATA_TYPE
        detection: datatype
  - pattern: |
      $<FILE>.$<METHOD>($<...>$<DATA_TYPE>$<...>)
    filters:
      - variable: FILE
        detection: ruby_lang_file_generation_file
      - variable: METHOD
        values:
          - puts
          - write
      - variable: DATA_TYPE
        detection: datatype
auxiliary:
  - id: ruby_lang_file_generation_file
    patterns:
      - |
        CSV.generate
      - |
        CSV.generate { |$<!>$<_:identifier>| }
      - |
        CSV.open()
      - |
        CSV.open() { |$<!>$<_:identifier>| }
      - |
        File.open()
      - |
        File.open() { |$<!>$<_:identifier>| }
      - |
        IO.open()
      - |
        IO.open() { |$<!>$<_:identifier>| }
trigger: local
severity:
  default: low
  PII: critical
  PHI: medium
  PD: high
metadata:
  description: "Do not write sensitive data to static files."
  remediation_message: |
    ## Description

    It is not uncommon to generate logs, backups, or data exports to static file formats. This rule checks if code exists to write sensitive data to static files.

    ## Remediations

    ‚ùå Avoid code like the following:

    ```ruby
    File.open("users.log", "w") { |f| f.write "#{Time.now} - User #{user.email} logged in\n" }
    File.open("users.csv", "w") do |f|
      users.each do |user|
        f.write "#{user.email},#{user.first_name},#{user.last_name}"
      end
    end
    ```

    In instances where writing sensitive data is intentional, make sure to document its location according to your internal policies.

    <!--
    ## Resources
    Coming soon.
    -->
  dsr_id: DSR-4
  id: ruby_lang_file_generation
