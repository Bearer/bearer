high:
    - rule:
        cwe_ids:
            - "327"
            - "916"
        id: javascript_weak_password_encryption
        title: Weak encryption library usage detected.
        description: |
            ## Description

            Passwords should be encrypted with strong encryption algorithms like aes-256-cbc

            ## Remediations

            According to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption): MD5, RC4, DES, Blowfish, SHA1. 1024-bit RSA or DSA, 160-bit ECDSA (elliptic curves), 80/112-bit 2TDEA (two key triple DES) are considered as weak hash/encryption algorithms and therefore shouldn't be used.

            ✅ Use stronger encryption algorithms when storing passwords.

            ```javascript
            const crypto = require("crypto");

            const key = "secret key";
            const encrypted = crypto.createHmac("es-256-cbc", key).update(user.password);
            ```

            ## Resources
            - [NodeJS Crypto Module](https://nodejs.org/api/crypto.html#cryptocreatehmacalgorithm-key-options)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_weak_password_encryption
      line_number: 4
      filename: md5_password.js
      category_groups:
        - PII
        - Personal Data
      parent_line_number: 4
      snippet: crypto.createHmac("md5", key).update(user.password)
      fingerprint: 91595eeb27b5e6a736f190f5e774b326_0
    - rule:
        cwe_ids:
            - "327"
            - "916"
        id: javascript_weak_password_encryption
        title: Weak encryption library usage detected.
        description: |
            ## Description

            Passwords should be encrypted with strong encryption algorithms like aes-256-cbc

            ## Remediations

            According to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption): MD5, RC4, DES, Blowfish, SHA1. 1024-bit RSA or DSA, 160-bit ECDSA (elliptic curves), 80/112-bit 2TDEA (two key triple DES) are considered as weak hash/encryption algorithms and therefore shouldn't be used.

            ✅ Use stronger encryption algorithms when storing passwords.

            ```javascript
            const crypto = require("crypto");

            const key = "secret key";
            const encrypted = crypto.createHmac("es-256-cbc", key).update(user.password);
            ```

            ## Resources
            - [NodeJS Crypto Module](https://nodejs.org/api/crypto.html#cryptocreatehmacalgorithm-key-options)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_weak_password_encryption
      line_number: 5
      filename: md5_password.js
      category_groups:
        - PII
        - Personal Data
      parent_line_number: 5
      snippet: crypto.createHash("md5").update(user.password)
      fingerprint: 91595eeb27b5e6a736f190f5e774b326_1
    - rule:
        cwe_ids:
            - "327"
            - "916"
        id: javascript_weak_password_encryption
        title: Weak encryption library usage detected.
        description: |
            ## Description

            Passwords should be encrypted with strong encryption algorithms like aes-256-cbc

            ## Remediations

            According to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption): MD5, RC4, DES, Blowfish, SHA1. 1024-bit RSA or DSA, 160-bit ECDSA (elliptic curves), 80/112-bit 2TDEA (two key triple DES) are considered as weak hash/encryption algorithms and therefore shouldn't be used.

            ✅ Use stronger encryption algorithms when storing passwords.

            ```javascript
            const crypto = require("crypto");

            const key = "secret key";
            const encrypted = crypto.createHmac("es-256-cbc", key).update(user.password);
            ```

            ## Resources
            - [NodeJS Crypto Module](https://nodejs.org/api/crypto.html#cryptocreatehmacalgorithm-key-options)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_weak_password_encryption
      line_number: 9
      filename: md5_password.js
      category_groups:
        - PII
        - Personal Data
      parent_line_number: 9
      snippet: CryptoJS.MD5(user.password)
      fingerprint: 91595eeb27b5e6a736f190f5e774b326_2

