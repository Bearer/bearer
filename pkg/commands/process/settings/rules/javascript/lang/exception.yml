patterns:
  - pattern: |
      Promise.reject($<...>$<DATA_TYPE>$<...>)
    filters:
      - variable: DATA_TYPE
        detection: datatype
  - pattern: |
      $<REJECT>($<...>$<DATA_TYPE>$<...>)
    filters:
      - variable: DATA_TYPE
        detection: datatype
      - variable: REJECT
        detection: javascript_lang_new_promise_init
  - pattern: |
      throw $<...>$<DATA_TYPE>$<...>
    filters:
      - variable: DATA_TYPE
        detection: datatype
auxiliary:
  - id: javascript_lang_new_promise_init
    patterns:
      - |
        new Promise(($<_>, $<!>$<_>) => {})
      - |
        new Promise(function ($<_>, $<!>$<_>) {})
languages:
  - javascript
trigger: local
severity:
  default: low
  PII: critical
  PHI: medium
  PD: high
skip_data_types:
  - Unique Identifier
metadata:
  description: "Sensitive data in a exception message detected."
  remediation_message: |
    ## Description

    Leaking sensitive data to an exception is a common cause of data leaks and can lead to data breaches. This rule looks for instances of sensitive data sent to exceptions.

    ## Remediations

    ❌ Avoid using sensitive data in exception messages:

    ```javascript
    throw new CustomError(`Error with ${user.email}`)
    ```

    ✅ If you need to identify a user, ensure to use their unique identifier instead of their personal identifiable information:

    ```javascript
    throw new CustomError(`Error with ${user.uuid}`)
    ```
    <!--
    ## Resources
    Coming soon.
    -->
  cwe_id:
    - 210
  id: javascript_lang_exception
