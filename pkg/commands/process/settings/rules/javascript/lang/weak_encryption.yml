patterns:
  - pattern: |
      $<VAR>.update($<DATA_TYPE>)
    filters:
      - variable: VAR
        detection: create_hash
      - variable: DATA_TYPE
        detection: datatype
languages:
  - javascript
auxiliary:
  - id: create_hash
    patterns:
      - pattern: |
          crypto.$<METHOD>($<ALGORITHM>$<...>)
        filters:
          - variable: METHOD
            values:
              - createHmac
              - createHash
          - variable: ALGORITHM
            values:
              - '"md5"'
              - '"sha1"'
trigger: local
severity:
  default: low
  PII: critical
  PHI: medium
  PD: high
skip_data_types:
  - "Unique Identifier"
metadata:
  description: "Weak encryption library usage detected."
  remediation_message: |
    ## Description

    Sensitive data should be encrypted with strong encryption algorithms like aes-256-cbc

    ## Remediations

    According to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption): MD5, RC4, DES, Blowfish, SHA1. 1024-bit RSA or DSA, 160-bit ECDSA (elliptic curves), 80/112-bit 2TDEA (two key triple DES) are considered as weak hash/encryption algorithms and therefore shouldn't be used.

    âœ… Use stronger encryption algorithms when storing data.

    ```javascript
    const crypto = require("crypto");

    const key = "secret key";
    const encrypted = crypto.createHmac("es-256-cbc", key).update(user.password);
    ```

    ## Resources
    - [NodeJS Crypto Module](https://nodejs.org/api/crypto.html#cryptocreatehmacalgorithm-key-options)
  dsr_id: "DSR-5"
  cwe_id:
    - 327
  id: "javascript_weak_encryption"
