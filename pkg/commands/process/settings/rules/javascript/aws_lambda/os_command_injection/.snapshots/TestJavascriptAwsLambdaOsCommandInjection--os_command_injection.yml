high:
    - rule:
        cwe_ids:
            - "78"
        id: javascript_aws_lambda_os_command_injection
        title: OS command injection vulnerability detected.
        description: |
            ## Description
            Using external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.

            ## Remediations

            Think twice if user input is really needed there.

            It might be possible to use dynamic hardcoded values:

            ```javascript
            exports.handler = async (event) => {
                let filePattern = "*.js"

                if event["graphql"] {
                  filePattern = "*.gql"
                }

                cp.exec(`cp ${filePattern} foo`, (error, stdout, stderr) => {});
            };
            ```

            ## Resources
            - [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_aws_lambda_os_command_injection
      line_number: 4
      filename: os_command_injection.js
      parent_line_number: 4
      snippet: |-
        exec("ls "+event["user_dir"]+"| wc -l", (err, stdout, stderr) => {
            // do something
          })
      fingerprint: fdf91dd06466b2382d6174c5874a101b_0
    - rule:
        cwe_ids:
            - "78"
        id: javascript_aws_lambda_os_command_injection
        title: OS command injection vulnerability detected.
        description: |
            ## Description
            Using external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.

            ## Remediations

            Think twice if user input is really needed there.

            It might be possible to use dynamic hardcoded values:

            ```javascript
            exports.handler = async (event) => {
                let filePattern = "*.js"

                if event["graphql"] {
                  filePattern = "*.gql"
                }

                cp.exec(`cp ${filePattern} foo`, (error, stdout, stderr) => {});
            };
            ```

            ## Resources
            - [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_aws_lambda_os_command_injection
      line_number: 8
      filename: os_command_injection.js
      parent_line_number: 8
      snippet: |-
        execSync("ls "+event["user"]+"| wc -l", (err, stdout, stderr) => {
            // do something
          })
      fingerprint: fdf91dd06466b2382d6174c5874a101b_1
    - rule:
        cwe_ids:
            - "78"
        id: javascript_aws_lambda_os_command_injection
        title: OS command injection vulnerability detected.
        description: |
            ## Description
            Using external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.

            ## Remediations

            Think twice if user input is really needed there.

            It might be possible to use dynamic hardcoded values:

            ```javascript
            exports.handler = async (event) => {
                let filePattern = "*.js"

                if event["graphql"] {
                  filePattern = "*.gql"
                }

                cp.exec(`cp ${filePattern} foo`, (error, stdout, stderr) => {});
            };
            ```

            ## Resources
            - [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_aws_lambda_os_command_injection
      line_number: 12
      filename: os_command_injection.js
      parent_line_number: 12
      snippet: spawn(event["query"])
      fingerprint: fdf91dd06466b2382d6174c5874a101b_2
    - rule:
        cwe_ids:
            - "78"
        id: javascript_aws_lambda_os_command_injection
        title: OS command injection vulnerability detected.
        description: |
            ## Description
            Using external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.

            ## Remediations

            Think twice if user input is really needed there.

            It might be possible to use dynamic hardcoded values:

            ```javascript
            exports.handler = async (event) => {
                let filePattern = "*.js"

                if event["graphql"] {
                  filePattern = "*.gql"
                }

                cp.exec(`cp ${filePattern} foo`, (error, stdout, stderr) => {});
            };
            ```

            ## Resources
            - [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_aws_lambda_os_command_injection
      line_number: 14
      filename: os_command_injection.js
      parent_line_number: 14
      snippet: spawnSync("grep " + event["tmp"])
      fingerprint: fdf91dd06466b2382d6174c5874a101b_3

