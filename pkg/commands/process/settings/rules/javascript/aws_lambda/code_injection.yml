patterns:
  - pattern: |
      vm.$<METHOD>($<...>$<RAW_INPUT>$<...>)
    filters:
      - variable: METHOD
        values:
          - createContext
          - runInContext
          - runInNewContext
          - runInThisContext
          - compileFunction
      - variable: RAW_INPUT
        detection: javascript_aws_lambda_code_injection_user_input
  - pattern: |
      new vm.Script($<...>$<RAW_INPUT>$<...>)
    filters:
      - variable: RAW_INPUT
        detection: javascript_aws_lambda_code_injection_user_input
  - pattern: |
      eval($<RAW_INPUT>)
    filters:
      - variable: RAW_INPUT
        detection: javascript_aws_lambda_code_injection_user_input
  - pattern: |
      new Function($<RAW_INPUT>)
    filters:
      - variable: RAW_INPUT
        detection: javascript_aws_lambda_code_injection_user_input
  - pattern: |
      setTimeout($<RAW_INPUT>)
    filters:
      - variable: RAW_INPUT
        detection: javascript_aws_lambda_code_injection_user_input
  - pattern: |
      setInterval($<RAW_INPUT>)
    filters:
      - variable: RAW_INPUT
        detection: javascript_aws_lambda_code_injection_user_input
auxiliary:
  - id: javascript_aws_lambda_code_injection_user_input
    patterns:
      - event.$<_>
      - event[$<_>]
languages:
  - javascript
trigger: presence
severity: high
metadata:
  description: "Code injection detected."
  remediation_message: |
    ## Description
    Running code that contains unsanitized data, such as user input or request data, makes your application vulnerable to injection attacks.

    ## Remediations
    Think twice if user input is really needed there.

    It might be possible to use dynamic hardcoded values:

    ```javascript
      exports.handler = async (event) => {
          let myFunc = "(a, b) => a + b"

          if event["singleMember"] {
            myFunc = "(a) => a"
          }

          vm.compileFunction(myFunc);
      };
    ```

    or pass user input to a compiled function, instead of compiling it with user input.

    ```javascript
      exports.handler = async (event) => {
          let myFunc = "(a, b) => a + b"

          if event["singleMember"] {
            myFunc = "(a) => a"
          }

          let compiledFunction = vm.compileFunction(myFunc);

          compiledFunction(event)
      };
    ```

    ## Resources
    - [OWASP sql injection explained](https://owasp.org/www-community/attacks/Code_Injection)
  cwe_id:
    - 94
    - 95
  id: "javascript_aws_lambda_code_injection"
