patterns:
  - pattern: | # AWS SDK V3 DynamoDB
      new QueryCommand($<QUERY>)
    filters:
      - variable: QUERY
        detection: javascript_aws_lambda_query_injection_raw_user_input
  - pattern: | # AWS SDK V2 DynamoDB
      $<DYNAMODB_INIT>.query($<QUERY>, $<_>)
    filters:
      - variable: QUERY
        detection: javascript_aws_lambda_query_injection_raw_user_input
      - variable: DYNAMODB_INIT
        detection: javascript_aws_lambda_query_injection_dynamodb_v2_init
auxiliary:
  - id: javascript_aws_lambda_query_injection_user_input
    patterns:
      - event.$<_>
      - event[$<_>]
  - id: javascript_aws_lambda_query_injection_hash
    patterns:
      - |
        {$<...>}
  - id: javascript_aws_lambda_query_injection_dynamodb_v2_init
    patterns:
      - new AWS.DynamoDB.DocumentClient()
  - id: javascript_aws_lambda_query_injection_raw_user_input
    patterns:
      - pattern: $<USER_INPUT>
        filters:
          - variable: USER_INPUT
            detection: javascript_aws_lambda_query_injection_user_input
          - not:
              variable: USER_INPUT
              detection: javascript_aws_lambda_query_injection_hash
languages:
  - javascript
trigger: presence
severity: high
metadata:
  description: "Raw user input in data store query detected."
  remediation_message: |
    ## Description
    Including unsanitized data, such as user input or request data, in raw queries makes your application vulnerable to injection attacks.

    ## Remediations

    Narrow down your query from the code instead of using unsanitzed user input to define it.

    Example:

    ```javascript
    exports.handler = async function(event, context) {
        var params = {
            Key: {
             "artist": {"S": event.input }, 
             "song": {"S": "Carrot Eton"}
            }, 
            TableName: "artists"
        };
        var result = await dynamodb.getItem(params).promise()
        console.log(JSON.stringify(result))
    }
    ```


    ## Resources
    - [OWASP nosql injection explained](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection)

  cwe_id:
    - 89
  id: "javascript_aws_lambda_query_injection"
