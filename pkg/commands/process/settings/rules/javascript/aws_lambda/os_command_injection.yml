patterns:
  - pattern: |
      $<CHILD_PROCESS_PATTERN>($<...>$<AWS_EVENT>$<...>)
    filters:
      - variable: CHILD_PROCESS_PATTERN
        values:
          - exec
          - execSync
          - spawn
          - spawnSync
      - variable: AWS_EVENT
        detection: javascript_aws_lambda_cross_site_scripting_event
auxiliary:
  - id: javascript_aws_lambda_cross_site_scripting_event
    patterns:
      - event
languages:
  - javascript
trigger: presence
severity: high
metadata:
  description: "OS command injection vulnerability detected."
  remediation_message: |
    ## Description
    Using external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.

    ## Remediations

    Think twice if user input is really needed there.

    It might be possible to use dynamic hardcoded values:

    ```javascript
    exports.handler = async (event) => {
        let filePattern = "*.js"

        if event["graphql"] {
          filePattern = "*.gql"
        }

        cp.exec(`cp ${filePattern} foo`, (error, stdout, stderr) => {});
    };
    ```

    ## Resources
    - [Owasp command injection explained](https://owasp.org/www-community/attacks/Command_Injection)
  cwe_id:
    - 78
  id: "javascript_aws_lambda_os_command_injection"
