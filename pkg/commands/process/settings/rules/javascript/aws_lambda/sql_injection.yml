patterns:
  - pattern: | # knex function calls
      $<_>.$<METHOD>($<...>$<AWS_LAMBDA_EVENT>$<...>)
    filters:
      - variable: METHOD
        values:
          - raw
          - whereRaw
      - variable: AWS_LAMBDA_EVENT
        detection: javascript_aws_lambda_sql_injection_event
  - pattern: |
      $<PG_CLIENT>.query($<...>$<AWS_LAMBDA_EVENT>$<...>)
    filters:
      - variable: PG_CLIENT
        detection: javascript_aws_lambda_sql_injection_pg_client
      - variable: AWS_LAMBDA_EVENT
        detection: javascript_aws_lambda_sql_injection_event
  - pattern: |
      $<SEQUELIZE>.query($<...>$<AWS_LAMBDA_EVENT>$<...>)
    filters:
      - variable: SEQUELIZE
        detection: javascript_aws_lambda_sql_injection_sequelize_init
      - variable: AWS_LAMBDA_EVENT
        detection: javascript_aws_lambda_sql_injection_event
  - pattern: |
      $<MYSQL_CONN>.$<METHOD>($<...>$<AWS_LAMBDA_EVENT>$<...>)
    filters:
      - variable: MYSQL_CONN
        detection: javascript_aws_lambda_sql_injection_mysql_conn
      - variable: AWS_LAMBDA_EVENT
        detection: javascript_aws_lambda_sql_injection_event
      - variable: METHOD
        values:
          - query
          - execute
  - pattern: |
      $<MYSQL_POOL>.query($<...>$<AWS_LAMBDA_EVENT>$<...>)
    filters:
      - variable: MYSQL_POOL
        detection: javascript_aws_lambda_sql_injection_mysql_pool
      - variable: AWS_LAMBDA_EVENT
        detection: javascript_aws_lambda_sql_injection_event
  - pattern: |
      $<CONN>.query($<AWS_LAMBDA_EVENT>, $<_>)
    filters:
      - variable: CONN
        detection: javascript_aws_lambda_sql_injection_pool_conn
      - variable: AWS_LAMBDA_EVENT
        detection: javascript_aws_lambda_sql_injection_event
auxiliary:
  - id: javascript_aws_lambda_sql_injection_event
    patterns:
      - event.$<_>
  - id: javascript_aws_lambda_sql_injection_pg_client
    patterns:
      - new Client()
  - id: javascript_aws_lambda_sql_injection_sequelize_init
    patterns:
      - new Sequelize()
  - id: javascript_aws_lambda_sql_injection_mysql_conn
    patterns:
      - mysql.createConnection()
      - await mysql.createConnection()
  - id: javascript_aws_lambda_sql_injection_mysql_pool
    patterns:
      - mysql.createPool()
  - id: javascript_aws_lambda_sql_injection_pool_conn
    patterns:
      - pattern: $<MYSQL_POOL>.getConnection(function($<_>, $<!>$<CONN:identifier>) {})
        filters:
          - variable: MYSQL_POOL
            detection: javascript_express_sql_injection_mysql_pool
languages:
  - javascript
trigger: presence
severity: high
metadata:
  description: "SQL injection vulnerability detected."
  remediation_message: |
    ## Description
    Including unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.


    ## Remediations

    Use safe sql libraries methods which sanitze user input

    Sequelize example
    ```javascript
      const { Op } = require("sequelize");

      module.exports= async function(event, context) {
        await Post.findAll({
          where: {
            [Op.or]: [
              { authorId: event.authorID },
              { authorId: 13 }
            ]
          }
        });
      };
    ```

    ## Resources
    - [Owasp sql injection explained](https://owasp.org/www-community/attacks/SQL_Injection)

  cwe_id:
    - 89
  id: "javascript_aws_lambda_sql_injection"
