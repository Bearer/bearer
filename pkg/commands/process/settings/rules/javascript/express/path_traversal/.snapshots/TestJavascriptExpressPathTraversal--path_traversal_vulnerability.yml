high:
    - rule:
        cwe_ids:
            - "22"
        id: javascript_express_path_traversal
        title: Possible path traversal vulnerability detected.
        description: |
            ## Description
            Allowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.

            ## Remediations
            ❌ Avoid wherever possible

            ✅ Sanitize user input when resolving paths, for example:
            - Use `replace()` to mitigate against unwanted patterns in the path (such as `\..\..`)
            - Actively guard against paths that end in "%00" (poison NULL byte attacks)
            - Use path concatenation to ensure the intended scope is respected

            ```javascript
            const path = require("path");

            app.get("/", (req, res) => {
              if (req.params.path.indexOf('\0')) !== -1 {
                // prevent access
              }

              var folder = req.params.path.replace(/^(\.\.(\/|\\|$))+/, '')

              var pathname = path.join("/public/", folder)
              if pathname.indexOf("/public/") !== 0 {
                // prevent access
              }

              path.resolve(pathname)
            })
            ```

            ## Resources
            - [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_express_path_traversal
      line_number: 9
      filename: path_traversal_vulnerability.js
      parent_line_number: 9
      snippet: path.join("/public/", req.query.path)
      fingerprint: 84e934af8c2135f6ce968eda8b515dbd_0
    - rule:
        cwe_ids:
            - "22"
        id: javascript_express_path_traversal
        title: Possible path traversal vulnerability detected.
        description: |
            ## Description
            Allowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.

            ## Remediations
            ❌ Avoid wherever possible

            ✅ Sanitize user input when resolving paths, for example:
            - Use `replace()` to mitigate against unwanted patterns in the path (such as `\..\..`)
            - Actively guard against paths that end in "%00" (poison NULL byte attacks)
            - Use path concatenation to ensure the intended scope is respected

            ```javascript
            const path = require("path");

            app.get("/", (req, res) => {
              if (req.params.path.indexOf('\0')) !== -1 {
                // prevent access
              }

              var folder = req.params.path.replace(/^(\.\.(\/|\\|$))+/, '')

              var pathname = path.join("/public/", folder)
              if pathname.indexOf("/public/") !== 0 {
                // prevent access
              }

              path.resolve(pathname)
            })
            ```

            ## Resources
            - [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_express_path_traversal
      line_number: 10
      filename: path_traversal_vulnerability.js
      parent_line_number: 10
      snippet: path.resolve(req.query.path)
      fingerprint: 84e934af8c2135f6ce968eda8b515dbd_1

