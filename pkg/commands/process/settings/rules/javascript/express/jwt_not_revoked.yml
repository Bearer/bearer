patterns:
  - pattern: |
      expressjwt($<HASH_CONTENT>)
    filters:
      - variable: HASH_CONTENT
        detection: javascript_express_jwt_not_revoked_secret_datatype
      - not:
          variable: HASH_CONTENT
          detection: javascript_express_jwt_not_revoked_is_revoked
languages:
  - javascript
auxiliary:
  - id: javascript_express_jwt_not_revoked_secret_datatype
    patterns:
      - pattern: |
          { $<...>secret: $<DATA_TYPE>$<...> }
        filters:
          - variable: DATA_TYPE
            detection: datatype
  - id: javascript_express_jwt_not_revoked_is_revoked
    patterns:
      - pattern: |
          { $<...>isRevoked: $<_>$<...> }
trigger: presence
severity: low
metadata:
  description: "Unrevoked JWT detected."
  remediation_message: |
    ## Description
    The best practice caching policy is to revoke JWTs especially when these contain senstitive information.

    ## Remediations
    âœ… Ensure JWTs are short-lived by revoking them

    ```javascript
    expressjwt({
      ...
      isRevoked: this.customRevokeCall(),
      ...
    })
    ```

    ## Resources
    - [ExpressJWT documentation on revoking tokens](https://github.com/auth0/express-jwt#revoked-tokens)
  cwe_id:
    - 525
  id: "javascript_express_jwt_not_revoked"
