patterns:
  - pattern: |
      fetch($<USER_INPUT>)
    filters:
      - variable: USER_INPUT
        detection: javascript_express_ssrf_request_obj
  - pattern: |
      axios.get($<USER_INPUT>)
    filters:
      - variable: USER_INPUT
        detection: javascript_express_ssrf_request_obj
  - pattern: |
      $<PUPPETEER_PAGE>.$<METHOD>($<USER_INPUT>)
    filters:
      - variable: PUPPETEER_PAGE
        detection:
      - variable: METHOD
        values:
          - goto
          - setContent
          - evaluate
          - evaluateOnNewDocument
      - variable: USER_INPUT
        detection: javascript_express_ssrf_request_obj
auxiliary:
  - id: javascript_express_ssrf_request_obj
    patterns:
      - req.params
      - req.query
      - req.body
      - req.cookies
      - req.headers
  - id: javascript_puppeteer_page
    patterns:
      - $<PUPPETEER_BROWSER>.newPage()
    filters:
      - variable: PUPPETEER_BROWSER
        detection: javascript_puppeteer_browser
  - id: javascript_puppeteer_browser
    patterns:
      - puppeteer.launch()
languages:
  - javascript
trigger: presence
severity: high
metadata:
  description: "Risk of server-side request forgery detected."
  remediation_message: |
    ## Description
    Using unsanitized URLs from the request object when retrieving data puts your application at risk of server-side request forgery (SSRF) attacks.
    This rule checks for URLs containing user-supplied data.

    ## Remediations

    ❌ Avoid using user input in URLs:

    ```javascript
    axios.get(`https://${req.params.host}`)
    ```

    ✅ Use user input indirectly to form a URL:

    ```javascript
    var host = "default-api.com"
    if req.params.host == "something-else" {
      host = "other-api.com"
    }

    axios.get(`https://${host}`)
    ```

    ## Resources
    - [OWASP - Server-Side Request Forgery (SSRF) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)
  cwe_id:
    - 918
  id: "javascript_express_server_side_request_forgery"
