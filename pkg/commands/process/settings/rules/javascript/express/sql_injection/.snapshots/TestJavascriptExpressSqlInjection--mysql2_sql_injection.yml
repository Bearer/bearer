high:
    - rule:
        cwe_ids:
            - "89"
        id: javascript_express_sql_injection
        title: SQL injection vulnerability detected.
        description: |
            ## Description
            Including unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.

            ## Remediations

            ❌ Avoid raw queries, especially those that contain unsanitized user input

            ```javascript
              var sqlite = new Sequelize("sqlite::memory:");
              sqlite.query("SELECT * FROM users WHERE ID = " + req.params.userId);
            ```

            Instead, consider the following approaches when writing SQL queries

            ✅ Validate query input wherever possible

            ```javascript
              var rawId = req.params.userId
              if !(/[0-9]+/.test(rawId)) {
                // input is unexpected; don't make the query
              }
            ```

            ✅ Use prepared (or parameterized) statements when querying

            Sequelize example -
            ```javascript
              var sqlite = new Sequelize("sqlite::memory:");
              sqlite.query(
                "SELECT * FROM users WHERE ID = ?",
                { replacements: [req.params.userId] },
                type: sequelize.QueryTypes.SELECT
              )
            ```

            ## Resources
            - [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)
            - [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_express_sql_injection
      line_number: 12
      filename: mysql2_sql_injection.js
      parent_line_number: 12
      snippet: |-
        connection.query(
        		"SELECT * FROM `user` WHERE name = " + req.params.customer.name
        	)
      fingerprint: 6ab447a0217cef645dfc88f86abb0c3a_0
    - rule:
        cwe_ids:
            - "89"
        id: javascript_express_sql_injection
        title: SQL injection vulnerability detected.
        description: |
            ## Description
            Including unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.

            ## Remediations

            ❌ Avoid raw queries, especially those that contain unsanitized user input

            ```javascript
              var sqlite = new Sequelize("sqlite::memory:");
              sqlite.query("SELECT * FROM users WHERE ID = " + req.params.userId);
            ```

            Instead, consider the following approaches when writing SQL queries

            ✅ Validate query input wherever possible

            ```javascript
              var rawId = req.params.userId
              if !(/[0-9]+/.test(rawId)) {
                // input is unexpected; don't make the query
              }
            ```

            ✅ Use prepared (or parameterized) statements when querying

            Sequelize example -
            ```javascript
              var sqlite = new Sequelize("sqlite::memory:");
              sqlite.query(
                "SELECT * FROM users WHERE ID = ?",
                { replacements: [req.params.userId] },
                type: sequelize.QueryTypes.SELECT
              )
            ```

            ## Resources
            - [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)
            - [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_express_sql_injection
      line_number: 18
      filename: mysql2_sql_injection.js
      parent_line_number: 18
      snippet: |-
        pool.query(
        		"SELECT * FROM users WHERE name = " + req.params.user_name,
        		function () {}
        	)
      fingerprint: 6ab447a0217cef645dfc88f86abb0c3a_1
    - rule:
        cwe_ids:
            - "89"
        id: javascript_express_sql_injection
        title: SQL injection vulnerability detected.
        description: |
            ## Description
            Including unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.

            ## Remediations

            ❌ Avoid raw queries, especially those that contain unsanitized user input

            ```javascript
              var sqlite = new Sequelize("sqlite::memory:");
              sqlite.query("SELECT * FROM users WHERE ID = " + req.params.userId);
            ```

            Instead, consider the following approaches when writing SQL queries

            ✅ Validate query input wherever possible

            ```javascript
              var rawId = req.params.userId
              if !(/[0-9]+/.test(rawId)) {
                // input is unexpected; don't make the query
              }
            ```

            ✅ Use prepared (or parameterized) statements when querying

            Sequelize example -
            ```javascript
              var sqlite = new Sequelize("sqlite::memory:");
              sqlite.query(
                "SELECT * FROM users WHERE ID = ?",
                { replacements: [req.params.userId] },
                type: sequelize.QueryTypes.SELECT
              )
            ```

            ## Resources
            - [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)
            - [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_express_sql_injection
      line_number: 23
      filename: mysql2_sql_injection.js
      parent_line_number: 23
      snippet: conn.query("SELECT * FROM users WHERE name = " + req.params.user_name, function () {})
      fingerprint: 6ab447a0217cef645dfc88f86abb0c3a_2

