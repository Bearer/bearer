high:
    - rule:
        cwe_ids:
            - "22"
        id: javascript_express_path_traversal
        title: Possible path traversal vulnerability detected.
        description: |
            ## Description
            Allowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.

            ## Remediations
            ❌ Avoid wherever possible

            ✅ Sanitize user input when resolving paths, for example:
            - Use `replace()` to mitigate against unwanted patterns in the path (such as `\..\..`)
            - Actively guard against paths that end in "%00" (poison NULL byte attacks)
            - Use path concatenation to ensure the intended scope is respected

            ```javascript
            const path = require("path");

            app.get("/", (req, res) => {
              if (req.params.path.indexOf('\0')) !== -1 {
                // prevent access
              }

              var folder = req.params.path.replace(/^(\.\.(\/|\\|$))+/, '')

              var pathname = path.join("/public/", folder)
              if pathname.indexOf("/public/") !== 0 {
                // prevent access
              }

              path.resolve(pathname)
            })
            ```

            ## Resources
            - [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_express_path_traversal
      line_number: 13
      filename: send_file_with_external_input.js
      parent_line_number: 13
      snippet: path.resolve(file)
      fingerprint: 0f96ceab826cffb4000a8469699f0a26_0
    - rule:
        cwe_ids:
            - "22"
        id: javascript_express_path_traversal
        title: Possible path traversal vulnerability detected.
        description: |
            ## Description
            Allowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.

            ## Remediations
            ❌ Avoid wherever possible

            ✅ Sanitize user input when resolving paths, for example:
            - Use `replace()` to mitigate against unwanted patterns in the path (such as `\..\..`)
            - Actively guard against paths that end in "%00" (poison NULL byte attacks)
            - Use path concatenation to ensure the intended scope is respected

            ```javascript
            const path = require("path");

            app.get("/", (req, res) => {
              if (req.params.path.indexOf('\0')) !== -1 {
                // prevent access
              }

              var folder = req.params.path.replace(/^(\.\.(\/|\\|$))+/, '')

              var pathname = path.join("/public/", folder)
              if pathname.indexOf("/public/") !== 0 {
                // prevent access
              }

              path.resolve(pathname)
            })
            ```

            ## Resources
            - [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_express_path_traversal
      line_number: 15
      filename: send_file_with_external_input.js
      parent_line_number: 15
      snippet: path.join(__dirname, req.params.root)
      fingerprint: 0f96ceab826cffb4000a8469699f0a26_1
low:
    - rule:
        cwe_ids:
            - "73"
        id: javascript_express_external_file_upload
        title: External control of filename or path detected.
        description: |
            ## Description
            Passing unsanitized user input to the sendFile API is bad practice and can lead to path manipulation, by which attackers can gain access to resources and data outside of the intended scope.

            ## Remediations
            ✅ Set the root option to be an absolute path to a directory

            ```javascript
            app.post("/upload", (req, res) => {
              var options = {
                root: path.join(__dirname, "upload")
              }
              res.sendFile(req.params.filename, options)
            }
            ```

            ## Resources
            - [Express sendFile API reference](http://expressjs.com/en/5x/api.html#res.sendFile)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_express_external_file_upload
      line_number: 12
      filename: send_file_with_external_input.js
      parent_line_number: 12
      snippet: res.sendFile(file)
      fingerprint: 594fb35e8692ca06ee83e8313e32ec58_0
    - rule:
        cwe_ids:
            - "73"
        id: javascript_express_external_file_upload
        title: External control of filename or path detected.
        description: |
            ## Description
            Passing unsanitized user input to the sendFile API is bad practice and can lead to path manipulation, by which attackers can gain access to resources and data outside of the intended scope.

            ## Remediations
            ✅ Set the root option to be an absolute path to a directory

            ```javascript
            app.post("/upload", (req, res) => {
              var options = {
                root: path.join(__dirname, "upload")
              }
              res.sendFile(req.params.filename, options)
            }
            ```

            ## Resources
            - [Express sendFile API reference](http://expressjs.com/en/5x/api.html#res.sendFile)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_express_external_file_upload
      line_number: 13
      filename: send_file_with_external_input.js
      parent_line_number: 13
      snippet: res.sendFile(path.resolve(file))
      fingerprint: 594fb35e8692ca06ee83e8313e32ec58_1
    - rule:
        cwe_ids:
            - "73"
        id: javascript_express_external_file_upload
        title: External control of filename or path detected.
        description: |
            ## Description
            Passing unsanitized user input to the sendFile API is bad practice and can lead to path manipulation, by which attackers can gain access to resources and data outside of the intended scope.

            ## Remediations
            ✅ Set the root option to be an absolute path to a directory

            ```javascript
            app.post("/upload", (req, res) => {
              var options = {
                root: path.join(__dirname, "upload")
              }
              res.sendFile(req.params.filename, options)
            }
            ```

            ## Resources
            - [Express sendFile API reference](http://expressjs.com/en/5x/api.html#res.sendFile)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_express_external_file_upload
      line_number: 14
      filename: send_file_with_external_input.js
      parent_line_number: 14
      snippet: res.sendFile(req.params.file, {}, () => {})
      fingerprint: 594fb35e8692ca06ee83e8313e32ec58_2
    - rule:
        cwe_ids:
            - "73"
        id: javascript_express_external_file_upload
        title: External control of filename or path detected.
        description: |
            ## Description
            Passing unsanitized user input to the sendFile API is bad practice and can lead to path manipulation, by which attackers can gain access to resources and data outside of the intended scope.

            ## Remediations
            ✅ Set the root option to be an absolute path to a directory

            ```javascript
            app.post("/upload", (req, res) => {
              var options = {
                root: path.join(__dirname, "upload")
              }
              res.sendFile(req.params.filename, options)
            }
            ```

            ## Resources
            - [Express sendFile API reference](http://expressjs.com/en/5x/api.html#res.sendFile)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_express_external_file_upload
      line_number: 15
      filename: send_file_with_external_input.js
      parent_line_number: 15
      snippet: 'res.sendFile("file.txt", { root: path.join(__dirname, req.params.root) })'
      fingerprint: 594fb35e8692ca06ee83e8313e32ec58_3

