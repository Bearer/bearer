patterns:
  - pattern: |
      path.$<METHOD>($<...>$<USER_INPUT>$<...>)
    filters:
      - variable: METHOD
        values:
          - join
          - resolve
      - variable: USER_INPUT
        detection: javascript_express_path_traversal_request_obj
      - not:
          variable: USER_INPUT
          detection: javascript_express_path_traversal_sanitized_user_input
auxiliary:
  - id: javascript_express_path_traversal_request_obj
    patterns:
      - req.params
      - req.query
      - req.body
      - req.cookies
      - req.headers
  - id: javascript_express_path_traversal_sanitized_user_input
    patterns:
      - $<_>.replace($<_>, "")
      - $<_>.replace($<_>, '')
languages:
  - javascript
trigger: presence
severity: high
metadata:
  description: "Possible path traversal vulnerability detected."
  remediation_message: |
    ## Description
    Allowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.

    ## Remediations
    ❌ Avoid wherever possible

    ✅ Sanitize user input when resolving paths, for example:
    - Use `replace()` to mitigate against unwanted patterns in the path (such as `\..\..`)
    - Actively guard against paths that end in "%00" (poison NULL byte attacks)
    - Use path concatenation to ensure the intended scope is respected

    ```javascript
    const path = require("path");

    app.get("/", (req, res) => {
      if (req.params.path.indexOf('\0')) !== -1 {
        // prevent access
      }

      var folder = req.params.path.replace(/^(\.\.(\/|\\|$))+/, '')

      var pathname = path.join("/public/", folder)
      if pathname.indexOf("/public/") !== 0 {
        // prevent access
      }

      path.resolve(pathname)
    })
    ```

    ## Resources
    - [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)
  cwe_id:
    - 22
  id: "javascript_express_path_traversal"
