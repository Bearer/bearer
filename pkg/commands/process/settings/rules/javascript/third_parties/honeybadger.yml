patterns:
  - pattern: |
      $<HONEYBADGER>.$<METHOD>($<...>$<DATA_TYPE>$<...>)
    filters:
      - variable: DATA_TYPE
        detection: datatype
      - variable: HONEYBADGER
        values:
          - Honeybadger
          - honeybadger
      - variable: METHOD
        values:
          - setContext
          - notify
          - notifyAsync
languages:
  - javascript
skip_data_types:
  - "Unique Identifier"
metadata:
  description: "Sensitive data sent to Honeybadger detected."
  remediation_message: |
    ## Description

    Leaking sensitive data to third-party error logging tools is a common cause of data leaks and can lead to data breaches. This rule looks for instances of sensitive data sent to Honeybadger.

    ## Remediations

    When sending data to logging libraries, ensure all sensitive data is removed.

    If you really need to identify users, use unique identifiers from the database.

    ```javascript
      const Honeybadger = require("@honeybadger-io/js");

      let context = { user: { uuid: "aacd05fd-8f5b-4bc6-aa8b-35e5fbf37325" } };

      Honeybadger.setContext(context);
    ```

    ## Resources
    - [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)
  cwe_id:
    - 201
  id: "javascript_honeybadger"
