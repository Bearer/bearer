patterns:
  - pattern: |
      $<CLIENT>.$<METHOD>($<...>$<DATA_TYPE>$<...>)
    filters:
      - variable: CLIENT
        detection: javascript_third_parties_hotshot_statsd
      - variable: DATA_TYPE
        detection: datatype
      - variable: METHOD
        values:
          - event
          - increment
          - historgram
          - set
languages:
  - javascript
auxiliary:
  - id: javascript_third_parties_hotshot_statsd
    patterns:
      - |
        new StatsD($<...>)
skip_data_types:
  - "Unique Identifier"
metadata:
  description: "Sensitive data sent to Datadog detected."
  remediation_message: |
    ## Description
    Leaking sensitive data to third-party loggers is a common cause of data leaks and can lead to data breaches. This rule looks for instances of sensitive data sent to Datadog.

    ## Remediations

    When logging errors or events, ensure all sensitive data is removed.

    If you really need to identify users, use unique identifiers from the database.

    ```javascript
      const StatsD = require("hot-shots");
      const client = new StatsD({
        port: 8020,
        globalTags: { env: process.env.NODE_ENV },
        errorHandler: errorHandler,
      });

      client.event(user.uuid, "logged_in", {});
    ```

    ## Resources
    - [Datadog docs](https://docs.datadoghq.com)
    - [Scrubbing data](https://docs.datadoghq.com/tracing/configure_data_security/?tab=mongodb#scrub-sensitive-data-from-your-spans)
    - [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)
  cwe_id:
    - 201
  associated_recipe: Datadog
  id: javascript_third_parties_datadog
