logger_leaks:
  description: "Leaking sensitive data to loggers is a common cause of data leaks and can lead to data breaches. This policy looks for instances of sensitive data sent to loggers."
  name: "Do not send sensitive data to loggers."
  display_id: "CR-001"
  id: "detect_ruby_logger"
  query: |
    policy_failure = data.bearer.leakage.policy_failure
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/leakage.rego
      name: bearer.leakage
session_leaks:
  description: "Sensitive data should not be stored in session cookies. This policy looks for any sensitive data stored within the session cookies."
  name: "Do not store sensitive data in session cookies."
  display_id: "CR-003"
  id: "detect_rails_session"
  query: |
    policy_failure = data.bearer.leakage.policy_failure
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/leakage.rego
      name: bearer.leakage
jwt_leaks:
  description: "JWTs are not a secure place to store sensitive data. This policy looks for any sensitive data types saved to a JWT."
  name: "Do not store sensitive data in JWTs."
  display_id: "CR-004"
  id: "detect_rails_jwt"
  query: |
    policy_failure = data.bearer.leakage.policy_failure
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/leakage.rego
      name: bearer.leakage
cookie_leaks:
  description: "Storing sensitive data in cookies can lead to a data breach. This policy looks for instances where sensitive data is stored in browser cookies."
  name: "Do not store sensitive data in cookies."
  display_id: "CR-002"
  id: "detect_rails_cookies"
  query: |
    policy_failure = data.bearer.leakage.policy_failure
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/leakage.rego
      name: bearer.leakage
ssl_certificate_verification_disabled:
  description: "Applications processing sensitive data should use valid SSL certificates. This policy checks if SSL verification is enabled."
  name: "Enable SSL Certificate Verification."
  display_id: "CR-011"
  id: "ssl_certificate_verification_disabled"
  query: |
    policy_failure = data.bearer.ssl_certificate_verification_disabled.policy_failure
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/ssl_certificate_verification_disabled.rego
      name: bearer.ssl_certificate_verification_disabled
application_level_encryption_missing:
  description: "Application-level encryption greatly reduces the risk of a data breach or data leak by making data unreadable. This policy checks if sensitive data types found in records are encrypted."
  name: "Force application-level encryption when processing sensitive data."
  display_id: "CR-021"
  id: "application_level_encryption_missing"
  query: |
    policy_failure = data.bearer.application_level_encryption.policy_failure
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/application_level_encryption.rego
      name: bearer.application_level_encryption
insecure_smtp_processing_sensitive_data:
  description: "Secure connections using SMTP help prevent unauthorized actors from viewing transmitted data. This policy checks if SMTP mailer settings are set to only allow secure connections."
  name: "Only communicate with secure SMTP connections."
  display_id: "CR-010"
  id: "detect_rails_insecure_smtp"
  query: |
    policy_failure = data.bearer.insecure_smtp.policy_failure
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/insecure_smtp.rego
      name: bearer.insecure_smtp
http_get_parameters:
  description: "Sensitive data should never be sent as part of the query string in HTTP GET requests. This policy checks if sensitive data types are sent as GET parameters."
  name: "Do not send sensitive data as HTTP GET parameters."
  display_id: "CR-015"
  id: "ruby_http_get_detection"
  query: |
    policy_failure = data.bearer.http_get_parameters.policy_failure
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/http_get_parameters.rego
      name: bearer.http_get_parameters
insecure_communication_processing_sensitive_data:
  description: "When applications process sensitive data, they should default to always use SSL when available. This policy checks if force SSL is enabled at the application level."
  name: "Force HTTPS access."
  display_id: "CR-012"
  id: "detect_rails_insecure_communication"
  query: |
    policy_failure = data.bearer.insecure_communication.policy_failure
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/insecure_communication.rego
      name: bearer.insecure_communication
insecure_ftp_processing_sensitive_data:
  description: "Communication with FTP servers should be done securely over SFTP in applications that process sensitive data. This policy checks if all FTP connections are made using SFTP."
  name: "Only communicate using SFTP connections."
  display_id: "CR-008"
  id: "detect_rails_insecure_ftp"
  query: |
    policy_failure = data.bearer.insecure_ftp.policy_failure
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/insecure_ftp.rego
      name: bearer.insecure_ftp
insecure_ftp_with_data_category:
  description: "Files containing sensitive data should only be sent via SFTP connections. This policy checks if files created using sensitive data are sent to over SFTP connections."
  name: "Only send sensitive data using SFTP connections."
  display_id: "CR-009"
  id: insecure_ftp_with_data_category
  query: |
    policy_failure = data.bearer.insecure_ftp_with_data_category.policy_failure
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/insecure_ftp_with_data_category.rego
      name: bearer.insecure_ftp_with_data_category
insecure_http_get:
  description: "Applications processing sensitive data should only connect using HTTPS connections. This policy checks that all HTTP connections use HTTPS."
  name: "Only communicate using HTTPS connections."
  display_id: "CR-013"
  id: insecure_http_get
  query: |
    policy_failure = data.bearer.insecure_http_get.policy_failure
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/insecure_http_get.rego
      name: bearer.insecure_http_get
insecure_http_with_data_category:
  description: "Sensitive data should only be sent through HTTPS. This policy checks that any transmissions over HTTP that contain sensitive data do so over HTTPS."
  name: "Only send sensitive data through HTTPS connections."
  display_id: "CR-014"
  id: insecure_http_with_data_category
  query: |
    policy_failure = data.bearer.insecure_http_with_data_category.policy_failure
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/insecure_http_with_data_category.rego
      name: bearer.insecure_http_with_data_category
sending_data_in_category_to_third_party:
  description: "Sensitive data should not be sent to third party logging libraries or services. This policy checks if sensitive data types are sent to third party loggers. Currently supports: Sentry. "
  name: "Do not leak sensitive data to third-party loggers."
  display_id: "CR-016"
  id: "detect_ruby_third_party_data_send"
  query: |
    policy_failure = data.bearer.third_party_data_category.policy_failure
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/third_party_data_category.rego
      name: bearer.third_party_data_category
weak_password_encryption:
  description: "Using a weak encryption or hashing library to encrypt passwords can lead to security breaches and data leaks. This policy checks if weak encryption or hashing libraries are used to encrypt passwords."
  name: "Force strong password encryption."
  display_id: "CR-023"
  id: "detect_ruby_weak_encryption"
  query: |
    policy_failure = data.bearer.weak_password_encryption.policy_failure
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/encryption_common.rego
      name: bearer.encryption_common
    - path: policies/weak_password_encryption.rego
      name: bearer.weak_password_encryption
password_length:
  description: "Minimum password length should be enforced any time password creation occurs. This policy checks if configurations and validations made for passwords include a minimum length of 8."
  name: "Enforce stronger password requirements."
  display_id: "CR-019"
  id: "ruby_password_length"
  query: |
    policy_breach = data.bearer.password_length.policy_breach
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/password_length.rego
      name: bearer.password_length
weak_encryption_library:
  description: "A weak encryption or hashing library can lead to data breaches and greater security risk. This policy checks for the use of weak encryption and hashing libraries or algorithms."
  name: "Avoid weak encryption library."
  display_id: "CR-024"
  id: "detect_ruby_weak_encryption_library"
  query: |
    policy_failure = data.bearer.weak_encryption_library.policy_failure
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/encryption_common.rego
      name: bearer.encryption_common
    - path: policies/weak_encryption_library.rego
      name: bearer.weak_encryption_library
