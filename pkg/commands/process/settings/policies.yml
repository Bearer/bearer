logger_leaks:
  description: "Logger leaks detected. Avoid passing sensitive data to loggers."
  name: "Logger leaking"
  id: "detect_ruby_logger"
  query: |
    policy_breach = data.bearer.leakage.policy_breach
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/leakage.rego
      name: bearer.leakage
session_leaks:
  description: "Session leaks detected. Avoid storing sensitive data in the session."
  name: "Session leaking"
  id: "detect_rails_session"
  query: |
    policy_breach = data.bearer.leakage.policy_breach
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/leakage.rego
      name: bearer.leakage
jwt_leaks:
  description: "JWT leaks detected. Avoid storing sensitive data in JWTs."
  name: "JWT leaking"
  id: "detect_rails_jwt"
  query: |
    policy_breach = data.bearer.leakage.policy_breach
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/leakage.rego
      name: bearer.leakage
cookie_leaks:
  description: "Cookie leaks detected. Avoid storing sensitive data in cookies."
  name: "Cookie leaking"
  id: "detect_rails_cookies"
  query: |
    policy_breach = data.bearer.leakage.policy_breach
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/leakage.rego
      name: bearer.leakage
ssl_certificate_verification_disabled:
  description: "SSL certificate verification is disabled in an application processing sensitive data. Enable SSL certificate verification."
  name: "SSL certificate verification disabled"
  id: "ssl_certificate_verification_disabled"
  query: |
    policy_breach = data.bearer.ssl_certificate_verification_disabled.policy_breach
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/ssl_certificate_verification_disabled.rego
      name: bearer.ssl_certificate_verification_disabled
application_level_encryption_missing:
  description: "Application level encryption missing. Enable application level encryption to reduce the risk of leaking sensitive data."
  name: "Application level encryption missing"
  id: "application_level_encryption_missing"
  query: |
    policy_breach = data.bearer.application_level_encryption.policy_breach
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/application_level_encryption.rego
      name: bearer.application_level_encryption
insecure_smtp_processing_sensitive_data:
  description: "Communication using insecure SMTP in an application processing sensitive data. Verify that SMTP settings use OpenSSL or equivalent."
  name: "Insecure SMTP"
  id: "detect_rails_insecure_smtp"
  query: |
    policy_breach = data.bearer.insecure_smtp.policy_breach
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/insecure_smtp.rego
      name: bearer.insecure_smtp
http_get_parameters:
  description: "Sending data as HTTP GET parameters. Avoid sending sensitive data as parameters in GET requests."
  name: "HTTP GET parameters"
  id: "ruby_http_get_detection"
  query: |
    policy_breach = data.bearer.http_get_parameters.policy_breach
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/http_get_parameters.rego
      name: bearer.http_get_parameters
insecure_communication_processing_sensitive_data:
  description: "Insecure communication in an application processing sensitive data. Ensure communication occurs over SSL."
  name: "Insecure communication"
  id: "detect_rails_insecure_communication"
  query: |
    policy_breach = data.bearer.insecure_communication.policy_breach
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/insecure_communication.rego
      name: bearer.insecure_communication
insecure_ftp_processing_sensitive_data:
  description: "Communication with an insecure FTP server in an application processing sensitive data. Only connect to FTP securely."
  name: "Insecure FTP"
  id: "detect_rails_insecure_ftp"
  query: |
    policy_breach = data.bearer.insecure_ftp.policy_breach
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/insecure_ftp.rego
      name: bearer.insecure_ftp
insecure_ftp_with_data_category:
  description: "Communicating Data Category with an insecure FTP server. Only connect to FTP securely."
  name: "Insecure FTP with Data Category"
  id: insecure_ftp_with_data_category
  query: |
    policy_breach = data.bearer.insecure_ftp_with_data_category.policy_breach
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/insecure_ftp_with_data_category.rego
      name: bearer.insecure_ftp_with_data_category
insecure_http_get:
  description: "Communicating using insecure HTTP GET in an application processing sensitive data. Ensure all HTTP communication occurs over HTTPS."
  name: "Insecure HTTP GET"
  id: insecure_http_get
  query: |
    policy_breach = data.bearer.insecure_http_get.policy_breach
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/insecure_http_get.rego
      name: bearer.insecure_http_get
insecure_http_with_data_category:
  description: "Communicating Data Category using insecure HTTP. Ensure all HTTP communication occurs over HTTPS."
  name: "Insecure HTTP with Data Category"
  id: insecure_http_with_data_category
  query: |
    policy_breach = data.bearer.insecure_http_with_data_category.policy_breach
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/insecure_http_with_data_category.rego
      name: bearer.insecure_http_with_data_category
sending_data_in_category_to_third_party:
  description: "Sending data in category to third party. Ensure data sent to third party is intended and secured."
  name: "Third-party data category exposure"
  id: "detect_ruby_third_party_data_send"
  query: |
    policy_breach = data.bearer.third_party_data_category.policy_breach
  modules:
    - path: policies/common.rego
      name: bearer.common
    - path: policies/third_party_data_category.rego
      name: bearer.third_party_data_category
