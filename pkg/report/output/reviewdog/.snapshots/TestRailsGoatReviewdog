{
	"source": {
		"name": "Bearer",
		"url": "https://docs.bearer.com/"
	},
	"diagnostics": [
		{
			"message": "\n# Hardcoded secret detected\n## Description\n\nCode is not a safe place to store secrets, use environment variables instead.\n\n## Remediations\n```javascript\n  passport.use(new OAuth2Strategy({\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\n      tokenURL: 'https://www.example.com/oauth2/token',\n      clientID:  process.env.CLIENT_ID,\n      clientSecret: process.env.CLIENT_SECRET,\n      callbackURL: \"http://localhost:3000/auth/example/callback\"\n    },\n    function(accessToken, refreshToken, profile, cb) {\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\n        return cb(err, user);\n      });\n    }\n  ));\n```\n\n## Resources\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n",
			"location": {
				"path": "app/assets/javascripts/jsapi.js",
				"range": {
					"start": {
						"line": 8,
						"column": 1
					},
					"end": {
						"line": 8,
						"column": 37
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "javascript_lang_hardcoded_secret",
				"url": "https://docs.bearer.com/reference/rules/javascript_lang_hardcoded_secret"
			}
		},
		{
			"message": "\n# Sensitive data stored in a cookie detected.\n## Description\n\nStoring sensitive data in cookies can lead to a data breach. This rule looks for instances where sensitive data is stored in browser cookies.\n\n## Remediations\n\n❌ Avoid storing sensitive data in unencrypted cookies messages:\n\n```ruby\ncookies[:user_email] = \"john@doe.com\"\n```\n\n✅ To ensure cookie data stays safe, use encrypted cookies:\n\n```ruby\ncookies.encrypted[:user_email] = \"john@doe.com\"\n```\n\n## Resources\n\n- Cookie object documentation: [ActionDispatch::Cookies](https://edgeapi.rubyonrails.org/classes/ActionDispatch/Cookies.html)\n- [Demystifying cookie security in rails 6](https://dev.to/ayushn21/demystifying-cookie-security-in-rails-6-1j2f#:~:text=Rails%20provides%20a%20special%20kind,data%20in%20the%20session%20cookie)\n",
			"location": {
				"path": "app/controllers/sessions_controller.rb",
				"range": {
					"start": {
						"line": 22,
						"column": 9
					},
					"end": {
						"line": 22,
						"column": 57
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_lang_cookies",
				"url": "https://docs.bearer.com/reference/rules/ruby_lang_cookies"
			}
		},
		{
			"message": "\n# Sensitive data stored in a cookie detected.\n## Description\n\nStoring sensitive data in cookies can lead to a data breach. This rule looks for instances where sensitive data is stored in browser cookies.\n\n## Remediations\n\n❌ Avoid storing sensitive data in unencrypted cookies messages:\n\n```ruby\ncookies[:user_email] = \"john@doe.com\"\n```\n\n✅ To ensure cookie data stays safe, use encrypted cookies:\n\n```ruby\ncookies.encrypted[:user_email] = \"john@doe.com\"\n```\n\n## Resources\n\n- Cookie object documentation: [ActionDispatch::Cookies](https://edgeapi.rubyonrails.org/classes/ActionDispatch/Cookies.html)\n- [Demystifying cookie security in rails 6](https://dev.to/ayushn21/demystifying-cookie-security-in-rails-6-1j2f#:~:text=Rails%20provides%20a%20special%20kind,data%20in%20the%20session%20cookie)\n",
			"location": {
				"path": "app/controllers/sessions_controller.rb",
				"range": {
					"start": {
						"line": 22,
						"column": 9
					},
					"end": {
						"line": 22,
						"column": 57
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_lang_cookies",
				"url": "https://docs.bearer.com/reference/rules/ruby_lang_cookies"
			}
		},
		{
			"message": "\n# User input detected in an unsafe deserialization method.\n## Description\nIt is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.\nAttackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.\n\n## Remediations\n❌ Do not deserialize untrusted data\n\n✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML\n\nAvoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.\n\n```javascript\n  user_data = JSON.parse(params[:user])\n  # handle any parsing errors\n\n  JSON.load(user)\n```\n\n## Resources\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\n",
			"location": {
				"path": "app/controllers/password_resets_controller.rb",
				"range": {
					"start": {
						"line": 6,
						"column": 12
					},
					"end": {
						"line": 6,
						"column": 56
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_lang_deserialization_of_user_input",
				"url": "https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input"
			}
		},
		{
			"message": "\n# Hard-coded secret detected.\n## Description\n\nApplications should store secret values securely and not as literal values\nin the source code.\n\n## Remediations\n\n✅ Retrieve secrets from a secure location at runtime\n\n## Resources\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [OWASP secrets management cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html#21-high-availability)\n",
			"location": {
				"path": "db/seeds.rb",
				"range": {
					"start": {
						"line": 10,
						"column": 5
					},
					"end": {
						"line": 10,
						"column": 26
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_lang_hardcoded_secret",
				"url": "https://docs.bearer.com/reference/rules/ruby_lang_hardcoded_secret"
			}
		},
		{
			"message": "\n# Hard-coded secret detected.\n## Description\n\nApplications should store secret values securely and not as literal values\nin the source code.\n\n## Remediations\n\n✅ Retrieve secrets from a secure location at runtime\n\n## Resources\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [OWASP secrets management cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html#21-high-availability)\n",
			"location": {
				"path": "db/seeds.rb",
				"range": {
					"start": {
						"line": 19,
						"column": 5
					},
					"end": {
						"line": 19,
						"column": 27
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_lang_hardcoded_secret",
				"url": "https://docs.bearer.com/reference/rules/ruby_lang_hardcoded_secret"
			}
		},
		{
			"message": "\n# Hard-coded secret detected.\n## Description\n\nApplications should store secret values securely and not as literal values\nin the source code.\n\n## Remediations\n\n✅ Retrieve secrets from a secure location at runtime\n\n## Resources\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [OWASP secrets management cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html#21-high-availability)\n",
			"location": {
				"path": "db/seeds.rb",
				"range": {
					"start": {
						"line": 28,
						"column": 5
					},
					"end": {
						"line": 28,
						"column": 28
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_lang_hardcoded_secret",
				"url": "https://docs.bearer.com/reference/rules/ruby_lang_hardcoded_secret"
			}
		},
		{
			"message": "\n# Hard-coded secret detected.\n## Description\n\nApplications should store secret values securely and not as literal values\nin the source code.\n\n## Remediations\n\n✅ Retrieve secrets from a secure location at runtime\n\n## Resources\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [OWASP secrets management cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html#21-high-availability)\n",
			"location": {
				"path": "db/seeds.rb",
				"range": {
					"start": {
						"line": 37,
						"column": 5
					},
					"end": {
						"line": 37,
						"column": 27
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_lang_hardcoded_secret",
				"url": "https://docs.bearer.com/reference/rules/ruby_lang_hardcoded_secret"
			}
		},
		{
			"message": "\n# Hard-coded secret detected.\n## Description\n\nApplications should store secret values securely and not as literal values\nin the source code.\n\n## Remediations\n\n✅ Retrieve secrets from a secure location at runtime\n\n## Resources\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [OWASP secrets management cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html#21-high-availability)\n",
			"location": {
				"path": "db/seeds.rb",
				"range": {
					"start": {
						"line": 46,
						"column": 5
					},
					"end": {
						"line": 46,
						"column": 30
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_lang_hardcoded_secret",
				"url": "https://docs.bearer.com/reference/rules/ruby_lang_hardcoded_secret"
			}
		},
		{
			"message": "\n# Hard-coded secret detected.\n## Description\n\nApplications should store secret values securely and not as literal values\nin the source code.\n\n## Remediations\n\n✅ Retrieve secrets from a secure location at runtime\n\n## Resources\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [OWASP secrets management cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html#21-high-availability)\n",
			"location": {
				"path": "db/seeds.rb",
				"range": {
					"start": {
						"line": 55,
						"column": 5
					},
					"end": {
						"line": 55,
						"column": 28
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_lang_hardcoded_secret",
				"url": "https://docs.bearer.com/reference/rules/ruby_lang_hardcoded_secret"
			}
		},
		{
			"message": "\n# Hard-coded secret detected.\n## Description\n\nApplications should store secret values securely and not as literal values\nin the source code.\n\n## Remediations\n\n✅ Retrieve secrets from a secure location at runtime\n\n## Resources\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [OWASP secrets management cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html#21-high-availability)\n",
			"location": {
				"path": "db/seeds.rb",
				"range": {
					"start": {
						"line": 64,
						"column": 5
					},
					"end": {
						"line": 64,
						"column": 27
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_lang_hardcoded_secret",
				"url": "https://docs.bearer.com/reference/rules/ruby_lang_hardcoded_secret"
			}
		},
		{
			"message": "\n# Do not use user input to form file paths.\n## Description\nUsing raw unsanitized input when forming filenames or file paths is bad practice.\nIt can lead to path manipulation, by which attackers can gain access to resources outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Validate expected file paths using `File` methods\n\n```ruby\n  path = File.expand(\"/home/\" + params[:resource_name])\n  if path.starts_with?(\"/home/\")\n    Dir.chdir(path)\n  else\n    # path is unexpected\n  end\n```\n\n## Resources\n- [OWASP path traversal attack](https://owasp.org/www-community/attacks/Path_Traversal)\n",
			"location": {
				"path": "app/controllers/benefit_forms_controller.rb",
				"range": {
					"start": {
						"line": 12,
						"column": 6
					},
					"end": {
						"line": 12,
						"column": 47
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_lang_path_using_user_input",
				"url": "https://docs.bearer.com/reference/rules/ruby_lang_path_using_user_input"
			}
		},
		{
			"message": "\n# Unsanitized user input detected in raw HTML string.\n## Description\n\nApplications should not include unsanitized user input in HTML. This\ncan allow cross-site scripting (XSS) attacks.\n\n## Remediations\n\n❌ Avoid including user input directly in HTML strings:\n\n```ruby\nhtml = \"\u003ch1\u003e#{params[:title]}\u003c/h1\u003e\"\n```\n\n✅ Use a templating language such as ERB, and place the template in a separate file.\n\n✅ When HTML strings must be used, sanitize user input:\n\n```ruby\nhtml = \"\u003ch1\u003e#{strip_tags(params[:title])}\u003c/h1\u003e\"\n```\n\n## Resources\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n",
			"location": {
				"path": "app/controllers/password_resets_controller.rb",
				"range": {
					"start": {
						"line": 36,
						"column": 23
					},
					"end": {
						"line": 36,
						"column": 103
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_lang_raw_html_using_user_input",
				"url": "https://docs.bearer.com/reference/rules/ruby_lang_raw_html_using_user_input"
			}
		},
		{
			"message": "\n# Use of reflection influenced by user input detected.\n## Description\n\nApplications should not look up or manipulate code using user-supplied data.\n\n## Remediations\n\n❌ Avoid using user input when using reflection:\n\n```ruby\nmethod(params[:method])\n```\n\n✅ Use user input indirectly when using reflection:\n\n```ruby\nmethod_name =\n  case params[:action]\n  when \"option1\"\n    \"method1\"\n  when \"option2\"\n    \"method2\"\n  end\n\nmethod(method_name)\n```\n\n## Resources\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\n",
			"location": {
				"path": "app/controllers/api/v1/mobile_controller.rb",
				"range": {
					"start": {
						"line": 10,
						"column": 15
					},
					"end": {
						"line": 10,
						"column": 50
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_lang_reflection_using_user_input",
				"url": "https://docs.bearer.com/reference/rules/ruby_lang_reflection_using_user_input"
			}
		},
		{
			"message": "\n# Use of reflection influenced by user input detected.\n## Description\n\nApplications should not look up or manipulate code using user-supplied data.\n\n## Remediations\n\n❌ Avoid using user input when using reflection:\n\n```ruby\nmethod(params[:method])\n```\n\n✅ Use user input indirectly when using reflection:\n\n```ruby\nmethod_name =\n  case params[:action]\n  when \"option1\"\n    \"method1\"\n  when \"option2\"\n    \"method2\"\n  end\n\nmethod(method_name)\n```\n\n## Resources\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\n",
			"location": {
				"path": "app/controllers/api/v1/mobile_controller.rb",
				"range": {
					"start": {
						"line": 17,
						"column": 15
					},
					"end": {
						"line": 17,
						"column": 50
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_lang_reflection_using_user_input",
				"url": "https://docs.bearer.com/reference/rules/ruby_lang_reflection_using_user_input"
			}
		},
		{
			"message": "\n# Use of reflection influenced by user input detected.\n## Description\n\nApplications should not look up or manipulate code using user-supplied data.\n\n## Remediations\n\n❌ Avoid using user input when using reflection:\n\n```ruby\nmethod(params[:method])\n```\n\n✅ Use user input indirectly when using reflection:\n\n```ruby\nmethod_name =\n  case params[:action]\n  when \"option1\"\n    \"method1\"\n  when \"option2\"\n    \"method2\"\n  end\n\nmethod(method_name)\n```\n\n## Resources\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\n",
			"location": {
				"path": "app/controllers/benefit_forms_controller.rb",
				"range": {
					"start": {
						"line": 11,
						"column": 13
					},
					"end": {
						"line": 11,
						"column": 38
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_lang_reflection_using_user_input",
				"url": "https://docs.bearer.com/reference/rules/ruby_lang_reflection_using_user_input"
			}
		},
		{
			"message": "\n# Use of reflection influenced by user input detected.\n## Description\n\nApplications should not look up or manipulate code using user-supplied data.\n\n## Remediations\n\n❌ Avoid using user input when using reflection:\n\n```ruby\nmethod(params[:method])\n```\n\n✅ Use user input indirectly when using reflection:\n\n```ruby\nmethod_name =\n  case params[:action]\n  when \"option1\"\n    \"method1\"\n  when \"option2\"\n    \"method2\"\n  end\n\nmethod(method_name)\n```\n\n## Resources\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\n",
			"location": {
				"path": "app/controllers/dashboard_controller.rb",
				"range": {
					"start": {
						"line": 16,
						"column": 5
					},
					"end": {
						"line": 16,
						"column": 29
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_lang_reflection_using_user_input",
				"url": "https://docs.bearer.com/reference/rules/ruby_lang_reflection_using_user_input"
			}
		},
		{
			"message": "\n# Weak encryption library usage detected.\n## Description\n\nA weak encryption or hashing library can lead to data breaches and greater security risk. This rule checks for the use of weak encryption and hashing libraries or algorithms.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption): MD5, RC4, DES, Blowfish, SHA1. 1024-bit RSA or DSA, 160-bit ECDSA (elliptic curves), 80/112-bit 2TDEA (two key triple DES) are considered as weak hash/encryption algorithms and therefor shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```ruby\nDigest::SHA1.hexdigest 'weak password encryption'\nCrypt::Blowfish.new(\"weak password encryption\")\nRC4.new(\"weak password encryption\")\nOpenSSL::PKey::RSA.new 1024\nOpenSSL::PKey::DSA.new 1024\nDigest::MD5.hexdigest 'unsecure string'\n```\n\n✅ Instead, we recommend using bcrypt:\n\n```ruby\nBCrypt::Password.create('iLOVEdogs123')\n```\n\n## Resources\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)\n",
			"location": {
				"path": "app/controllers/password_resets_controller.rb",
				"range": {
					"start": {
						"line": 57,
						"column": 15
					},
					"end": {
						"line": 57,
						"column": 49
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_lang_weak_encryption",
				"url": "https://docs.bearer.com/reference/rules/ruby_lang_weak_encryption"
			}
		},
		{
			"message": "\n# Open redirect detected\n## Description\nA web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.\n",
			"location": {
				"path": "app/controllers/application_controller.rb",
				"range": {
					"start": {
						"line": 27,
						"column": 6
					},
					"end": {
						"line": 27,
						"column": 22
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_rails_open_redirect",
				"url": "https://docs.bearer.com/reference/rules/ruby_rails_open_redirect"
			}
		},
		{
			"message": "\n# Open redirect detected\n## Description\nA web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.\n",
			"location": {
				"path": "app/controllers/sessions_controller.rb",
				"range": {
					"start": {
						"line": 26,
						"column": 7
					},
					"end": {
						"line": 26,
						"column": 23
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_rails_open_redirect",
				"url": "https://docs.bearer.com/reference/rules/ruby_rails_open_redirect"
			}
		},
		{
			"message": "\n# Overly permissive request parameters detected.\n## Description\n\nBeing overly permissive with request parameters can allow an attacker to\nupdate arbitrary model attributes.\n\n## Remediations\n\n❌ Avoid blanket permitting of parameters:\n\n```ruby\nparams.permit!\n```\n\n✅ Only permit parameters the user should be able to update:\n\n```ruby\nparams.permit(:name, :email)\n```\n",
			"location": {
				"path": "app/controllers/users_controller.rb",
				"range": {
					"start": {
						"line": 50,
						"column": 5
					},
					"end": {
						"line": 50,
						"column": 34
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_rails_permissive_parameters",
				"url": "https://docs.bearer.com/reference/rules/ruby_rails_permissive_parameters"
			}
		},
		{
			"message": "\n# Sensitive data stored in a session cookie detected.\n## Description\n\nSensitive data should not be stored in session cookies. This policy looks for any sensitive data stored within the session cookies.\n\n## Remediations\nBy default, [Rails uses a Cookie based session store](https://guides.rubyonrails.org/security.html#session-storage). This makes it unsafe if you use it to store sensitive data in addition of making invalidating cookies difficult as they are stored on the client.\n\n✅ To ensure session's data stays safe, ensure to use a database-based session storage, which is easily done though Rails configuration:\n\n```ruby\nRails.application.config.session_store :active_record_store\n```\n\n## Resources\n- [Rails guide on configuring Rails applications](https://guides.rubyonrails.org/configuring.html)\n",
			"location": {
				"path": "app/controllers/sessions_controller.rb",
				"range": {
					"start": {
						"line": 24,
						"column": 9
					},
					"end": {
						"line": 24,
						"column": 36
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_rails_session",
				"url": "https://docs.bearer.com/reference/rules/ruby_rails_session"
			}
		},
		{
			"message": "\n# Unsanitized user input in SQL query detected.\n## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```ruby\nUser.where(\"user.email = #{params[:email]}\")\n```\n\n✅ Use the ActiveRecord API wherever possible:\n\n```ruby\nUser.where(email: params[:email])\n```\n\n✅ Use bind variables:\n\n```ruby\nUser.where(\"user.email = ?\", [params[:email]])\n```\n\n✅ Santize the value manually:\n\n```ruby\nUser.where(sanitize_sql([\"user.email = ?\", params[:email]]))\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n- [Securing Rails applications - SQL injection](https://guides.rubyonrails.org/security.html#sql-injection)\n",
			"location": {
				"path": "app/controllers/users_controller.rb",
				"range": {
					"start": {
						"line": 29,
						"column": 12
					},
					"end": {
						"line": 29,
						"column": 54
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_rails_sql_injection",
				"url": "https://docs.bearer.com/reference/rules/ruby_rails_sql_injection"
			}
		},
		{
			"message": "\n# Manual HTML sanitization detected.\n## Description\nSanitizing HTML manually is error prone and can lead to Cross Site\nScripting (XSS) vulnerabilities.\n\n## Remediations\n\n❌ Avoid manually escaping HTML:\n\n```javascript\nconst sanitizedUserInput = user.Input\n  .replaceAll('\u003c', '\u0026lt;')\n  .replaceAll('\u003e', '\u0026gt;');\nconst html = `\u003cstrong\u003e${sanitizedUserInput}\u003c/strong\u003e`;\n```\n\n✅ Use a HTML sanitization library:\n\n```javascript\nimport sanitizeHtml from 'sanitize-html';\n\nconst html = sanitizeHtml(`\u003cstrong\u003e${user.Input}\u003c/strong\u003e`);\n```\n\n## Resources\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)\n",
			"location": {
				"path": "app/assets/javascripts/application.js",
				"range": {
					"start": {
						"line": 69,
						"column": 7
					},
					"end": {
						"line": 74,
						"column": 34
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "javascript_lang_manual_html_sanitization",
				"url": "https://docs.bearer.com/reference/rules/javascript_lang_manual_html_sanitization"
			}
		},
		{
			"message": "\n# Weak encryption library usage detected.\n## Description\n\nA weak encryption or hashing library can lead to data breaches and greater security risk. This rule checks for the use of weak encryption and hashing libraries or algorithms.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption): MD5, RC4, DES, Blowfish, SHA1. 1024-bit RSA or DSA, 160-bit ECDSA (elliptic curves), 80/112-bit 2TDEA (two key triple DES) are considered as weak hash/encryption algorithms and therefor shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```ruby\nDigest::SHA1.hexdigest 'weak password encryption'\nCrypt::Blowfish.new(\"weak password encryption\")\nRC4.new(\"weak password encryption\")\nOpenSSL::PKey::RSA.new 1024\nOpenSSL::PKey::DSA.new 1024\nDigest::MD5.hexdigest 'unsecure string'\n```\n\n✅ Instead, we recommend using bcrypt:\n\n```ruby\nBCrypt::Password.create('iLOVEdogs123')\n```\n\n## Resources\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)\n",
			"location": {
				"path": "app/controllers/password_resets_controller.rb",
				"range": {
					"start": {
						"line": 48,
						"column": 12
					},
					"end": {
						"line": 48,
						"column": 40
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_lang_weak_encryption",
				"url": "https://docs.bearer.com/reference/rules/ruby_lang_weak_encryption"
			}
		},
		{
			"message": "\n# Weak encryption library usage detected.\n## Description\n\nA weak encryption or hashing library can lead to data breaches and greater security risk. This rule checks for the use of weak encryption and hashing libraries or algorithms.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption): MD5, RC4, DES, Blowfish, SHA1. 1024-bit RSA or DSA, 160-bit ECDSA (elliptic curves), 80/112-bit 2TDEA (two key triple DES) are considered as weak hash/encryption algorithms and therefor shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```ruby\nDigest::SHA1.hexdigest 'weak password encryption'\nCrypt::Blowfish.new(\"weak password encryption\")\nRC4.new(\"weak password encryption\")\nOpenSSL::PKey::RSA.new 1024\nOpenSSL::PKey::DSA.new 1024\nDigest::MD5.hexdigest 'unsecure string'\n```\n\n✅ Instead, we recommend using bcrypt:\n\n```ruby\nBCrypt::Password.create('iLOVEdogs123')\n```\n\n## Resources\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)\n",
			"location": {
				"path": "app/models/user.rb",
				"range": {
					"start": {
						"line": 45,
						"column": 25
					},
					"end": {
						"line": 45,
						"column": 56
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_lang_weak_encryption",
				"url": "https://docs.bearer.com/reference/rules/ruby_lang_weak_encryption"
			}
		},
		{
			"message": "\n# Weak encryption library usage detected.\n## Description\n\nA weak encryption or hashing library can lead to data breaches and greater security risk. This rule checks for the use of weak encryption and hashing libraries or algorithms.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption): MD5, RC4, DES, Blowfish, SHA1. 1024-bit RSA or DSA, 160-bit ECDSA (elliptic curves), 80/112-bit 2TDEA (two key triple DES) are considered as weak hash/encryption algorithms and therefor shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```ruby\nDigest::SHA1.hexdigest 'weak password encryption'\nCrypt::Blowfish.new(\"weak password encryption\")\nRC4.new(\"weak password encryption\")\nOpenSSL::PKey::RSA.new 1024\nOpenSSL::PKey::DSA.new 1024\nDigest::MD5.hexdigest 'unsecure string'\n```\n\n✅ Instead, we recommend using bcrypt:\n\n```ruby\nBCrypt::Password.create('iLOVEdogs123')\n```\n\n## Resources\n- [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)\n",
			"location": {
				"path": "app/models/user.rb",
				"range": {
					"start": {
						"line": 55,
						"column": 23
					},
					"end": {
						"line": 55,
						"column": 59
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_lang_weak_encryption",
				"url": "https://docs.bearer.com/reference/rules/ruby_lang_weak_encryption"
			}
		},
		{
			"message": "\n# Detailed error reporting detected.\n## Description\n\nReturning detailed error messages to users could reveal sensitive\ninformation. This could lead to\n\n## Remediations\n\n❌ Don't configure your application to return details for every error:\n\n```ruby\nconfig.consider_all_requests_local = false\n```\n\n❌ Don't use `show_detailed_exceptions?` in controllers:\n\n```ruby\nclass MyController \u003c ApplicationController\n  def show_detailed_exceptions?\n    ...\n  end\nend\n```\n",
			"location": {
				"path": "config/environments/mysql.rb",
				"range": {
					"start": {
						"line": 11,
						"column": 3
					},
					"end": {
						"line": 11,
						"column": 50
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_rails_detailed_exceptions",
				"url": "https://docs.bearer.com/reference/rules/ruby_rails_detailed_exceptions"
			}
		},
		{
			"message": "\n# Detailed error reporting detected.\n## Description\n\nReturning detailed error messages to users could reveal sensitive\ninformation. This could lead to\n\n## Remediations\n\n❌ Don't configure your application to return details for every error:\n\n```ruby\nconfig.consider_all_requests_local = false\n```\n\n❌ Don't use `show_detailed_exceptions?` in controllers:\n\n```ruby\nclass MyController \u003c ApplicationController\n  def show_detailed_exceptions?\n    ...\n  end\nend\n```\n",
			"location": {
				"path": "config/environments/openshift.rb",
				"range": {
					"start": {
						"line": 11,
						"column": 3
					},
					"end": {
						"line": 11,
						"column": 50
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_rails_detailed_exceptions",
				"url": "https://docs.bearer.com/reference/rules/ruby_rails_detailed_exceptions"
			}
		},
		{
			"message": "\n# Validation using permissive regular expression detected.\n## Description\n\nValidations using regular expressions should use the start of text (\\A) and\nend of text (\\z or \\Z) boundaries.\n\n## Remediations\n\n❌ Avoid matching without start and end boundaries:\n\n```ruby\nvalidates :attribute, format: { with: /foo/}\n```\n\n❌ Avoid using line-based boundaries:\n\n```ruby\nvalidates :attribute, format: { with: /^foo$/}\n```\n\n✅ Use whole-text boundaries:\n\n```ruby\nvalidates :attribute1, format: { with: \"\\Afoo\\Z\"}\nvalidates :attribute2, format: { with: \"\\Afoo\\z\"}\n```\n\u003c!--\n## Resources\n- [Active Record format validation](https://guides.rubyonrails.org/active_record_validations.html#format)\n--\u003e\n",
			"location": {
				"path": "app/models/user.rb",
				"range": {
					"start": {
						"line": 13,
						"column": 3
					},
					"end": {
						"line": 13,
						"column": 49
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_rails_permissive_regex_validation",
				"url": "https://docs.bearer.com/reference/rules/ruby_rails_permissive_regex_validation"
			}
		},
		{
			"message": "\n# Session store with HttpOnly set to false detected.\n## Description\nTo mitigate against Cross-Site Scripting attacks, we should avoid accessing session cookies using JavaScript.\nBy default, Rails avoids this by setting the HttpOnly flag to true on session cookies. Setting this flag to false puts our application at risk of Cross-Site Scripting attacks.\n\n## Remediations\n❌ Do not disable httponly flag if configuring Rails session_store\n\n```\nRails.application.config.session_store :cookie_store, key: \"some_key\", httponly: false\n```\n\n## Resources\n- [OWASP HttpOnly](https://owasp.org/www-community/HttpOnly)\n",
			"location": {
				"path": "config/initializers/session_store.rb",
				"range": {
					"start": {
						"line": 4,
						"column": 1
					},
					"end": {
						"line": 4,
						"column": 102
					}
				}
			},
			"severity": "ERROR",
			"suggestions": [],
			"code": {
				"value": "ruby_rails_session_with_httponly_disabled",
				"url": "https://docs.bearer.com/reference/rules/ruby_rails_session_with_httponly_disabled"
			}
		},
		{
			"message": "\n# Missing application-level encryption of sensitive data detected.\n## Description\nApplication-level encryption greatly reduces the risk of a data breach or data leak by making data unreadable. This rule checks if sensitive data types found in records are encrypted.\n\n## Remediations\nWhenever storing sensitive data to a datastore, make sure to encrypt the entire record, or the field itself.\n\n## Resources\n- [Ruby on Rails Active Record encryption](https://guides.rubyonrails.org/active_record_encryption.html)\n",
			"location": {
				"path": "db/schema.rb",
				"range": {
					"start": {
						"line": 36,
						"column": 3
					},
					"end": {
						"line": 43,
						"column": 6
					}
				}
			},
			"severity": "WARNING",
			"suggestions": [],
			"code": {
				"value": "ruby_rails_default_encryption",
				"url": "https://docs.bearer.com/reference/rules/ruby_rails_default_encryption"
			}
		},
		{
			"message": "\n# Missing application-level encryption of sensitive data detected.\n## Description\nApplication-level encryption greatly reduces the risk of a data breach or data leak by making data unreadable. This rule checks if sensitive data types found in records are encrypted.\n\n## Remediations\nWhenever storing sensitive data to a datastore, make sure to encrypt the entire record, or the field itself.\n\n## Resources\n- [Ruby on Rails Active Record encryption](https://guides.rubyonrails.org/active_record_encryption.html)\n",
			"location": {
				"path": "db/schema.rb",
				"range": {
					"start": {
						"line": 55,
						"column": 3
					},
					"end": {
						"line": 62,
						"column": 6
					}
				}
			},
			"severity": "WARNING",
			"suggestions": [],
			"code": {
				"value": "ruby_rails_default_encryption",
				"url": "https://docs.bearer.com/reference/rules/ruby_rails_default_encryption"
			}
		},
		{
			"message": "\n# Missing application-level encryption of sensitive data detected.\n## Description\nApplication-level encryption greatly reduces the risk of a data breach or data leak by making data unreadable. This rule checks if sensitive data types found in records are encrypted.\n\n## Remediations\nWhenever storing sensitive data to a datastore, make sure to encrypt the entire record, or the field itself.\n\n## Resources\n- [Ruby on Rails Active Record encryption](https://guides.rubyonrails.org/active_record_encryption.html)\n",
			"location": {
				"path": "db/schema.rb",
				"range": {
					"start": {
						"line": 94,
						"column": 3
					},
					"end": {
						"line": 103,
						"column": 6
					}
				}
			},
			"severity": "WARNING",
			"suggestions": [],
			"code": {
				"value": "ruby_rails_default_encryption",
				"url": "https://docs.bearer.com/reference/rules/ruby_rails_default_encryption"
			}
		},
		{
			"message": "\n# Missing application-level encryption of sensitive data detected.\n## Description\nApplication-level encryption greatly reduces the risk of a data breach or data leak by making data unreadable. This rule checks if sensitive data types found in records are encrypted.\n\n## Remediations\nWhenever storing sensitive data to a datastore, make sure to encrypt the entire record, or the field itself.\n\n## Resources\n- [Ruby on Rails Active Record encryption](https://guides.rubyonrails.org/active_record_encryption.html)\n",
			"location": {
				"path": "db/schema.rb",
				"range": {
					"start": {
						"line": 94,
						"column": 3
					},
					"end": {
						"line": 103,
						"column": 6
					}
				}
			},
			"severity": "WARNING",
			"suggestions": [],
			"code": {
				"value": "ruby_rails_default_encryption",
				"url": "https://docs.bearer.com/reference/rules/ruby_rails_default_encryption"
			}
		},
		{
			"message": "\n# Missing application-level encryption of sensitive data detected.\n## Description\nApplication-level encryption greatly reduces the risk of a data breach or data leak by making data unreadable. This rule checks if sensitive data types found in records are encrypted.\n\n## Remediations\nWhenever storing sensitive data to a datastore, make sure to encrypt the entire record, or the field itself.\n\n## Resources\n- [Ruby on Rails Active Record encryption](https://guides.rubyonrails.org/active_record_encryption.html)\n",
			"location": {
				"path": "db/schema.rb",
				"range": {
					"start": {
						"line": 94,
						"column": 3
					},
					"end": {
						"line": 103,
						"column": 6
					}
				}
			},
			"severity": "WARNING",
			"suggestions": [],
			"code": {
				"value": "ruby_rails_default_encryption",
				"url": "https://docs.bearer.com/reference/rules/ruby_rails_default_encryption"
			}
		},
		{
			"message": "\n# Missing application-level encryption of sensitive data detected.\n## Description\nApplication-level encryption greatly reduces the risk of a data breach or data leak by making data unreadable. This rule checks if sensitive data types found in records are encrypted.\n\n## Remediations\nWhenever storing sensitive data to a datastore, make sure to encrypt the entire record, or the field itself.\n\n## Resources\n- [Ruby on Rails Active Record encryption](https://guides.rubyonrails.org/active_record_encryption.html)\n",
			"location": {
				"path": "db/schema.rb",
				"range": {
					"start": {
						"line": 105,
						"column": 3
					},
					"end": {
						"line": 115,
						"column": 6
					}
				}
			},
			"severity": "WARNING",
			"suggestions": [],
			"code": {
				"value": "ruby_rails_default_encryption",
				"url": "https://docs.bearer.com/reference/rules/ruby_rails_default_encryption"
			}
		},
		{
			"message": "\n# Missing application-level encryption of sensitive data detected.\n## Description\nApplication-level encryption greatly reduces the risk of a data breach or data leak by making data unreadable. This rule checks if sensitive data types found in records are encrypted.\n\n## Remediations\nWhenever storing sensitive data to a datastore, make sure to encrypt the entire record, or the field itself.\n\n## Resources\n- [Ruby on Rails Active Record encryption](https://guides.rubyonrails.org/active_record_encryption.html)\n",
			"location": {
				"path": "db/schema.rb",
				"range": {
					"start": {
						"line": 105,
						"column": 3
					},
					"end": {
						"line": 115,
						"column": 6
					}
				}
			},
			"severity": "WARNING",
			"suggestions": [],
			"code": {
				"value": "ruby_rails_default_encryption",
				"url": "https://docs.bearer.com/reference/rules/ruby_rails_default_encryption"
			}
		},
		{
			"message": "\n# Possibly dangerous permitted parameter key detected.\n## Description\nSafe-listing high-risk param keys makes Rails applications open to mass assignment vulnerability.\n\nIn Rails, mass assignment is when we use a hash to assign attributes all at once rather than individually. For example:\n\n```\nuser_attributes = { name: \"Mish\", email: \"mish@bearer.com\" }\nUser.new(user_attributes)\n```\n\nWhen used with an untrusted hash (for example, the `params` hash in a controller), mass assignment is open to attack because any attribute on the record that corresponds to a key in the hash will be automatically assigned the value in the hash. An attacker could exploit this vulnerability to change their role and permissions or to assign themselves as an admin.\n\nBy default, Rails' strong parameters protect against mass assignment vulnerability; however, we must take care when safe-listing high-risk param keys.\n\n## Remediations\n❌ Where possible, avoid safe-listed high-risk param keys such as :admin or :role\n\n```ruby\nuser_params = params(:user).permit!(:name, :email, :admin)\n```\n\n## Resources\n- [OWASP Mass Assignment Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html)\n- [Ruby on Rails security guide on mass assignment](https://guides.rubyonrails.org/v3.2.9/security.html#mass-assignment)\n",
			"location": {
				"path": "app/controllers/users_controller.rb",
				"range": {
					"start": {
						"line": 55,
						"column": 5
					},
					"end": {
						"line": 55,
						"column": 74
					}
				}
			},
			"severity": "WARNING",
			"suggestions": [],
			"code": {
				"value": "ruby_rails_unsafe_mass_assignment",
				"url": "https://docs.bearer.com/reference/rules/ruby_rails_unsafe_mass_assignment"
			}
		}
	]
}
