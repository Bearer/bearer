{
  "high": [
    {
      "cwe_ids": ["22"],
      "id": "javascript_express_path_traversal",
      "title": "Possible path traversal vulnerability detected.",
      "description": "## Description\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\n- Use `replace()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n- Actively guard against paths that end in \"%00\" (poison NULL byte attacks)\n- Use path concatenation to ensure the intended scope is respected\n\n```javascript\nconst path = require(\"path\");\n\napp.get(\"/\", (req, res) =\u003e {\n  if (req.params.path.indexOf('\\0')) !== -1 {\n    // prevent access\n  }\n\n  var folder = req.params.path.replace(/^(\\.\\.(\\/|\\\\|$))+/, '')\n\n  var pathname = path.join(\"/public/\", folder)\n  if pathname.indexOf(\"/public/\") !== 0 {\n    // prevent access\n  }\n\n  path.resolve(pathname)\n})\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_path_traversal",
      "line_number": 69,
      "full_filename": "../../OWASP/juice-shop/routes/dataErasure.ts",
      "filename": "routes/dataErasure.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": { "start": 32, "end": 61 }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": { "start": 32, "end": 61 },
        "content": "path.resolve(req.body.layout)"
      },
      "parent_line_number": 69,
      "snippet": "path.resolve(req.body.layout)",
      "fingerprint": "730d1c5106516470d1853a35c4aca01b_0",
      "old_fingerprint": "c8834e53c5f03d10b653f1bfc909a713_0"
    },
    {
      "cwe_ids": ["22"],
      "id": "javascript_express_path_traversal",
      "title": "Possible path traversal vulnerability detected.",
      "description": "## Description\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\n- Use `replace()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n- Actively guard against paths that end in \"%00\" (poison NULL byte attacks)\n- Use path concatenation to ensure the intended scope is respected\n\n```javascript\nconst path = require(\"path\");\n\napp.get(\"/\", (req, res) =\u003e {\n  if (req.params.path.indexOf('\\0')) !== -1 {\n    // prevent access\n  }\n\n  var folder = req.params.path.replace(/^(\\.\\.(\\/|\\\\|$))+/, '')\n\n  var pathname = path.join(\"/public/\", folder)\n  if pathname.indexOf(\"/public/\") !== 0 {\n    // prevent access\n  }\n\n  path.resolve(pathname)\n})\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_path_traversal",
      "line_number": 14,
      "full_filename": "../../OWASP/juice-shop/routes/keyServer.ts",
      "filename": "routes/keyServer.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 14,
        "end": 14,
        "column": { "start": 20, "end": 57 }
      },
      "sink": {
        "start": 14,
        "end": 14,
        "column": { "start": 20, "end": 57 },
        "content": "path.resolve('encryptionkeys/', file)"
      },
      "parent_line_number": 14,
      "snippet": "path.resolve('encryptionkeys/', file)",
      "fingerprint": "f0fdc8f875e9b77313305edb186aec62_1",
      "old_fingerprint": "158e9eac17db64dc14e275a27689cd73_1"
    },
    {
      "cwe_ids": ["22"],
      "id": "javascript_express_path_traversal",
      "title": "Possible path traversal vulnerability detected.",
      "description": "## Description\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\n- Use `replace()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n- Actively guard against paths that end in \"%00\" (poison NULL byte attacks)\n- Use path concatenation to ensure the intended scope is respected\n\n```javascript\nconst path = require(\"path\");\n\napp.get(\"/\", (req, res) =\u003e {\n  if (req.params.path.indexOf('\\0')) !== -1 {\n    // prevent access\n  }\n\n  var folder = req.params.path.replace(/^(\\.\\.(\\/|\\\\|$))+/, '')\n\n  var pathname = path.join(\"/public/\", folder)\n  if pathname.indexOf(\"/public/\") !== 0 {\n    // prevent access\n  }\n\n  path.resolve(pathname)\n})\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_path_traversal",
      "line_number": 14,
      "full_filename": "../../OWASP/juice-shop/routes/logfileServer.ts",
      "filename": "routes/logfileServer.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 14,
        "end": 14,
        "column": { "start": 20, "end": 47 }
      },
      "sink": {
        "start": 14,
        "end": 14,
        "column": { "start": 20, "end": 47 },
        "content": "path.resolve('logs/', file)"
      },
      "parent_line_number": 14,
      "snippet": "path.resolve('logs/', file)",
      "fingerprint": "51001ae13fdae4f062cec51a842161b2_2",
      "old_fingerprint": "8b2d83d1a4441c847b0d7315ec033c06_2"
    },
    {
      "cwe_ids": ["22"],
      "id": "javascript_express_path_traversal",
      "title": "Possible path traversal vulnerability detected.",
      "description": "## Description\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\n- Use `replace()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n- Actively guard against paths that end in \"%00\" (poison NULL byte attacks)\n- Use path concatenation to ensure the intended scope is respected\n\n```javascript\nconst path = require(\"path\");\n\napp.get(\"/\", (req, res) =\u003e {\n  if (req.params.path.indexOf('\\0')) !== -1 {\n    // prevent access\n  }\n\n  var folder = req.params.path.replace(/^(\\.\\.(\\/|\\\\|$))+/, '')\n\n  var pathname = path.join(\"/public/\", folder)\n  if pathname.indexOf(\"/public/\") !== 0 {\n    // prevent access\n  }\n\n  path.resolve(pathname)\n})\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_path_traversal",
      "line_number": 14,
      "full_filename": "../../OWASP/juice-shop/routes/quarantineServer.ts",
      "filename": "routes/quarantineServer.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 14,
        "end": 14,
        "column": { "start": 20, "end": 57 }
      },
      "sink": {
        "start": 14,
        "end": 14,
        "column": { "start": 20, "end": 57 },
        "content": "path.resolve('ftp/quarantine/', file)"
      },
      "parent_line_number": 14,
      "snippet": "path.resolve('ftp/quarantine/', file)",
      "fingerprint": "a59cb4c55fa6ab0b98f1f061b0262ee1_3",
      "old_fingerprint": "c3084a9c188d0ceec1db09d1294bd305_3"
    },
    {
      "cwe_ids": ["798"],
      "id": "javascript_lang_hardcoded_secret",
      "title": "Hardcoded secret detected",
      "description": "## Description\n\nCode is not a safe place to store secrets, use environment variables instead.\n\n## Remediations\n```javascript\n  passport.use(new OAuth2Strategy({\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\n      tokenURL: 'https://www.example.com/oauth2/token',\n      clientID:  process.env.CLIENT_ID,\n      clientSecret: process.env.CLIENT_SECRET,\n      callbackURL: \"http://localhost:3000/auth/example/callback\"\n    },\n    function(accessToken, refreshToken, profile, cb) {\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\n        return cb(err, user);\n      });\n    }\n  ));\n```\n\n## Resources\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_hardcoded_secret",
      "line_number": 43,
      "full_filename": "../../OWASP/juice-shop/lib/insecurity.ts",
      "filename": "lib/insecurity.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 43,
        "end": 43,
        "column": { "start": 34, "end": 89 }
      },
      "sink": {
        "start": 43,
        "end": 43,
        "column": { "start": 34, "end": 89 },
        "content": "crypto.createHmac('sha256', 'pa4qacea4VK9t9nGv7yZtwmj')"
      },
      "parent_line_number": 43,
      "snippet": "crypto.createHmac('sha256', 'pa4qacea4VK9t9nGv7yZtwmj')",
      "fingerprint": "d699b64784f6ca1135369f86e4b64ecb_0",
      "old_fingerprint": "5360ec921edb3edf577227ba65bf0c91_0"
    },
    {
      "cwe_ids": ["798"],
      "id": "javascript_lang_hardcoded_secret",
      "title": "Hardcoded secret detected",
      "description": "## Description\n\nCode is not a safe place to store secrets, use environment variables instead.\n\n## Remediations\n```javascript\n  passport.use(new OAuth2Strategy({\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\n      tokenURL: 'https://www.example.com/oauth2/token',\n      clientID:  process.env.CLIENT_ID,\n      clientSecret: process.env.CLIENT_SECRET,\n      callbackURL: \"http://localhost:3000/auth/example/callback\"\n    },\n    function(accessToken, refreshToken, profile, cb) {\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\n        return cb(err, user);\n      });\n    }\n  ));\n```\n\n## Resources\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_hardcoded_secret",
      "line_number": 166,
      "full_filename": "../../OWASP/juice-shop/lib/insecurity.ts",
      "filename": "lib/insecurity.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 166,
        "end": 166,
        "column": { "start": 16, "end": 55 }
      },
      "sink": {
        "start": 166,
        "end": 166,
        "column": { "start": 16, "end": 55 },
        "content": "crypto.createHmac('sha256', privateKey)"
      },
      "parent_line_number": 166,
      "snippet": "crypto.createHmac('sha256', privateKey)",
      "fingerprint": "d699b64784f6ca1135369f86e4b64ecb_1",
      "old_fingerprint": "5360ec921edb3edf577227ba65bf0c91_1"
    },
    {
      "cwe_ids": ["918"],
      "id": "javascript_lang_http_url_using_user_input",
      "title": "HTTP communication with user-controlled destination detected.",
      "description": "## Description\n\nApplications should not connect to locations formed from user input.\nThis rule checks for URLs containing user-supplied data.\n\n## Remediations\n\n❌ Avoid using user input in HTTP URLs:\n\n```javascript\nconst response = axios.get(`https://${req.params.host}`)\n```\n\n✅ Use user input indirectly to form a URL:\n\n```javascript\nconst hosts = new Map([\n  [\"option1\", \"api1.com\"],\n  [\"option2\", \"api2.com\"]\n])\n\nconst host = hosts.get(req.params.host)\nconst response = axois.get(`https://${host}`)\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_http_url_using_user_input",
      "line_number": 22,
      "full_filename": "../../OWASP/juice-shop/routes/profileImageUrlUpload.ts",
      "filename": "routes/profileImageUrlUpload.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 22,
        "end": 23,
        "column": { "start": 30, "end": 20 }
      },
      "sink": {
        "start": 22,
        "end": 23,
        "column": { "start": 30, "end": 20 },
        "content": "request\n          .get(url)"
      },
      "parent_line_number": 22,
      "snippet": "request\n          .get(url)",
      "fingerprint": "8ed612ce6d89f70e214b65244f8793b4_0",
      "old_fingerprint": "0dbd334b5374976b65f4265d6cef3285_0"
    },
    {
      "cwe_ids": ["798"],
      "id": "javascript_lang_jwt_hardcoded_secret",
      "title": "Hardcoded JWT secret detected",
      "description": "## Description\n\nCode is not a secure place to store secrets, use environment variables instead.\n\n## Remediations\n\nUse environment variables\n\n```javascript\n  var jwt = require(\"jsonwebtoken\");\n\n  var token = jwt.sign({ foo: \"bar\" }, process.env.JWT_SECRET);\n```\n\n## Resources\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_jwt_hardcoded_secret",
      "line_number": 55,
      "full_filename": "../../OWASP/juice-shop/lib/insecurity.ts",
      "filename": "lib/insecurity.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": { "start": 36, "end": 112 }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": { "start": 36, "end": 112 },
        "content": "jwt.sign(user, privateKey, { expiresInMinutes: 60 * 5, algorithm: 'RS256' })"
      },
      "parent_line_number": 55,
      "snippet": "jwt.sign(user, privateKey, { expiresInMinutes: 60 * 5, algorithm: 'RS256' })",
      "fingerprint": "50ebccec98d14333da6adb3b94c79730_0",
      "old_fingerprint": "5699016e68262977ce1ba4f2c3ff4a85_0"
    },
    {
      "cwe_ids": ["312"],
      "id": "javascript_lang_session",
      "title": "Sensitive data stored in HTML local storage detected.",
      "description": "## Description\n\nSensitive data should not be stored in a `localStorage` session. This policy looks for any sensitive data stored within the localstorage.\n\n## Remediations\n\nIt's best to avoid storing sensitive data in `localStorage` whenever possible. To keep session data safe, use a server-based session storage solution instead.\n\n❌ If you do need do store data in `localStorage`, avoid including sensitive data:\n\n```javascript\nlocalStorage.setItem('user', email)\n```\n\n✅ Instead, use a unique identifier:\n\n```javascript\nlocalStorage.setItem('user', user.uuid)\n```\n\n## Resources\n  - [OWASP sensitive data exposure](https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_session",
      "line_number": 102,
      "full_filename": "../../OWASP/juice-shop/frontend/src/app/login/login.component.ts",
      "filename": "frontend/src/app/login/login.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": { "start": 37, "end": 52 }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": { "start": 7, "end": 53 },
        "content": "localStorage.setItem('email', this.user.email)"
      },
      "parent_line_number": 102,
      "snippet": "localStorage.setItem('email', this.user.email)",
      "fingerprint": "f9657c5f0e228532df66e6987928ea19_0",
      "old_fingerprint": "1d5a13f70c21f4bf10f01719b2e46b8f_0"
    },
    {
      "cwe_ids": ["89"],
      "id": "javascript_lang_sql_injection",
      "title": "SQL injection vulnerability detected.",
      "description": "## Description\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input\n\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId);\n```\n\nInstead, consider the following approaches when writing SQL queries\n\n✅ Validate query input wherever possible\n\n```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n```\n\n✅ Use prepared (or parameterized) statements when querying\n\nSequelize example -\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_sql_injection",
      "line_number": 5,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/dbSchemaChallenge_1.ts",
      "filename": "data/static/codefixes/dbSchemaChallenge_1.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 5, "end": 5, "column": { "start": 5, "end": 163 } },
      "sink": {
        "start": 5,
        "end": 5,
        "column": { "start": 5, "end": 163 },
        "content": "models.sequelize.query(\"SELECT * FROM Products WHERE ((name LIKE '%\"+criteria+\"%' OR description LIKE '%\"+criteria+\"%') AND deletedAt IS NULL) ORDER BY name\")"
      },
      "parent_line_number": 5,
      "snippet": "models.sequelize.query(\"SELECT * FROM Products WHERE ((name LIKE '%\"+criteria+\"%' OR description LIKE '%\"+criteria+\"%') AND deletedAt IS NULL) ORDER BY name\")",
      "fingerprint": "2422999ee983c379479a0d13296d2b45_0",
      "old_fingerprint": "c48a2e2bc12dd88b1b486d1439c6028c_0"
    },
    {
      "cwe_ids": ["89"],
      "id": "javascript_lang_sql_injection",
      "title": "SQL injection vulnerability detected.",
      "description": "## Description\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input\n\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId);\n```\n\nInstead, consider the following approaches when writing SQL queries\n\n✅ Validate query input wherever possible\n\n```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n```\n\n✅ Use prepared (or parameterized) statements when querying\n\nSequelize example -\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_sql_injection",
      "line_number": 11,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/dbSchemaChallenge_3.ts",
      "filename": "data/static/codefixes/dbSchemaChallenge_3.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 11,
        "end": 11,
        "column": { "start": 5, "end": 161 }
      },
      "sink": {
        "start": 11,
        "end": 11,
        "column": { "start": 5, "end": 161 },
        "content": "models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)"
      },
      "parent_line_number": 11,
      "snippet": "models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)",
      "fingerprint": "8014e30891e8e3cb3c4a378fcf1afa38_1",
      "old_fingerprint": "82b6ea4905b026ba4307336425f064c1_1"
    },
    {
      "cwe_ids": ["89"],
      "id": "javascript_lang_sql_injection",
      "title": "SQL injection vulnerability detected.",
      "description": "## Description\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input\n\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId);\n```\n\nInstead, consider the following approaches when writing SQL queries\n\n✅ Validate query input wherever possible\n\n```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n```\n\n✅ Use prepared (or parameterized) statements when querying\n\nSequelize example -\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_sql_injection",
      "line_number": 20,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/loginAdminChallenge_1.ts",
      "filename": "data/static/codefixes/loginAdminChallenge_1.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 20,
        "end": 20,
        "column": { "start": 5, "end": 208 }
      },
      "sink": {
        "start": 20,
        "end": 20,
        "column": { "start": 5, "end": 208 },
        "content": "models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: true })"
      },
      "parent_line_number": 20,
      "snippet": "models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: true })",
      "fingerprint": "e3d18d5f0ca1f301fa884039dc723bf6_2",
      "old_fingerprint": "8c741cf4f9f16b3cbeccd9f1372aa544_2"
    },
    {
      "cwe_ids": ["89"],
      "id": "javascript_lang_sql_injection",
      "title": "SQL injection vulnerability detected.",
      "description": "## Description\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input\n\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId);\n```\n\nInstead, consider the following approaches when writing SQL queries\n\n✅ Validate query input wherever possible\n\n```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n```\n\n✅ Use prepared (or parameterized) statements when querying\n\nSequelize example -\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_sql_injection",
      "line_number": 20,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/loginBenderChallenge_1.ts",
      "filename": "data/static/codefixes/loginBenderChallenge_1.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 20,
        "end": 20,
        "column": { "start": 5, "end": 208 }
      },
      "sink": {
        "start": 20,
        "end": 20,
        "column": { "start": 5, "end": 208 },
        "content": "models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: true })"
      },
      "parent_line_number": 20,
      "snippet": "models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: true })",
      "fingerprint": "4b0883d52334dfd9a4acce2fcf810121_3",
      "old_fingerprint": "3d95d4dcc8a3c53575f66111fdf4dfe1_3"
    },
    {
      "cwe_ids": ["89"],
      "id": "javascript_lang_sql_injection",
      "title": "SQL injection vulnerability detected.",
      "description": "## Description\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input\n\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId);\n```\n\nInstead, consider the following approaches when writing SQL queries\n\n✅ Validate query input wherever possible\n\n```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n```\n\n✅ Use prepared (or parameterized) statements when querying\n\nSequelize example -\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_sql_injection",
      "line_number": 17,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/loginBenderChallenge_4.ts",
      "filename": "data/static/codefixes/loginBenderChallenge_4.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 17,
        "end": 17,
        "column": { "start": 5, "end": 209 }
      },
      "sink": {
        "start": 17,
        "end": 17,
        "column": { "start": 5, "end": 209 },
        "content": "models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: false })"
      },
      "parent_line_number": 17,
      "snippet": "models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: false })",
      "fingerprint": "4a25d479d29e305cf7b9b7181f917eb8_4",
      "old_fingerprint": "3b68eb63dc2c93b2667fe9cc5f0ebea8_4"
    },
    {
      "cwe_ids": ["89"],
      "id": "javascript_lang_sql_injection",
      "title": "SQL injection vulnerability detected.",
      "description": "## Description\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input\n\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId);\n```\n\nInstead, consider the following approaches when writing SQL queries\n\n✅ Validate query input wherever possible\n\n```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n```\n\n✅ Use prepared (or parameterized) statements when querying\n\nSequelize example -\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_sql_injection",
      "line_number": 17,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/loginJimChallenge_2.ts",
      "filename": "data/static/codefixes/loginJimChallenge_2.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 17,
        "end": 17,
        "column": { "start": 5, "end": 209 }
      },
      "sink": {
        "start": 17,
        "end": 17,
        "column": { "start": 5, "end": 209 },
        "content": "models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: false })"
      },
      "parent_line_number": 17,
      "snippet": "models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: false })",
      "fingerprint": "df98e54f62e0cc9172446bbd0361c29c_5",
      "old_fingerprint": "afbb8b79d0fdf0060f5ab8441d06ea0f_5"
    },
    {
      "cwe_ids": ["89"],
      "id": "javascript_lang_sql_injection",
      "title": "SQL injection vulnerability detected.",
      "description": "## Description\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input\n\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId);\n```\n\nInstead, consider the following approaches when writing SQL queries\n\n✅ Validate query input wherever possible\n\n```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n```\n\n✅ Use prepared (or parameterized) statements when querying\n\nSequelize example -\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_sql_injection",
      "line_number": 20,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/loginJimChallenge_4.ts",
      "filename": "data/static/codefixes/loginJimChallenge_4.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 20,
        "end": 20,
        "column": { "start": 5, "end": 208 }
      },
      "sink": {
        "start": 20,
        "end": 20,
        "column": { "start": 5, "end": 208 },
        "content": "models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: true })"
      },
      "parent_line_number": 20,
      "snippet": "models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: true })",
      "fingerprint": "1b0805db0c0342c03908f442d4972b13_6",
      "old_fingerprint": "61a9658d13a04601b4bdded3d3b8a9b9_6"
    },
    {
      "cwe_ids": ["89"],
      "id": "javascript_lang_sql_injection",
      "title": "SQL injection vulnerability detected.",
      "description": "## Description\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input\n\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId);\n```\n\nInstead, consider the following approaches when writing SQL queries\n\n✅ Validate query input wherever possible\n\n```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n```\n\n✅ Use prepared (or parameterized) statements when querying\n\nSequelize example -\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_sql_injection",
      "line_number": 6,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/unionSqlInjectionChallenge_1.ts",
      "filename": "data/static/codefixes/unionSqlInjectionChallenge_1.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 6, "end": 6, "column": { "start": 5, "end": 161 } },
      "sink": {
        "start": 6,
        "end": 6,
        "column": { "start": 5, "end": 161 },
        "content": "models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)"
      },
      "parent_line_number": 6,
      "snippet": "models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)",
      "fingerprint": "7e9979f44c0dbd99c76619f48c4245fa_7",
      "old_fingerprint": "e3c3911bd7fc2ed0c6d8b445d960c6ba_7"
    },
    {
      "cwe_ids": ["89"],
      "id": "javascript_lang_sql_injection",
      "title": "SQL injection vulnerability detected.",
      "description": "## Description\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input\n\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId);\n```\n\nInstead, consider the following approaches when writing SQL queries\n\n✅ Validate query input wherever possible\n\n```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n```\n\n✅ Use prepared (or parameterized) statements when querying\n\nSequelize example -\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_sql_injection",
      "line_number": 10,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/unionSqlInjectionChallenge_3.ts",
      "filename": "data/static/codefixes/unionSqlInjectionChallenge_3.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 10,
        "end": 10,
        "column": { "start": 5, "end": 161 }
      },
      "sink": {
        "start": 10,
        "end": 10,
        "column": { "start": 5, "end": 161 },
        "content": "models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)"
      },
      "parent_line_number": 10,
      "snippet": "models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)",
      "fingerprint": "d6273bb4e3195d87ba54a7ca10db72be_8",
      "old_fingerprint": "6c1b4806c92bbbc7d0b0ea3a744ace7d_8"
    },
    {
      "cwe_ids": ["89"],
      "id": "javascript_lang_sql_injection",
      "title": "SQL injection vulnerability detected.",
      "description": "## Description\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input\n\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId);\n```\n\nInstead, consider the following approaches when writing SQL queries\n\n✅ Validate query input wherever possible\n\n```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n```\n\n✅ Use prepared (or parameterized) statements when querying\n\nSequelize example -\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_sql_injection",
      "line_number": 36,
      "full_filename": "../../OWASP/juice-shop/routes/login.ts",
      "filename": "routes/login.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 36,
        "end": 36,
        "column": { "start": 5, "end": 206 }
      },
      "sink": {
        "start": 36,
        "end": 36,
        "column": { "start": 5, "end": 206 },
        "content": "models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: UserModel, plain: true })"
      },
      "parent_line_number": 36,
      "snippet": "models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: UserModel, plain: true })",
      "fingerprint": "1c2a6e42ca5adc2c078fee1a7cb1a787_9",
      "old_fingerprint": "2d43bd4bae996ff0921a2d7e8d7cf499_9"
    },
    {
      "cwe_ids": ["89"],
      "id": "javascript_lang_sql_injection",
      "title": "SQL injection vulnerability detected.",
      "description": "## Description\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input\n\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId);\n```\n\nInstead, consider the following approaches when writing SQL queries\n\n✅ Validate query input wherever possible\n\n```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n```\n\n✅ Use prepared (or parameterized) statements when querying\n\nSequelize example -\n```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_sql_injection",
      "line_number": 23,
      "full_filename": "../../OWASP/juice-shop/routes/search.ts",
      "filename": "routes/search.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 23,
        "end": 23,
        "column": { "start": 5, "end": 161 }
      },
      "sink": {
        "start": 23,
        "end": 23,
        "column": { "start": 5, "end": 161 },
        "content": "models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)"
      },
      "parent_line_number": 23,
      "snippet": "models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)",
      "fingerprint": "626e8a24818faf605935d6ca0f0f748f_10",
      "old_fingerprint": "d8e629f4800d35feb096729bf9c4c347_10"
    }
  ],
  "medium": [
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction to directory listing detected.",
      "description": "## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 2,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/accessLogDisclosureChallenge_1_correct.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_1_correct.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 2, "end": 2, "column": { "start": 3, "end": 76 } },
      "sink": {
        "start": 2,
        "end": 2,
        "column": { "start": 3, "end": 76 },
        "content": "app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))"
      },
      "parent_line_number": 2,
      "snippet": "app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))",
      "fingerprint": "f561fa26365b6c05e91ddc3b18fbed28_0",
      "old_fingerprint": "e4cfbe874ab73766cf152580663fb345_0"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction to directory listing detected.",
      "description": "## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 7,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/accessLogDisclosureChallenge_1_correct.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_1_correct.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 7, "end": 7, "column": { "start": 3, "end": 115 } },
      "sink": {
        "start": 7,
        "end": 7,
        "column": { "start": 3, "end": 115 },
        "content": "app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"
      },
      "parent_line_number": 7,
      "snippet": "app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))",
      "fingerprint": "f561fa26365b6c05e91ddc3b18fbed28_1",
      "old_fingerprint": "e4cfbe874ab73766cf152580663fb345_1"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction to directory listing detected.",
      "description": "## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 2,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/accessLogDisclosureChallenge_2.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_2.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 2, "end": 2, "column": { "start": 3, "end": 76 } },
      "sink": {
        "start": 2,
        "end": 2,
        "column": { "start": 3, "end": 76 },
        "content": "app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))"
      },
      "parent_line_number": 2,
      "snippet": "app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))",
      "fingerprint": "7431053925541a9e4feb79b7adbba3a3_2",
      "old_fingerprint": "4540941b15c51e90ae3fa7d166695a41_2"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction to directory listing detected.",
      "description": "## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 7,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/accessLogDisclosureChallenge_2.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_2.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 7, "end": 7, "column": { "start": 3, "end": 115 } },
      "sink": {
        "start": 7,
        "end": 7,
        "column": { "start": 3, "end": 115 },
        "content": "app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"
      },
      "parent_line_number": 7,
      "snippet": "app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))",
      "fingerprint": "7431053925541a9e4feb79b7adbba3a3_3",
      "old_fingerprint": "4540941b15c51e90ae3fa7d166695a41_3"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction to directory listing detected.",
      "description": "## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 11,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/accessLogDisclosureChallenge_2.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_2.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 11, "end": 11, "column": { "start": 3, "end": 86 } },
      "sink": {
        "start": 11,
        "end": 11,
        "column": { "start": 3, "end": 86 },
        "content": "app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true }))"
      },
      "parent_line_number": 11,
      "snippet": "app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true }))",
      "fingerprint": "7431053925541a9e4feb79b7adbba3a3_4",
      "old_fingerprint": "4540941b15c51e90ae3fa7d166695a41_4"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction to directory listing detected.",
      "description": "## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 2,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/accessLogDisclosureChallenge_3.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_3.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 2, "end": 2, "column": { "start": 3, "end": 76 } },
      "sink": {
        "start": 2,
        "end": 2,
        "column": { "start": 3, "end": 76 },
        "content": "app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))"
      },
      "parent_line_number": 2,
      "snippet": "app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))",
      "fingerprint": "1bde540dc2dc7eadc0a5563ef8d50744_5",
      "old_fingerprint": "6bdb66b88a3688f0e9154109eba93cba_5"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction to directory listing detected.",
      "description": "## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 7,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/accessLogDisclosureChallenge_3.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_3.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 7, "end": 7, "column": { "start": 3, "end": 115 } },
      "sink": {
        "start": 7,
        "end": 7,
        "column": { "start": 3, "end": 115 },
        "content": "app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"
      },
      "parent_line_number": 7,
      "snippet": "app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))",
      "fingerprint": "1bde540dc2dc7eadc0a5563ef8d50744_6",
      "old_fingerprint": "6bdb66b88a3688f0e9154109eba93cba_6"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction to directory listing detected.",
      "description": "## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 11,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/accessLogDisclosureChallenge_3.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_3.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 11,
        "end": 11,
        "column": { "start": 3, "end": 103 }
      },
      "sink": {
        "start": 11,
        "end": 11,
        "column": { "start": 3, "end": 103 },
        "content": "app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))"
      },
      "parent_line_number": 11,
      "snippet": "app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))",
      "fingerprint": "1bde540dc2dc7eadc0a5563ef8d50744_7",
      "old_fingerprint": "6bdb66b88a3688f0e9154109eba93cba_7"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction to directory listing detected.",
      "description": "## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 2,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/accessLogDisclosureChallenge_4.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_4.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 2, "end": 2, "column": { "start": 3, "end": 76 } },
      "sink": {
        "start": 2,
        "end": 2,
        "column": { "start": 3, "end": 76 },
        "content": "app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))"
      },
      "parent_line_number": 2,
      "snippet": "app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))",
      "fingerprint": "87838e0cadbae4b996ea2ba0ce225f2e_8",
      "old_fingerprint": "47566a797ef343d6d46a2b9a74b932f1_8"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction to directory listing detected.",
      "description": "## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 7,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/accessLogDisclosureChallenge_4.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_4.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 7, "end": 7, "column": { "start": 3, "end": 115 } },
      "sink": {
        "start": 7,
        "end": 7,
        "column": { "start": 3, "end": 115 },
        "content": "app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"
      },
      "parent_line_number": 7,
      "snippet": "app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))",
      "fingerprint": "87838e0cadbae4b996ea2ba0ce225f2e_9",
      "old_fingerprint": "47566a797ef343d6d46a2b9a74b932f1_9"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction to directory listing detected.",
      "description": "## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 2,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/directoryListingChallenge_1_correct.ts",
      "filename": "data/static/codefixes/directoryListingChallenge_1_correct.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 2, "end": 2, "column": { "start": 3, "end": 115 } },
      "sink": {
        "start": 2,
        "end": 2,
        "column": { "start": 3, "end": 115 },
        "content": "app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"
      },
      "parent_line_number": 2,
      "snippet": "app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))",
      "fingerprint": "d0c7f09f2c9927118811b6920976dbde_10",
      "old_fingerprint": "1f52678cda4e029b5d72ee720b68553d_10"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction to directory listing detected.",
      "description": "## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 6,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/directoryListingChallenge_1_correct.ts",
      "filename": "data/static/codefixes/directoryListingChallenge_1_correct.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 6, "end": 6, "column": { "start": 3, "end": 103 } },
      "sink": {
        "start": 6,
        "end": 6,
        "column": { "start": 3, "end": 103 },
        "content": "app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))"
      },
      "parent_line_number": 6,
      "snippet": "app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))",
      "fingerprint": "d0c7f09f2c9927118811b6920976dbde_11",
      "old_fingerprint": "1f52678cda4e029b5d72ee720b68553d_11"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction to directory listing detected.",
      "description": "## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 6,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/directoryListingChallenge_2.ts",
      "filename": "data/static/codefixes/directoryListingChallenge_2.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 6, "end": 6, "column": { "start": 3, "end": 115 } },
      "sink": {
        "start": 6,
        "end": 6,
        "column": { "start": 3, "end": 115 },
        "content": "app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"
      },
      "parent_line_number": 6,
      "snippet": "app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))",
      "fingerprint": "84a18ba9c67531b0f1271ecfad9a6522_12",
      "old_fingerprint": "960a68589ae8111a69c92d17217464b0_12"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction to directory listing detected.",
      "description": "## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 10,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/directoryListingChallenge_2.ts",
      "filename": "data/static/codefixes/directoryListingChallenge_2.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 10,
        "end": 10,
        "column": { "start": 3, "end": 103 }
      },
      "sink": {
        "start": 10,
        "end": 10,
        "column": { "start": 3, "end": 103 },
        "content": "app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))"
      },
      "parent_line_number": 10,
      "snippet": "app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))",
      "fingerprint": "84a18ba9c67531b0f1271ecfad9a6522_13",
      "old_fingerprint": "960a68589ae8111a69c92d17217464b0_13"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction to directory listing detected.",
      "description": "## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 2,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/directoryListingChallenge_3.ts",
      "filename": "data/static/codefixes/directoryListingChallenge_3.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 2, "end": 2, "column": { "start": 3, "end": 76 } },
      "sink": {
        "start": 2,
        "end": 2,
        "column": { "start": 3, "end": 76 },
        "content": "app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))"
      },
      "parent_line_number": 2,
      "snippet": "app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))",
      "fingerprint": "8ebcfc95a36b5c20927ea9e466b8715c_14",
      "old_fingerprint": "54f308469bb6cf2f971cb6aded691f22_14"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction to directory listing detected.",
      "description": "## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 5,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/directoryListingChallenge_3.ts",
      "filename": "data/static/codefixes/directoryListingChallenge_3.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 5, "end": 5, "column": { "start": 3, "end": 115 } },
      "sink": {
        "start": 5,
        "end": 5,
        "column": { "start": 3, "end": 115 },
        "content": "app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"
      },
      "parent_line_number": 5,
      "snippet": "app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))",
      "fingerprint": "8ebcfc95a36b5c20927ea9e466b8715c_15",
      "old_fingerprint": "54f308469bb6cf2f971cb6aded691f22_15"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction to directory listing detected.",
      "description": "## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 9,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/directoryListingChallenge_3.ts",
      "filename": "data/static/codefixes/directoryListingChallenge_3.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 9, "end": 9, "column": { "start": 3, "end": 103 } },
      "sink": {
        "start": 9,
        "end": 9,
        "column": { "start": 3, "end": 103 },
        "content": "app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))"
      },
      "parent_line_number": 9,
      "snippet": "app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))",
      "fingerprint": "8ebcfc95a36b5c20927ea9e466b8715c_16",
      "old_fingerprint": "54f308469bb6cf2f971cb6aded691f22_16"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction to directory listing detected.",
      "description": "## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 2,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/directoryListingChallenge_4.ts",
      "filename": "data/static/codefixes/directoryListingChallenge_4.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 2, "end": 2, "column": { "start": 3, "end": 77 } },
      "sink": {
        "start": 2,
        "end": 2,
        "column": { "start": 3, "end": 77 },
        "content": "app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: false }))"
      },
      "parent_line_number": 2,
      "snippet": "app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: false }))",
      "fingerprint": "d1d7fd4f95a122aab479067df9323e6c_17",
      "old_fingerprint": "f8cf1dda0d57229f6b5dbd546ff272dd_17"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction to directory listing detected.",
      "description": "## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 7,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/directoryListingChallenge_4.ts",
      "filename": "data/static/codefixes/directoryListingChallenge_4.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 7, "end": 7, "column": { "start": 3, "end": 115 } },
      "sink": {
        "start": 7,
        "end": 7,
        "column": { "start": 3, "end": 115 },
        "content": "app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"
      },
      "parent_line_number": 7,
      "snippet": "app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))",
      "fingerprint": "d1d7fd4f95a122aab479067df9323e6c_18",
      "old_fingerprint": "f8cf1dda0d57229f6b5dbd546ff272dd_18"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction to directory listing detected.",
      "description": "## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 11,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/directoryListingChallenge_4.ts",
      "filename": "data/static/codefixes/directoryListingChallenge_4.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 11,
        "end": 11,
        "column": { "start": 3, "end": 103 }
      },
      "sink": {
        "start": 11,
        "end": 11,
        "column": { "start": 3, "end": 103 },
        "content": "app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))"
      },
      "parent_line_number": 11,
      "snippet": "app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))",
      "fingerprint": "d1d7fd4f95a122aab479067df9323e6c_19",
      "old_fingerprint": "f8cf1dda0d57229f6b5dbd546ff272dd_19"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction to directory listing detected.",
      "description": "## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 241,
      "full_filename": "../../OWASP/juice-shop/server.ts",
      "filename": "server.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 241,
        "end": 241,
        "column": { "start": 3, "end": 76 }
      },
      "sink": {
        "start": 241,
        "end": 241,
        "column": { "start": 3, "end": 76 },
        "content": "app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))"
      },
      "parent_line_number": 241,
      "snippet": "app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))",
      "fingerprint": "c539465e8119e4d020831d9f6cf0a973_20",
      "old_fingerprint": "ae0c0007046764e2cd223ae08579cd0f_20"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction to directory listing detected.",
      "description": "## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 246,
      "full_filename": "../../OWASP/juice-shop/server.ts",
      "filename": "server.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 246,
        "end": 246,
        "column": { "start": 3, "end": 115 }
      },
      "sink": {
        "start": 246,
        "end": 246,
        "column": { "start": 3, "end": 115 },
        "content": "app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"
      },
      "parent_line_number": 246,
      "snippet": "app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))",
      "fingerprint": "c539465e8119e4d020831d9f6cf0a973_21",
      "old_fingerprint": "ae0c0007046764e2cd223ae08579cd0f_21"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction to directory listing detected.",
      "description": "## Description\nInappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.\n\n## Remediations\n✅ Restrict access to sensitive directories and files\n\n## Resources\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 250,
      "full_filename": "../../OWASP/juice-shop/server.ts",
      "filename": "server.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 250,
        "end": 250,
        "column": { "start": 3, "end": 103 }
      },
      "sink": {
        "start": 250,
        "end": 250,
        "column": { "start": 3, "end": 103 },
        "content": "app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))"
      },
      "parent_line_number": 250,
      "snippet": "app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))",
      "fingerprint": "c539465e8119e4d020831d9f6cf0a973_22",
      "old_fingerprint": "ae0c0007046764e2cd223ae08579cd0f_22"
    },
    {
      "cwe_ids": ["73"],
      "id": "javascript_express_external_file_upload",
      "title": "External control of filename or path detected.",
      "description": "## Description\nPassing unsanitized user input to the sendFile API is bad practice and can lead to path manipulation, by which attackers can gain access to resources and data outside of the intended scope.\n\n## Remediations\n✅ Set the root option to be an absolute path to a directory\n\n```javascript\napp.post(\"/upload\", (req, res) =\u003e {\n  var options = {\n    root: path.join(__dirname, \"upload\")\n  }\n  res.sendFile(req.params.filename, options)\n}\n```\n\n## Resources\n- [Express sendFile API reference](http://expressjs.com/en/5x/api.html#res.sendFile)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_external_file_upload",
      "line_number": 14,
      "full_filename": "../../OWASP/juice-shop/routes/keyServer.ts",
      "filename": "routes/keyServer.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 14, "end": 14, "column": { "start": 7, "end": 58 } },
      "sink": {
        "start": 14,
        "end": 14,
        "column": { "start": 7, "end": 58 },
        "content": "res.sendFile(path.resolve('encryptionkeys/', file))"
      },
      "parent_line_number": 14,
      "snippet": "res.sendFile(path.resolve('encryptionkeys/', file))",
      "fingerprint": "8643fdcb8411f54a6af5a25deb2da818_0",
      "old_fingerprint": "145f602440e25a3196b75d8e716af3e8_0"
    },
    {
      "cwe_ids": ["73"],
      "id": "javascript_express_external_file_upload",
      "title": "External control of filename or path detected.",
      "description": "## Description\nPassing unsanitized user input to the sendFile API is bad practice and can lead to path manipulation, by which attackers can gain access to resources and data outside of the intended scope.\n\n## Remediations\n✅ Set the root option to be an absolute path to a directory\n\n```javascript\napp.post(\"/upload\", (req, res) =\u003e {\n  var options = {\n    root: path.join(__dirname, \"upload\")\n  }\n  res.sendFile(req.params.filename, options)\n}\n```\n\n## Resources\n- [Express sendFile API reference](http://expressjs.com/en/5x/api.html#res.sendFile)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_external_file_upload",
      "line_number": 14,
      "full_filename": "../../OWASP/juice-shop/routes/logfileServer.ts",
      "filename": "routes/logfileServer.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 14, "end": 14, "column": { "start": 7, "end": 48 } },
      "sink": {
        "start": 14,
        "end": 14,
        "column": { "start": 7, "end": 48 },
        "content": "res.sendFile(path.resolve('logs/', file))"
      },
      "parent_line_number": 14,
      "snippet": "res.sendFile(path.resolve('logs/', file))",
      "fingerprint": "caf5b22a357fad021743f7b2b8da54b8_1",
      "old_fingerprint": "97de42536447c1d91ba690b866722467_1"
    },
    {
      "cwe_ids": ["73"],
      "id": "javascript_express_external_file_upload",
      "title": "External control of filename or path detected.",
      "description": "## Description\nPassing unsanitized user input to the sendFile API is bad practice and can lead to path manipulation, by which attackers can gain access to resources and data outside of the intended scope.\n\n## Remediations\n✅ Set the root option to be an absolute path to a directory\n\n```javascript\napp.post(\"/upload\", (req, res) =\u003e {\n  var options = {\n    root: path.join(__dirname, \"upload\")\n  }\n  res.sendFile(req.params.filename, options)\n}\n```\n\n## Resources\n- [Express sendFile API reference](http://expressjs.com/en/5x/api.html#res.sendFile)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_external_file_upload",
      "line_number": 14,
      "full_filename": "../../OWASP/juice-shop/routes/quarantineServer.ts",
      "filename": "routes/quarantineServer.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 14, "end": 14, "column": { "start": 7, "end": 58 } },
      "sink": {
        "start": 14,
        "end": 14,
        "column": { "start": 7, "end": 58 },
        "content": "res.sendFile(path.resolve('ftp/quarantine/', file))"
      },
      "parent_line_number": 14,
      "snippet": "res.sendFile(path.resolve('ftp/quarantine/', file))",
      "fingerprint": "684ac0da58fe48421abddc5208554ab4_2",
      "old_fingerprint": "6677b3de05c4e78bafadaa8d1f56dda8_2"
    },
    {
      "cwe_ids": ["525"],
      "id": "javascript_express_jwt_not_revoked",
      "title": "Unrevoked JWT detected.",
      "description": "## Description\nThe best practice caching policy is to revoke JWTs especially when these contain senstitive information.\n\n## Remediations\n✅ Ensure JWTs are short-lived by revoking them\n\n```javascript\nexpressjwt({\n  ...\n  isRevoked: this.customRevokeCall(),\n  ...\n})\n```\n\n## Resources\n- [ExpressJWT documentation on revoking tokens](https://github.com/auth0/express-jwt#revoked-tokens)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_jwt_not_revoked",
      "line_number": 53,
      "full_filename": "../../OWASP/juice-shop/lib/insecurity.ts",
      "filename": "lib/insecurity.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": { "start": 30, "end": 63 }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": { "start": 30, "end": 63 },
        "content": "expressJwt({ secret: publicKey })"
      },
      "parent_line_number": 53,
      "snippet": "expressJwt({ secret: publicKey })",
      "fingerprint": "d5aa377b45e8572a3f1634b5411f5973_0",
      "old_fingerprint": "35ecf6a72e7c7fb3ec56529a7e29fd36_0"
    },
    {
      "cwe_ids": ["525"],
      "id": "javascript_express_jwt_not_revoked",
      "title": "Unrevoked JWT detected.",
      "description": "## Description\nThe best practice caching policy is to revoke JWTs especially when these contain senstitive information.\n\n## Remediations\n✅ Ensure JWTs are short-lived by revoking them\n\n```javascript\nexpressjwt({\n  ...\n  isRevoked: this.customRevokeCall(),\n  ...\n})\n```\n\n## Resources\n- [ExpressJWT documentation on revoking tokens](https://github.com/auth0/express-jwt#revoked-tokens)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_jwt_not_revoked",
      "line_number": 54,
      "full_filename": "../../OWASP/juice-shop/lib/insecurity.ts",
      "filename": "lib/insecurity.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": { "start": 25, "end": 67 }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": { "start": 25, "end": 67 },
        "content": "expressJwt({ secret: '' + Math.random() })"
      },
      "parent_line_number": 54,
      "snippet": "expressJwt({ secret: '' + Math.random() })",
      "fingerprint": "d5aa377b45e8572a3f1634b5411f5973_1",
      "old_fingerprint": "35ecf6a72e7c7fb3ec56529a7e29fd36_1"
    },
    {
      "cwe_ids": ["79"],
      "id": "javascript_lang_manual_html_sanitization",
      "title": "Manual HTML sanitization detected.",
      "description": "## Description\nSanitizing HTML manually is error prone and can lead to Cross Site\nScripting (XSS) vulnerabilities.\n\n## Remediations\n\n❌ Avoid manually escaping HTML:\n\n```javascript\nconst sanitizedUserInput = user.Input\n  .replaceAll('\u003c', '\u0026lt;')\n  .replaceAll('\u003e', '\u0026gt;');\nconst html = `\u003cstrong\u003e${sanitizedUserInput}\u003c/strong\u003e`;\n```\n\n✅ Use a HTML sanitization library:\n\n```javascript\nimport sanitizeHtml from 'sanitize-html';\n\nconst html = sanitizeHtml(`\u003cstrong\u003e${user.Input}\u003c/strong\u003e`);\n```\n\n## Resources\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_manual_html_sanitization",
      "line_number": 22,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/redirectChallenge_3.ts",
      "filename": "data/static/codefixes/redirectChallenge_3.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 22, "end": 31, "column": { "start": 10, "end": 7 } },
      "sink": {
        "start": 22,
        "end": 31,
        "column": { "start": 10, "end": 7 },
        "content": "str.replace(/[\u0026\u003c\u003e'\"]/g,\n    tag =\u003e {\n      return ({\n        '\u0026': '\u0026amp;',\n        '\u003c': '\u0026lt;',\n        '\u003e': '\u0026gt;',\n        \"'\": '\u0026#39;',\n        '\"': '\u0026quot;'\n      }[tag])\n    })"
      },
      "parent_line_number": 22,
      "snippet": "str.replace(/[\u0026\u003c\u003e'\"]/g,\n    tag =\u003e {\n      return ({\n        '\u0026': '\u0026amp;',\n        '\u003c': '\u0026lt;',\n        '\u003e': '\u0026gt;',\n        \"'\": '\u0026#39;',\n        '\"': '\u0026quot;'\n      }[tag])\n    })",
      "fingerprint": "21de2a29f76880dbfbba700acb3cf4b4_0",
      "old_fingerprint": "2233586b742b94cd1d7d513ea5f76a62_0"
    },
    {
      "cwe_ids": ["79"],
      "id": "javascript_lang_manual_html_sanitization",
      "title": "Manual HTML sanitization detected.",
      "description": "## Description\nSanitizing HTML manually is error prone and can lead to Cross Site\nScripting (XSS) vulnerabilities.\n\n## Remediations\n\n❌ Avoid manually escaping HTML:\n\n```javascript\nconst sanitizedUserInput = user.Input\n  .replaceAll('\u003c', '\u0026lt;')\n  .replaceAll('\u003e', '\u0026gt;');\nconst html = `\u003cstrong\u003e${sanitizedUserInput}\u003c/strong\u003e`;\n```\n\n✅ Use a HTML sanitization library:\n\n```javascript\nimport sanitizeHtml from 'sanitize-html';\n\nconst html = sanitizeHtml(`\u003cstrong\u003e${user.Input}\u003c/strong\u003e`);\n```\n\n## Resources\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_manual_html_sanitization",
      "line_number": 59,
      "full_filename": "../../OWASP/juice-shop/data/static/codefixes/restfulXssChallenge_2.ts",
      "filename": "data/static/codefixes/restfulXssChallenge_2.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": { "start": 34, "end": 106 }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": { "start": 34, "end": 82 },
        "content": "tableData[i].description.replaceAll('\u003c', '\u0026lt;')"
      },
      "parent_line_number": 59,
      "snippet": "tableData[i].description.replaceAll('\u003c', '\u0026lt;')",
      "fingerprint": "d098ec6c1ec482df2422801759454ad2_1",
      "old_fingerprint": "0e64d5a83385809b11eed7987eabb53b_1"
    },
    {
      "cwe_ids": ["327"],
      "id": "javascript_lang_weak_encryption",
      "title": "Weak encryption library usage detected.",
      "description": "## Description\n\nSensitive data should be encrypted with strong encryption algorithms like aes-256-cbc\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption): MD5, RC4, DES, Blowfish, SHA1. 1024-bit RSA or DSA, 160-bit ECDSA (elliptic curves), 80/112-bit 2TDEA (two key triple DES) are considered as weak hash/encryption algorithms and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```javascript\nconst crypto = require(\"crypto\");\n\nconst key = \"secret key\";\nconst encrypted = crypto.createHmac(\"es-256-cbc\", key).update(user.password);\n```\n\n## Resources\n- [NodeJS Crypto Module](https://nodejs.org/api/crypto.html#cryptocreatehmacalgorithm-key-options)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_weak_encryption",
      "line_number": 74,
      "full_filename": "../../OWASP/juice-shop/Gruntfile.js",
      "filename": "Gruntfile.js",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 74, "end": 74, "column": { "start": 7, "end": 25 } },
      "sink": {
        "start": 74,
        "end": 74,
        "column": { "start": 7, "end": 25 },
        "content": "md5.update(buffer)"
      },
      "parent_line_number": 74,
      "snippet": "md5.update(buffer)",
      "fingerprint": "ed4a3f1d4ae34d1ec46c133f1f018970_0",
      "old_fingerprint": "c033c95cf2c5d8b0443048bb744f51a1_0"
    },
    {
      "cwe_ids": ["327"],
      "id": "javascript_lang_weak_encryption",
      "title": "Weak encryption library usage detected.",
      "description": "## Description\n\nSensitive data should be encrypted with strong encryption algorithms like aes-256-cbc\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption): MD5, RC4, DES, Blowfish, SHA1. 1024-bit RSA or DSA, 160-bit ECDSA (elliptic curves), 80/112-bit 2TDEA (two key triple DES) are considered as weak hash/encryption algorithms and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```javascript\nconst crypto = require(\"crypto\");\n\nconst key = \"secret key\";\nconst encrypted = crypto.createHmac(\"es-256-cbc\", key).update(user.password);\n```\n\n## Resources\n- [NodeJS Crypto Module](https://nodejs.org/api/crypto.html#cryptocreatehmacalgorithm-key-options)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_weak_encryption",
      "line_number": 42,
      "full_filename": "../../OWASP/juice-shop/lib/insecurity.ts",
      "filename": "lib/insecurity.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 42,
        "end": 42,
        "column": { "start": 34, "end": 71 }
      },
      "sink": {
        "start": 42,
        "end": 42,
        "column": { "start": 34, "end": 71 },
        "content": "crypto.createHash('md5').update(data)"
      },
      "parent_line_number": 42,
      "snippet": "crypto.createHash('md5').update(data)",
      "fingerprint": "ebb92933732305def2e9f74a6c806838_1",
      "old_fingerprint": "2a815ec5bcadb6e1fbf97994929a305e_1"
    }
  ]
}
