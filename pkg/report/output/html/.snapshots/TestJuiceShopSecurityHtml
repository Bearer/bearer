(*string)((len=75175) "\t<div id=\"result-summary\">\n    <span class=\"badge critical critical-bg\">C</span>\n    <span class=\"critical\">0</span>\n    <span class=\"badge high high-bg\">H</span>\n    <span class=\"high\">20</span>\n    <span class=\"badge medium medium-bg\">M</span>\n    <span class=\"medium\">32</span>\n    <span class=\"badge low low-bg\">L</span>\n    <span class=\"low\">0</span>\n\t</div>\n\n\t\t\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"high\">\n              <span>Possible path traversal vulnerability detected.</span>\n              <span class=\"badge high high-bg\">high</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_path_traversal&nbsp;&nbsp;<strong>CWE:</strong> CWE 22\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: routes/dataErasure.ts:69</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Allowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.</p>\n\n<h4>Remediations</h2>\n\n<p>❌ Avoid wherever possible</p>\n\n<p>✅ Sanitize user input when resolving paths, for example:\n- Use <code>replace()</code> to mitigate against unwanted patterns in the path (such as <code>\\..\\..</code>)\n- Actively guard against paths that end in &ldquo;%00&rdquo; (poison NULL byte attacks)\n- Use path concatenation to ensure the intended scope is respected</p>\n\n<pre><code class=\"language-javascript\">const path = require(&quot;path&quot;);\n\napp.get(&quot;/&quot;, (req, res) =&gt; {\n  if (req.params.path.indexOf('\\0')) !== -1 {\n    // prevent access\n  }\n\n  var folder = req.params.path.replace(/^(\\.\\.(\\/|\\\\|$))+/, '')\n\n  var pathname = path.join(&quot;/public/&quot;, folder)\n  if pathname.indexOf(&quot;/public/&quot;) !== 0 {\n    // prevent access\n  }\n\n  path.resolve(pathname)\n})\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://owasp.org/www-community/attacks/Path_Traversal\">OWASP path traversal</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"high\">\n              <span>Possible path traversal vulnerability detected.</span>\n              <span class=\"badge high high-bg\">high</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_path_traversal&nbsp;&nbsp;<strong>CWE:</strong> CWE 22\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: routes/keyServer.ts:14</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Allowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.</p>\n\n<h4>Remediations</h2>\n\n<p>❌ Avoid wherever possible</p>\n\n<p>✅ Sanitize user input when resolving paths, for example:\n- Use <code>replace()</code> to mitigate against unwanted patterns in the path (such as <code>\\..\\..</code>)\n- Actively guard against paths that end in &ldquo;%00&rdquo; (poison NULL byte attacks)\n- Use path concatenation to ensure the intended scope is respected</p>\n\n<pre><code class=\"language-javascript\">const path = require(&quot;path&quot;);\n\napp.get(&quot;/&quot;, (req, res) =&gt; {\n  if (req.params.path.indexOf('\\0')) !== -1 {\n    // prevent access\n  }\n\n  var folder = req.params.path.replace(/^(\\.\\.(\\/|\\\\|$))+/, '')\n\n  var pathname = path.join(&quot;/public/&quot;, folder)\n  if pathname.indexOf(&quot;/public/&quot;) !== 0 {\n    // prevent access\n  }\n\n  path.resolve(pathname)\n})\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://owasp.org/www-community/attacks/Path_Traversal\">OWASP path traversal</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"high\">\n              <span>Possible path traversal vulnerability detected.</span>\n              <span class=\"badge high high-bg\">high</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_path_traversal&nbsp;&nbsp;<strong>CWE:</strong> CWE 22\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: routes/logfileServer.ts:14</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Allowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.</p>\n\n<h4>Remediations</h2>\n\n<p>❌ Avoid wherever possible</p>\n\n<p>✅ Sanitize user input when resolving paths, for example:\n- Use <code>replace()</code> to mitigate against unwanted patterns in the path (such as <code>\\..\\..</code>)\n- Actively guard against paths that end in &ldquo;%00&rdquo; (poison NULL byte attacks)\n- Use path concatenation to ensure the intended scope is respected</p>\n\n<pre><code class=\"language-javascript\">const path = require(&quot;path&quot;);\n\napp.get(&quot;/&quot;, (req, res) =&gt; {\n  if (req.params.path.indexOf('\\0')) !== -1 {\n    // prevent access\n  }\n\n  var folder = req.params.path.replace(/^(\\.\\.(\\/|\\\\|$))+/, '')\n\n  var pathname = path.join(&quot;/public/&quot;, folder)\n  if pathname.indexOf(&quot;/public/&quot;) !== 0 {\n    // prevent access\n  }\n\n  path.resolve(pathname)\n})\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://owasp.org/www-community/attacks/Path_Traversal\">OWASP path traversal</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"high\">\n              <span>Possible path traversal vulnerability detected.</span>\n              <span class=\"badge high high-bg\">high</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_path_traversal&nbsp;&nbsp;<strong>CWE:</strong> CWE 22\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: routes/quarantineServer.ts:14</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Allowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.</p>\n\n<h4>Remediations</h2>\n\n<p>❌ Avoid wherever possible</p>\n\n<p>✅ Sanitize user input when resolving paths, for example:\n- Use <code>replace()</code> to mitigate against unwanted patterns in the path (such as <code>\\..\\..</code>)\n- Actively guard against paths that end in &ldquo;%00&rdquo; (poison NULL byte attacks)\n- Use path concatenation to ensure the intended scope is respected</p>\n\n<pre><code class=\"language-javascript\">const path = require(&quot;path&quot;);\n\napp.get(&quot;/&quot;, (req, res) =&gt; {\n  if (req.params.path.indexOf('\\0')) !== -1 {\n    // prevent access\n  }\n\n  var folder = req.params.path.replace(/^(\\.\\.(\\/|\\\\|$))+/, '')\n\n  var pathname = path.join(&quot;/public/&quot;, folder)\n  if pathname.indexOf(&quot;/public/&quot;) !== 0 {\n    // prevent access\n  }\n\n  path.resolve(pathname)\n})\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://owasp.org/www-community/attacks/Path_Traversal\">OWASP path traversal</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"high\">\n              <span>Hardcoded secret detected</span>\n              <span class=\"badge high high-bg\">high</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_lang_hardcoded_secret&nbsp;&nbsp;<strong>CWE:</strong> CWE 798\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: lib/insecurity.ts:43</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Code is not a safe place to store secrets, use environment variables instead.</p>\n\n<h4>Remediations</h2>\n\n<pre><code class=\"language-javascript\">  passport.use(new OAuth2Strategy({\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\n      tokenURL: 'https://www.example.com/oauth2/token',\n      clientID:  process.env.CLIENT_ID,\n      clientSecret: process.env.CLIENT_SECRET,\n      callbackURL: &quot;http://localhost:3000/auth/example/callback&quot;\n    },\n    function(accessToken, refreshToken, profile, cb) {\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\n        return cb(err, user);\n      });\n    }\n  ));\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password\">OWASP hardcoded passwords</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"high\">\n              <span>Hardcoded secret detected</span>\n              <span class=\"badge high high-bg\">high</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_lang_hardcoded_secret&nbsp;&nbsp;<strong>CWE:</strong> CWE 798\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: lib/insecurity.ts:166</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Code is not a safe place to store secrets, use environment variables instead.</p>\n\n<h4>Remediations</h2>\n\n<pre><code class=\"language-javascript\">  passport.use(new OAuth2Strategy({\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\n      tokenURL: 'https://www.example.com/oauth2/token',\n      clientID:  process.env.CLIENT_ID,\n      clientSecret: process.env.CLIENT_SECRET,\n      callbackURL: &quot;http://localhost:3000/auth/example/callback&quot;\n    },\n    function(accessToken, refreshToken, profile, cb) {\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\n        return cb(err, user);\n      });\n    }\n  ));\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password\">OWASP hardcoded passwords</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"high\">\n              <span>HTTP communication with user-controlled destination detected.</span>\n              <span class=\"badge high high-bg\">high</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_lang_http_url_using_user_input&nbsp;&nbsp;<strong>CWE:</strong> CWE 918\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: routes/profileImageUrlUpload.ts:22</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Applications should not connect to locations formed from user input.\nThis rule checks for URLs containing user-supplied data.</p>\n\n<h4>Remediations</h2>\n\n<p>❌ Avoid using user input in HTTP URLs:</p>\n\n<pre><code class=\"language-javascript\">const response = axios.get(`https://${req.params.host}`)\n</code></pre>\n\n<p>✅ Use user input indirectly to form a URL:</p>\n\n<pre><code class=\"language-javascript\">const hosts = new Map([\n  [&quot;option1&quot;, &quot;api1.com&quot;],\n  [&quot;option2&quot;, &quot;api2.com&quot;]\n])\n\nconst host = hosts.get(req.params.host)\nconst response = axois.get(`https://${host}`)\n</code></pre>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"high\">\n              <span>Hardcoded JWT secret detected</span>\n              <span class=\"badge high high-bg\">high</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_lang_jwt_hardcoded_secret&nbsp;&nbsp;<strong>CWE:</strong> CWE 798\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: lib/insecurity.ts:55</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Code is not a secure place to store secrets, use environment variables instead.</p>\n\n<h4>Remediations</h2>\n\n<p>Use environment variables</p>\n\n<pre><code class=\"language-javascript\">  var jwt = require(&quot;jsonwebtoken&quot;);\n\n  var token = jwt.sign({ foo: &quot;bar&quot; }, process.env.JWT_SECRET);\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password\">OWASP hardcoded passwords</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"high\">\n              <span>Sensitive data stored in HTML local storage detected.</span>\n              <span class=\"badge high high-bg\">high</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_lang_session&nbsp;&nbsp;<strong>CWE:</strong> CWE 312\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: frontend/src/app/login/login.component.ts:102</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Sensitive data should not be stored in a <code>localStorage</code> session. This policy looks for any sensitive data stored within the localstorage.</p>\n\n<h4>Remediations</h2>\n\n<p>It&rsquo;s best to avoid storing sensitive data in <code>localStorage</code> whenever possible. To keep session data safe, use a server-based session storage solution instead.</p>\n\n<p>❌ If you do need do store data in <code>localStorage</code>, avoid including sensitive data:</p>\n\n<pre><code class=\"language-javascript\">localStorage.setItem('user', email)\n</code></pre>\n\n<p>✅ Instead, use a unique identifier:</p>\n\n<pre><code class=\"language-javascript\">localStorage.setItem('user', user.uuid)\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP sensitive data exposure</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"high\">\n              <span>SQL injection vulnerability detected.</span>\n              <span class=\"badge high high-bg\">high</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_lang_sql_injection&nbsp;&nbsp;<strong>CWE:</strong> CWE 89\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/dbSchemaChallenge_1.ts:5</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Including unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.</p>\n\n<h4>Remediations</h2>\n\n<p>❌ Avoid raw queries, especially those that contain unsanitized user input</p>\n\n<pre><code class=\"language-javascript\">  var sqlite = new Sequelize(&quot;sqlite::memory:&quot;);\n  sqlite.query(&quot;SELECT * FROM users WHERE ID = &quot; + req.params.userId);\n</code></pre>\n\n<p>Instead, consider the following approaches when writing SQL queries</p>\n\n<p>✅ Validate query input wherever possible</p>\n\n<pre><code class=\"language-javascript\">  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n</code></pre>\n\n<p>✅ Use prepared (or parameterized) statements when querying</p>\n\n<p>Sequelize example -</p>\n\n<pre><code class=\"language-javascript\">  var sqlite = new Sequelize(&quot;sqlite::memory:&quot;);\n  sqlite.query(\n    &quot;SELECT * FROM users WHERE ID = ?&quot;,\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP SQL injection explained</a></li>\n<li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\">OWASP SQL injection prevention cheat sheet</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"high\">\n              <span>SQL injection vulnerability detected.</span>\n              <span class=\"badge high high-bg\">high</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_lang_sql_injection&nbsp;&nbsp;<strong>CWE:</strong> CWE 89\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/dbSchemaChallenge_3.ts:11</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Including unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.</p>\n\n<h4>Remediations</h2>\n\n<p>❌ Avoid raw queries, especially those that contain unsanitized user input</p>\n\n<pre><code class=\"language-javascript\">  var sqlite = new Sequelize(&quot;sqlite::memory:&quot;);\n  sqlite.query(&quot;SELECT * FROM users WHERE ID = &quot; + req.params.userId);\n</code></pre>\n\n<p>Instead, consider the following approaches when writing SQL queries</p>\n\n<p>✅ Validate query input wherever possible</p>\n\n<pre><code class=\"language-javascript\">  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n</code></pre>\n\n<p>✅ Use prepared (or parameterized) statements when querying</p>\n\n<p>Sequelize example -</p>\n\n<pre><code class=\"language-javascript\">  var sqlite = new Sequelize(&quot;sqlite::memory:&quot;);\n  sqlite.query(\n    &quot;SELECT * FROM users WHERE ID = ?&quot;,\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP SQL injection explained</a></li>\n<li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\">OWASP SQL injection prevention cheat sheet</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"high\">\n              <span>SQL injection vulnerability detected.</span>\n              <span class=\"badge high high-bg\">high</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_lang_sql_injection&nbsp;&nbsp;<strong>CWE:</strong> CWE 89\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/loginAdminChallenge_1.ts:20</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Including unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.</p>\n\n<h4>Remediations</h2>\n\n<p>❌ Avoid raw queries, especially those that contain unsanitized user input</p>\n\n<pre><code class=\"language-javascript\">  var sqlite = new Sequelize(&quot;sqlite::memory:&quot;);\n  sqlite.query(&quot;SELECT * FROM users WHERE ID = &quot; + req.params.userId);\n</code></pre>\n\n<p>Instead, consider the following approaches when writing SQL queries</p>\n\n<p>✅ Validate query input wherever possible</p>\n\n<pre><code class=\"language-javascript\">  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n</code></pre>\n\n<p>✅ Use prepared (or parameterized) statements when querying</p>\n\n<p>Sequelize example -</p>\n\n<pre><code class=\"language-javascript\">  var sqlite = new Sequelize(&quot;sqlite::memory:&quot;);\n  sqlite.query(\n    &quot;SELECT * FROM users WHERE ID = ?&quot;,\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP SQL injection explained</a></li>\n<li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\">OWASP SQL injection prevention cheat sheet</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"high\">\n              <span>SQL injection vulnerability detected.</span>\n              <span class=\"badge high high-bg\">high</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_lang_sql_injection&nbsp;&nbsp;<strong>CWE:</strong> CWE 89\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/loginBenderChallenge_1.ts:20</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Including unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.</p>\n\n<h4>Remediations</h2>\n\n<p>❌ Avoid raw queries, especially those that contain unsanitized user input</p>\n\n<pre><code class=\"language-javascript\">  var sqlite = new Sequelize(&quot;sqlite::memory:&quot;);\n  sqlite.query(&quot;SELECT * FROM users WHERE ID = &quot; + req.params.userId);\n</code></pre>\n\n<p>Instead, consider the following approaches when writing SQL queries</p>\n\n<p>✅ Validate query input wherever possible</p>\n\n<pre><code class=\"language-javascript\">  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n</code></pre>\n\n<p>✅ Use prepared (or parameterized) statements when querying</p>\n\n<p>Sequelize example -</p>\n\n<pre><code class=\"language-javascript\">  var sqlite = new Sequelize(&quot;sqlite::memory:&quot;);\n  sqlite.query(\n    &quot;SELECT * FROM users WHERE ID = ?&quot;,\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP SQL injection explained</a></li>\n<li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\">OWASP SQL injection prevention cheat sheet</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"high\">\n              <span>SQL injection vulnerability detected.</span>\n              <span class=\"badge high high-bg\">high</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_lang_sql_injection&nbsp;&nbsp;<strong>CWE:</strong> CWE 89\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/loginBenderChallenge_4.ts:17</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Including unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.</p>\n\n<h4>Remediations</h2>\n\n<p>❌ Avoid raw queries, especially those that contain unsanitized user input</p>\n\n<pre><code class=\"language-javascript\">  var sqlite = new Sequelize(&quot;sqlite::memory:&quot;);\n  sqlite.query(&quot;SELECT * FROM users WHERE ID = &quot; + req.params.userId);\n</code></pre>\n\n<p>Instead, consider the following approaches when writing SQL queries</p>\n\n<p>✅ Validate query input wherever possible</p>\n\n<pre><code class=\"language-javascript\">  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n</code></pre>\n\n<p>✅ Use prepared (or parameterized) statements when querying</p>\n\n<p>Sequelize example -</p>\n\n<pre><code class=\"language-javascript\">  var sqlite = new Sequelize(&quot;sqlite::memory:&quot;);\n  sqlite.query(\n    &quot;SELECT * FROM users WHERE ID = ?&quot;,\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP SQL injection explained</a></li>\n<li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\">OWASP SQL injection prevention cheat sheet</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"high\">\n              <span>SQL injection vulnerability detected.</span>\n              <span class=\"badge high high-bg\">high</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_lang_sql_injection&nbsp;&nbsp;<strong>CWE:</strong> CWE 89\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/loginJimChallenge_2.ts:17</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Including unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.</p>\n\n<h4>Remediations</h2>\n\n<p>❌ Avoid raw queries, especially those that contain unsanitized user input</p>\n\n<pre><code class=\"language-javascript\">  var sqlite = new Sequelize(&quot;sqlite::memory:&quot;);\n  sqlite.query(&quot;SELECT * FROM users WHERE ID = &quot; + req.params.userId);\n</code></pre>\n\n<p>Instead, consider the following approaches when writing SQL queries</p>\n\n<p>✅ Validate query input wherever possible</p>\n\n<pre><code class=\"language-javascript\">  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n</code></pre>\n\n<p>✅ Use prepared (or parameterized) statements when querying</p>\n\n<p>Sequelize example -</p>\n\n<pre><code class=\"language-javascript\">  var sqlite = new Sequelize(&quot;sqlite::memory:&quot;);\n  sqlite.query(\n    &quot;SELECT * FROM users WHERE ID = ?&quot;,\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP SQL injection explained</a></li>\n<li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\">OWASP SQL injection prevention cheat sheet</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"high\">\n              <span>SQL injection vulnerability detected.</span>\n              <span class=\"badge high high-bg\">high</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_lang_sql_injection&nbsp;&nbsp;<strong>CWE:</strong> CWE 89\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/loginJimChallenge_4.ts:20</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Including unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.</p>\n\n<h4>Remediations</h2>\n\n<p>❌ Avoid raw queries, especially those that contain unsanitized user input</p>\n\n<pre><code class=\"language-javascript\">  var sqlite = new Sequelize(&quot;sqlite::memory:&quot;);\n  sqlite.query(&quot;SELECT * FROM users WHERE ID = &quot; + req.params.userId);\n</code></pre>\n\n<p>Instead, consider the following approaches when writing SQL queries</p>\n\n<p>✅ Validate query input wherever possible</p>\n\n<pre><code class=\"language-javascript\">  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n</code></pre>\n\n<p>✅ Use prepared (or parameterized) statements when querying</p>\n\n<p>Sequelize example -</p>\n\n<pre><code class=\"language-javascript\">  var sqlite = new Sequelize(&quot;sqlite::memory:&quot;);\n  sqlite.query(\n    &quot;SELECT * FROM users WHERE ID = ?&quot;,\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP SQL injection explained</a></li>\n<li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\">OWASP SQL injection prevention cheat sheet</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"high\">\n              <span>SQL injection vulnerability detected.</span>\n              <span class=\"badge high high-bg\">high</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_lang_sql_injection&nbsp;&nbsp;<strong>CWE:</strong> CWE 89\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/unionSqlInjectionChallenge_1.ts:6</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Including unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.</p>\n\n<h4>Remediations</h2>\n\n<p>❌ Avoid raw queries, especially those that contain unsanitized user input</p>\n\n<pre><code class=\"language-javascript\">  var sqlite = new Sequelize(&quot;sqlite::memory:&quot;);\n  sqlite.query(&quot;SELECT * FROM users WHERE ID = &quot; + req.params.userId);\n</code></pre>\n\n<p>Instead, consider the following approaches when writing SQL queries</p>\n\n<p>✅ Validate query input wherever possible</p>\n\n<pre><code class=\"language-javascript\">  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n</code></pre>\n\n<p>✅ Use prepared (or parameterized) statements when querying</p>\n\n<p>Sequelize example -</p>\n\n<pre><code class=\"language-javascript\">  var sqlite = new Sequelize(&quot;sqlite::memory:&quot;);\n  sqlite.query(\n    &quot;SELECT * FROM users WHERE ID = ?&quot;,\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP SQL injection explained</a></li>\n<li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\">OWASP SQL injection prevention cheat sheet</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"high\">\n              <span>SQL injection vulnerability detected.</span>\n              <span class=\"badge high high-bg\">high</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_lang_sql_injection&nbsp;&nbsp;<strong>CWE:</strong> CWE 89\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/unionSqlInjectionChallenge_3.ts:10</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Including unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.</p>\n\n<h4>Remediations</h2>\n\n<p>❌ Avoid raw queries, especially those that contain unsanitized user input</p>\n\n<pre><code class=\"language-javascript\">  var sqlite = new Sequelize(&quot;sqlite::memory:&quot;);\n  sqlite.query(&quot;SELECT * FROM users WHERE ID = &quot; + req.params.userId);\n</code></pre>\n\n<p>Instead, consider the following approaches when writing SQL queries</p>\n\n<p>✅ Validate query input wherever possible</p>\n\n<pre><code class=\"language-javascript\">  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n</code></pre>\n\n<p>✅ Use prepared (or parameterized) statements when querying</p>\n\n<p>Sequelize example -</p>\n\n<pre><code class=\"language-javascript\">  var sqlite = new Sequelize(&quot;sqlite::memory:&quot;);\n  sqlite.query(\n    &quot;SELECT * FROM users WHERE ID = ?&quot;,\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP SQL injection explained</a></li>\n<li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\">OWASP SQL injection prevention cheat sheet</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"high\">\n              <span>SQL injection vulnerability detected.</span>\n              <span class=\"badge high high-bg\">high</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_lang_sql_injection&nbsp;&nbsp;<strong>CWE:</strong> CWE 89\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: routes/login.ts:36</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Including unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.</p>\n\n<h4>Remediations</h2>\n\n<p>❌ Avoid raw queries, especially those that contain unsanitized user input</p>\n\n<pre><code class=\"language-javascript\">  var sqlite = new Sequelize(&quot;sqlite::memory:&quot;);\n  sqlite.query(&quot;SELECT * FROM users WHERE ID = &quot; + req.params.userId);\n</code></pre>\n\n<p>Instead, consider the following approaches when writing SQL queries</p>\n\n<p>✅ Validate query input wherever possible</p>\n\n<pre><code class=\"language-javascript\">  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n</code></pre>\n\n<p>✅ Use prepared (or parameterized) statements when querying</p>\n\n<p>Sequelize example -</p>\n\n<pre><code class=\"language-javascript\">  var sqlite = new Sequelize(&quot;sqlite::memory:&quot;);\n  sqlite.query(\n    &quot;SELECT * FROM users WHERE ID = ?&quot;,\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP SQL injection explained</a></li>\n<li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\">OWASP SQL injection prevention cheat sheet</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"high\">\n              <span>SQL injection vulnerability detected.</span>\n              <span class=\"badge high high-bg\">high</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_lang_sql_injection&nbsp;&nbsp;<strong>CWE:</strong> CWE 89\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: routes/search.ts:23</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Including unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.</p>\n\n<h4>Remediations</h2>\n\n<p>❌ Avoid raw queries, especially those that contain unsanitized user input</p>\n\n<pre><code class=\"language-javascript\">  var sqlite = new Sequelize(&quot;sqlite::memory:&quot;);\n  sqlite.query(&quot;SELECT * FROM users WHERE ID = &quot; + req.params.userId);\n</code></pre>\n\n<p>Instead, consider the following approaches when writing SQL queries</p>\n\n<p>✅ Validate query input wherever possible</p>\n\n<pre><code class=\"language-javascript\">  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n</code></pre>\n\n<p>✅ Use prepared (or parameterized) statements when querying</p>\n\n<p>Sequelize example -</p>\n\n<pre><code class=\"language-javascript\">  var sqlite = new Sequelize(&quot;sqlite::memory:&quot;);\n  sqlite.query(\n    &quot;SELECT * FROM users WHERE ID = ?&quot;,\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP SQL injection explained</a></li>\n<li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\">OWASP SQL injection prevention cheat sheet</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Missing access restriction to directory listing detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_exposed_dir_listing&nbsp;&nbsp;<strong>CWE:</strong> CWE 548\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/accessLogDisclosureChallenge_1_correct.ts:2</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Inappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Restrict access to sensitive directories and files</p>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://expressjs.com/en/resources/middleware/serve-index.html\">Express Serve index middleware</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Missing access restriction to directory listing detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_exposed_dir_listing&nbsp;&nbsp;<strong>CWE:</strong> CWE 548\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/accessLogDisclosureChallenge_1_correct.ts:7</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Inappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Restrict access to sensitive directories and files</p>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://expressjs.com/en/resources/middleware/serve-index.html\">Express Serve index middleware</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Missing access restriction to directory listing detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_exposed_dir_listing&nbsp;&nbsp;<strong>CWE:</strong> CWE 548\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/accessLogDisclosureChallenge_2.ts:2</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Inappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Restrict access to sensitive directories and files</p>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://expressjs.com/en/resources/middleware/serve-index.html\">Express Serve index middleware</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Missing access restriction to directory listing detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_exposed_dir_listing&nbsp;&nbsp;<strong>CWE:</strong> CWE 548\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/accessLogDisclosureChallenge_2.ts:7</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Inappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Restrict access to sensitive directories and files</p>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://expressjs.com/en/resources/middleware/serve-index.html\">Express Serve index middleware</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Missing access restriction to directory listing detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_exposed_dir_listing&nbsp;&nbsp;<strong>CWE:</strong> CWE 548\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/accessLogDisclosureChallenge_2.ts:11</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Inappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Restrict access to sensitive directories and files</p>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://expressjs.com/en/resources/middleware/serve-index.html\">Express Serve index middleware</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Missing access restriction to directory listing detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_exposed_dir_listing&nbsp;&nbsp;<strong>CWE:</strong> CWE 548\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/accessLogDisclosureChallenge_3.ts:2</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Inappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Restrict access to sensitive directories and files</p>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://expressjs.com/en/resources/middleware/serve-index.html\">Express Serve index middleware</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Missing access restriction to directory listing detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_exposed_dir_listing&nbsp;&nbsp;<strong>CWE:</strong> CWE 548\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/accessLogDisclosureChallenge_3.ts:7</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Inappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Restrict access to sensitive directories and files</p>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://expressjs.com/en/resources/middleware/serve-index.html\">Express Serve index middleware</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Missing access restriction to directory listing detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_exposed_dir_listing&nbsp;&nbsp;<strong>CWE:</strong> CWE 548\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/accessLogDisclosureChallenge_3.ts:11</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Inappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Restrict access to sensitive directories and files</p>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://expressjs.com/en/resources/middleware/serve-index.html\">Express Serve index middleware</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Missing access restriction to directory listing detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_exposed_dir_listing&nbsp;&nbsp;<strong>CWE:</strong> CWE 548\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/accessLogDisclosureChallenge_4.ts:2</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Inappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Restrict access to sensitive directories and files</p>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://expressjs.com/en/resources/middleware/serve-index.html\">Express Serve index middleware</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Missing access restriction to directory listing detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_exposed_dir_listing&nbsp;&nbsp;<strong>CWE:</strong> CWE 548\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/accessLogDisclosureChallenge_4.ts:7</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Inappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Restrict access to sensitive directories and files</p>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://expressjs.com/en/resources/middleware/serve-index.html\">Express Serve index middleware</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Missing access restriction to directory listing detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_exposed_dir_listing&nbsp;&nbsp;<strong>CWE:</strong> CWE 548\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/directoryListingChallenge_1_correct.ts:2</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Inappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Restrict access to sensitive directories and files</p>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://expressjs.com/en/resources/middleware/serve-index.html\">Express Serve index middleware</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Missing access restriction to directory listing detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_exposed_dir_listing&nbsp;&nbsp;<strong>CWE:</strong> CWE 548\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/directoryListingChallenge_1_correct.ts:6</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Inappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Restrict access to sensitive directories and files</p>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://expressjs.com/en/resources/middleware/serve-index.html\">Express Serve index middleware</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Missing access restriction to directory listing detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_exposed_dir_listing&nbsp;&nbsp;<strong>CWE:</strong> CWE 548\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/directoryListingChallenge_2.ts:6</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Inappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Restrict access to sensitive directories and files</p>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://expressjs.com/en/resources/middleware/serve-index.html\">Express Serve index middleware</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Missing access restriction to directory listing detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_exposed_dir_listing&nbsp;&nbsp;<strong>CWE:</strong> CWE 548\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/directoryListingChallenge_2.ts:10</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Inappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Restrict access to sensitive directories and files</p>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://expressjs.com/en/resources/middleware/serve-index.html\">Express Serve index middleware</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Missing access restriction to directory listing detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_exposed_dir_listing&nbsp;&nbsp;<strong>CWE:</strong> CWE 548\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/directoryListingChallenge_3.ts:2</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Inappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Restrict access to sensitive directories and files</p>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://expressjs.com/en/resources/middleware/serve-index.html\">Express Serve index middleware</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Missing access restriction to directory listing detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_exposed_dir_listing&nbsp;&nbsp;<strong>CWE:</strong> CWE 548\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/directoryListingChallenge_3.ts:5</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Inappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Restrict access to sensitive directories and files</p>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://expressjs.com/en/resources/middleware/serve-index.html\">Express Serve index middleware</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Missing access restriction to directory listing detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_exposed_dir_listing&nbsp;&nbsp;<strong>CWE:</strong> CWE 548\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/directoryListingChallenge_3.ts:9</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Inappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Restrict access to sensitive directories and files</p>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://expressjs.com/en/resources/middleware/serve-index.html\">Express Serve index middleware</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Missing access restriction to directory listing detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_exposed_dir_listing&nbsp;&nbsp;<strong>CWE:</strong> CWE 548\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/directoryListingChallenge_4.ts:2</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Inappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Restrict access to sensitive directories and files</p>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://expressjs.com/en/resources/middleware/serve-index.html\">Express Serve index middleware</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Missing access restriction to directory listing detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_exposed_dir_listing&nbsp;&nbsp;<strong>CWE:</strong> CWE 548\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/directoryListingChallenge_4.ts:7</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Inappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Restrict access to sensitive directories and files</p>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://expressjs.com/en/resources/middleware/serve-index.html\">Express Serve index middleware</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Missing access restriction to directory listing detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_exposed_dir_listing&nbsp;&nbsp;<strong>CWE:</strong> CWE 548\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/directoryListingChallenge_4.ts:11</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Inappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Restrict access to sensitive directories and files</p>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://expressjs.com/en/resources/middleware/serve-index.html\">Express Serve index middleware</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Missing access restriction to directory listing detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_exposed_dir_listing&nbsp;&nbsp;<strong>CWE:</strong> CWE 548\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: server.ts:241</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Inappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Restrict access to sensitive directories and files</p>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://expressjs.com/en/resources/middleware/serve-index.html\">Express Serve index middleware</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Missing access restriction to directory listing detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_exposed_dir_listing&nbsp;&nbsp;<strong>CWE:</strong> CWE 548\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: server.ts:246</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Inappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Restrict access to sensitive directories and files</p>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://expressjs.com/en/resources/middleware/serve-index.html\">Express Serve index middleware</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Missing access restriction to directory listing detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_exposed_dir_listing&nbsp;&nbsp;<strong>CWE:</strong> CWE 548\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: server.ts:250</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Inappropriate exposure of a directory listing could give attackers access to sensitive data or source code, either directly or through exploitation of an exposed file structure.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Restrict access to sensitive directories and files</p>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://expressjs.com/en/resources/middleware/serve-index.html\">Express Serve index middleware</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>External control of filename or path detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_external_file_upload&nbsp;&nbsp;<strong>CWE:</strong> CWE 73\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: routes/keyServer.ts:14</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Passing unsanitized user input to the sendFile API is bad practice and can lead to path manipulation, by which attackers can gain access to resources and data outside of the intended scope.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Set the root option to be an absolute path to a directory</p>\n\n<pre><code class=\"language-javascript\">app.post(&quot;/upload&quot;, (req, res) =&gt; {\n  var options = {\n    root: path.join(__dirname, &quot;upload&quot;)\n  }\n  res.sendFile(req.params.filename, options)\n}\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"http://expressjs.com/en/5x/api.html#res.sendFile\">Express sendFile API reference</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>External control of filename or path detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_external_file_upload&nbsp;&nbsp;<strong>CWE:</strong> CWE 73\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: routes/logfileServer.ts:14</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Passing unsanitized user input to the sendFile API is bad practice and can lead to path manipulation, by which attackers can gain access to resources and data outside of the intended scope.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Set the root option to be an absolute path to a directory</p>\n\n<pre><code class=\"language-javascript\">app.post(&quot;/upload&quot;, (req, res) =&gt; {\n  var options = {\n    root: path.join(__dirname, &quot;upload&quot;)\n  }\n  res.sendFile(req.params.filename, options)\n}\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"http://expressjs.com/en/5x/api.html#res.sendFile\">Express sendFile API reference</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>External control of filename or path detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_external_file_upload&nbsp;&nbsp;<strong>CWE:</strong> CWE 73\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: routes/quarantineServer.ts:14</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Passing unsanitized user input to the sendFile API is bad practice and can lead to path manipulation, by which attackers can gain access to resources and data outside of the intended scope.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Set the root option to be an absolute path to a directory</p>\n\n<pre><code class=\"language-javascript\">app.post(&quot;/upload&quot;, (req, res) =&gt; {\n  var options = {\n    root: path.join(__dirname, &quot;upload&quot;)\n  }\n  res.sendFile(req.params.filename, options)\n}\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"http://expressjs.com/en/5x/api.html#res.sendFile\">Express sendFile API reference</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Unrevoked JWT detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_jwt_not_revoked&nbsp;&nbsp;<strong>CWE:</strong> CWE 525\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: lib/insecurity.ts:53</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>The best practice caching policy is to revoke JWTs especially when these contain senstitive information.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Ensure JWTs are short-lived by revoking them</p>\n\n<pre><code class=\"language-javascript\">expressjwt({\n  ...\n  isRevoked: this.customRevokeCall(),\n  ...\n})\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://github.com/auth0/express-jwt#revoked-tokens\">ExpressJWT documentation on revoking tokens</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Unrevoked JWT detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_express_jwt_not_revoked&nbsp;&nbsp;<strong>CWE:</strong> CWE 525\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: lib/insecurity.ts:54</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>The best practice caching policy is to revoke JWTs especially when these contain senstitive information.</p>\n\n<h4>Remediations</h2>\n\n<p>✅ Ensure JWTs are short-lived by revoking them</p>\n\n<pre><code class=\"language-javascript\">expressjwt({\n  ...\n  isRevoked: this.customRevokeCall(),\n  ...\n})\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://github.com/auth0/express-jwt#revoked-tokens\">ExpressJWT documentation on revoking tokens</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Manual HTML sanitization detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_lang_manual_html_sanitization&nbsp;&nbsp;<strong>CWE:</strong> CWE 79\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/redirectChallenge_3.ts:22</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Sanitizing HTML manually is error prone and can lead to Cross Site\nScripting (XSS) vulnerabilities.</p>\n\n<h4>Remediations</h2>\n\n<p>❌ Avoid manually escaping HTML:</p>\n\n<pre><code class=\"language-javascript\">const sanitizedUserInput = user.Input\n  .replaceAll('&lt;', '&amp;lt;')\n  .replaceAll('&gt;', '&amp;gt;');\nconst html = `&lt;strong&gt;${sanitizedUserInput}&lt;/strong&gt;`;\n</code></pre>\n\n<p>✅ Use a HTML sanitization library:</p>\n\n<pre><code class=\"language-javascript\">import sanitizeHtml from 'sanitize-html';\n\nconst html = sanitizeHtml(`&lt;strong&gt;${user.Input}&lt;/strong&gt;`);\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP XSS explained</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Manual HTML sanitization detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_lang_manual_html_sanitization&nbsp;&nbsp;<strong>CWE:</strong> CWE 79\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: data/static/codefixes/restfulXssChallenge_2.ts:59</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Sanitizing HTML manually is error prone and can lead to Cross Site\nScripting (XSS) vulnerabilities.</p>\n\n<h4>Remediations</h2>\n\n<p>❌ Avoid manually escaping HTML:</p>\n\n<pre><code class=\"language-javascript\">const sanitizedUserInput = user.Input\n  .replaceAll('&lt;', '&amp;lt;')\n  .replaceAll('&gt;', '&amp;gt;');\nconst html = `&lt;strong&gt;${sanitizedUserInput}&lt;/strong&gt;`;\n</code></pre>\n\n<p>✅ Use a HTML sanitization library:</p>\n\n<pre><code class=\"language-javascript\">import sanitizeHtml from 'sanitize-html';\n\nconst html = sanitizeHtml(`&lt;strong&gt;${user.Input}&lt;/strong&gt;`);\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP XSS explained</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Weak encryption library usage detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_lang_weak_encryption&nbsp;&nbsp;<strong>CWE:</strong> CWE 327\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: Gruntfile.js:74</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Sensitive data should be encrypted with strong encryption algorithms like aes-256-cbc</p>\n\n<h4>Remediations</h2>\n\n<p>According to <a href=\"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption\">OWASP</a>: MD5, RC4, DES, Blowfish, SHA1. 1024-bit RSA or DSA, 160-bit ECDSA (elliptic curves), <sup>80</sup>&frasl;<sub>112</sub>-bit 2TDEA (two key triple DES) are considered as weak hash/encryption algorithms and therefore shouldn&rsquo;t be used.</p>\n\n<p>✅ Use stronger encryption algorithms when storing data.</p>\n\n<pre><code class=\"language-javascript\">const crypto = require(&quot;crypto&quot;);\n\nconst key = &quot;secret key&quot;;\nconst encrypted = crypto.createHmac(&quot;es-256-cbc&quot;, key).update(user.password);\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://nodejs.org/api/crypto.html#cryptocreatehmacalgorithm-key-options\">NodeJS Crypto Module</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t\t<details class=\"finding\" open>\n        <summary>\n          <div class=\"head\">\n            <h3 class=\"medium\">\n              <span>Weak encryption library usage detected.</span>\n              <span class=\"badge medium medium-bg\">medium</span>\n            </h3>\n            <span class=\"cwe\">\n              <strong>Rule ID:</strong> javascript_lang_weak_encryption&nbsp;&nbsp;<strong>CWE:</strong> CWE 327\n            </span>\n          </div>\n\n          <p class=\"filename\">Filename: lib/insecurity.ts:42</p>\n          <div class=\"term-container\"></div>\n        </summary>\n\t\t\t\t<div class=\"description\"><h4>Description</h2>\n\n<p>Sensitive data should be encrypted with strong encryption algorithms like aes-256-cbc</p>\n\n<h4>Remediations</h2>\n\n<p>According to <a href=\"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption\">OWASP</a>: MD5, RC4, DES, Blowfish, SHA1. 1024-bit RSA or DSA, 160-bit ECDSA (elliptic curves), <sup>80</sup>&frasl;<sub>112</sub>-bit 2TDEA (two key triple DES) are considered as weak hash/encryption algorithms and therefore shouldn&rsquo;t be used.</p>\n\n<p>✅ Use stronger encryption algorithms when storing data.</p>\n\n<pre><code class=\"language-javascript\">const crypto = require(&quot;crypto&quot;);\n\nconst key = &quot;secret key&quot;;\nconst encrypted = crypto.createHmac(&quot;es-256-cbc&quot;, key).update(user.password);\n</code></pre>\n\n<h4>Resources</h2>\n\n<ul>\n<li><a href=\"https://nodejs.org/api/crypto.html#cryptocreatehmacalgorithm-key-options\">NodeJS Crypto Module</a></li>\n</ul>\n</div>\n\t\t\t</details>\n\t\t\n\t\t")
