policy:
    only-policy: []
    skip-policy: []
report:
    format: ""
    output: ""
    report: detectors
scan:
    context: ""
    custom_detector:
        detect_encrypted_ruby_class_properties:
            disabled: false
            type: verifier
            languages:
                - ruby
            patterns:
                - |
                  class $CLASS_NAME < ApplicationRecord
                    encrypts <$ARGUMENT>
                  end
            param_parenting: true
            processors: []
            root_singularize: true
            root_lowercase: true
            metavars: {}
            stored: false
            detect_presence: false
        detect_rails_insecure_smtp:
            disabled: false
            type: risk
            languages:
                - ruby
            patterns:
                - |
                  Rails.application.configure do
                    config.action_mailer.smtp_settings = {
                      openssl_verify_mode: OpenSSL::SSL::VERIFY_NONE
                    }
                  end
                - |
                  Rails.application.configure do
                    config.action_mailer.smtp_settings = {
                      openssl_verify_mode: "none"
                    }
                  end
            param_parenting: false
            processors: []
            root_singularize: false
            root_lowercase: false
            metavars: {}
            stored: false
            detect_presence: true
        detect_rails_jwt:
            disabled: false
            type: risk
            languages:
                - ruby
            patterns:
                - |
                  JWT.encode(<$ARGUMENT>)
            param_parenting: false
            processors: []
            root_singularize: false
            root_lowercase: false
            metavars: {}
            stored: false
            detect_presence: false
        detect_rails_session:
            disabled: false
            type: risk
            languages:
                - ruby
            patterns:
                - |
                  session[...] = $ANYTHING
            param_parenting: false
            processors: []
            root_singularize: false
            root_lowercase: false
            metavars: {}
            stored: false
            detect_presence: false
        detect_ruby_logger:
            disabled: false
            type: risk
            languages:
                - ruby
            patterns:
                - |
                  logger.info(<$ARGUMENT>)
                - |
                  Rails.logger.info(<$ARGUMENT>)
            param_parenting: false
            processors: []
            root_singularize: false
            root_lowercase: false
            metavars: {}
            stored: false
            detect_presence: false
        detect_sql_create_public_table:
            disabled: false
            type: data_type
            languages:
                - sql
            patterns:
                - |
                  CREATE TABLE public.$TABLE_NAME (
                    <$COLUMN>
                  )
            param_parenting: true
            processors:
                - query: |
                    verified_by = data.bearer.encrypted_verified.verified_by
                    encrypted = data.bearer.encrypted_verified.encrypted
                  modules:
                    - name: bearer.encrypted_verified
                      content: |-
                        package bearer.encrypted_verified

                        import future.keywords


                        default encrypted := false


                        ruby_encrypted[location] {
                            some detection in input.all_detections
                            detection.detector_type == "detect_encrypted_ruby_class_properties"
                            detection.value.classification.decision.state == "valid"
                            location = detection
                        }

                        encrypted = true {
                            some detection in ruby_encrypted
                            detection.value.object_name == input.target.value.object_name
                            detection.value.field_name == input.target.value.field_name
                            input.target.value.field_name != ""
                            input.target.value.object_name != ""
                        }

                        verified_by[verification] {
                            some detection in ruby_encrypted
                            detection.value.object_name == input.target.value.object_name
                            detection.value.field_name == input.target.value.field_name

                            verification = {
                                "detector": "detect_encrypted_ruby_class_properties",
                                "filename": detection.source.filename,
                                "line_number": detection.source.line_number
                            }
                        }
            root_singularize: true
            root_lowercase: true
            metavars: {}
            stored: false
            detect_presence: false
        ruby_file_detection:
            disabled: false
            type: risk
            languages:
                - ruby
            patterns:
                - |
                  CSV.open { <$DATA_TYPE> }
                - |
                  CSV.open do
                    <$DATA_TYPE>
                  end
                - |
                  File.open do
                    <$DATA_TYPE>
                  end
                - |
                  File.open { <$DATA_TYPE> }
            param_parenting: true
            processors: []
            root_singularize: false
            root_lowercase: false
            metavars: {}
            stored: false
            detect_presence: false
        ruby_http_detection:
            disabled: false
            type: risk
            languages:
                - ruby
            patterns:
                - |
                  URI.encode_www_form(<$DATA_TYPE>)
                - |
                  Net::HTTP.post_form(<$DATA_TYPE>)
            param_parenting: false
            processors: []
            root_singularize: false
            root_lowercase: false
            metavars: {}
            stored: false
            detect_presence: false
    debug: false
    disable-domain-resolution: false
    domain-resolution-timeout: 3s
    internal-domains: []
    policies:
        application_level_encryption_missing:
            query: |
                critical = data.bearer.application_level_encryption.critical
                high = data.bearer.application_level_encryption.high
            id: detect_sql_create_public_table
            name: Application level encryption missing
            description: Application level encryption missing
            level: ""
            modules:
                - path: policies/application_level_encryption.rego
                  name: bearer.application_level_encryption
                  content: "package bearer.application_level_encryption\n\nimport future.keywords\n\nsensitive_data_group_uuid := \"f6a0c071-5908-4420-bac2-bba28d41223e\"\npersonal_data_group_uuid := \"e1d3135b-3c0f-4b55-abce-19f27a26cbb3\"\n\nhigh[item] {\n    some datatype in input.dataflow.data_types    \n    some detector in datatype.detectors\n    detector.name == input.policy_id\n    \n    some location in detector.locations\n    not location.encrypted\n\n    some category in input.data_categories\n    category.uuid == datatype.category_uuid\n    category.group_uuid == sensitive_data_group_uuid\n\n    item = {\n        \"category_group\":  category.group_name,\n        \"filename\": location.filename,\n        \"line_number\": location.line_number,\n        \"parent_line_number\": detector.parent.line_number,\n        \"parent_content\": detector.parent.content\n\n    }\n}\n\ncritical[item] {\n    some datatype in input.dataflow.data_types    \n    some detector in datatype.detectors\n    detector.name == input.policy_id\n    \n    some location in detector.locations\n    not location.encrypted\n\n    some category in input.data_categories\n    category.uuid == datatype.category_uuid\n    category.group_uuid == personal_data_group_uuid\n\n    item = {\n        \"category_group\":  category.group_name,\n        \"filename\": location.filename,\n        \"line_number\": location.line_number,\n        \"parent_line_number\": detector.parent.line_number,\n        \"parent_content\": detector.parent.content\n    }\n}"
        logger_leaks:
            query: |
                critical = data.bearer.leakage.critical
                high = data.bearer.leakage.high
            id: detect_ruby_logger
            name: Logger leaking
            description: Logger leaks detected
            level: ""
            modules:
                - path: policies/leakage.rego
                  name: bearer.leakage
                  content: |
                    package bearer.leakage

                    import future.keywords

                    sensitive_data_group_uuid := "f6a0c071-5908-4420-bac2-bba28d41223e"
                    personal_data_group_uuid := "e1d3135b-3c0f-4b55-abce-19f27a26cbb3"

                    high[item] {
                        some detector in input.dataflow.risks
                        detector.detector_id == input.policy_id

                        data_type = detector.data_types[_]

                        some category in input.data_categories
                        category.uuid == data_type.category_uuid
                        category.group_uuid == sensitive_data_group_uuid

                        location = data_type.locations[_]
                        item := {
                            "category_group": category.group_name,
                            "filename": location.filename,
                            "line_number": location.line_number,
                            "parent_line_number": data_type.parent.line_number,
                            "parent_content": data_type.parent.content
                        }
                    }

                    critical[item] {
                        some detector in input.dataflow.risks
                        detector.detector_id == input.policy_id

                        data_type = detector.data_types[_]

                        some category in input.data_categories
                        category.uuid == data_type.category_uuid
                        category.group_uuid == personal_data_group_uuid

                        location = data_type.locations[_]
                        item := {
                            "category_group": category.group_name,
                            "filename": location.filename,
                            "line_number": location.line_number,
                            "parent_line_number": data_type.parent.line_number,
                            "parent_content": data_type.parent.content
                        }
                    }
        session_leaks:
            query: |
                critical = data.bearer.leakage.critical
                high = data.bearer.leakage.high
            id: detect_rails_session
            name: Session leaking
            description: Session leaks detected
            level: ""
            modules:
                - path: policies/leakage.rego
                  name: bearer.leakage
                  content: |
                    package bearer.leakage

                    import future.keywords

                    sensitive_data_group_uuid := "f6a0c071-5908-4420-bac2-bba28d41223e"
                    personal_data_group_uuid := "e1d3135b-3c0f-4b55-abce-19f27a26cbb3"

                    high[item] {
                        some detector in input.dataflow.risks
                        detector.detector_id == input.policy_id

                        data_type = detector.data_types[_]

                        some category in input.data_categories
                        category.uuid == data_type.category_uuid
                        category.group_uuid == sensitive_data_group_uuid

                        location = data_type.locations[_]
                        item := {
                            "category_group": category.group_name,
                            "filename": location.filename,
                            "line_number": location.line_number,
                            "parent_line_number": data_type.parent.line_number,
                            "parent_content": data_type.parent.content
                        }
                    }

                    critical[item] {
                        some detector in input.dataflow.risks
                        detector.detector_id == input.policy_id

                        data_type = detector.data_types[_]

                        some category in input.data_categories
                        category.uuid == data_type.category_uuid
                        category.group_uuid == personal_data_group_uuid

                        location = data_type.locations[_]
                        item := {
                            "category_group": category.group_name,
                            "filename": location.filename,
                            "line_number": location.line_number,
                            "parent_line_number": data_type.parent.line_number,
                            "parent_content": data_type.parent.content
                        }
                    }
    quiet: false
    skip-path: []
worker:
    existing-worker: ""
    file-size-max: 25000000
    files-to-batch: 1
    memory-max: 800000000
    timeout: 10m0s
    timeout-file-max: 5m0s
    timeout-file-min: 5s
    timeout-file-second-per-bytes: 10000
    timeout-worker-online: 1m0s
    workers: 1

