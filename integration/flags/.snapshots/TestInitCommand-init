policy:
    only-policy: []
    skip-policy: []
report:
    format: ""
    output: ""
    report: detectors
scan:
    context: ""
    custom_detector:
        detect_encrypted_ruby_class_properties:
            disabled: false
            type: verifier
            languages:
                - ruby
            patterns:
                - |
                  class $CLASS_NAME < ApplicationRecord
                    encrypts <$ARGUMENT>
                  end
            param_parenting: true
            processors: []
            root_singularize: true
            root_lowercase: true
            metavars: {}
            stored: false
        detect_rails_logger:
            disabled: false
            type: risk
            languages:
                - ruby
            patterns:
                - |
                  Rails.logger.info(<$ARGUMENT>)
            param_parenting: false
            processors: []
            root_singularize: false
            root_lowercase: false
            metavars: {}
            stored: false
        detect_ruby_logger:
            disabled: false
            type: risk
            languages:
                - ruby
            patterns:
                - |
                  logger.info(<$ARGUMENT>)
            param_parenting: false
            processors: []
            root_singularize: false
            root_lowercase: false
            metavars: {}
            stored: false
        detect_sql_create_public_table:
            disabled: false
            type: data_type
            languages:
                - sql
            patterns:
                - |
                  CREATE TABLE public.$TABLE_NAME (
                    <$COLUMN>
                  )
            param_parenting: true
            processors:
                - query: |
                    verified_by = data.bearer.encrypted_verified.verified_by
                    encrypted = data.bearer.encrypted_verified.encrypted
                  modules:
                    - name: bearer.encrypted_verified
                      content: |-
                        package bearer.encrypted_verified

                        import future.keywords


                        default encrypted := false


                        ruby_encrypted[location] {
                            some detection in input.all_detections
                            detection.detector_type == "detect_encrypted_ruby_class_properties"
                            detection.value.classification.decision.state == "valid"
                            location = detection
                        }

                        encrypted = true {
                            some detection in ruby_encrypted
                            detection.value.object_name == input.target.value.object_name
                            detection.value.field_name == input.target.value.field_name
                            input.target.value.field_name != ""
                            input.target.value.object_name != ""
                        }

                        verified_by[verification] {
                            some detection in ruby_encrypted
                            detection.value.object_name == input.target.value.object_name
                            detection.value.field_name == input.target.value.field_name

                            verification = {
                                "detector": "detect_encrypted_ruby_class_properties",
                                "filename": detection.source.filename,
                                "line_number": detection.source.line_number
                            }
                        }
            root_singularize: true
            root_lowercase: true
            metavars: {}
            stored: false
        ruby_file_detection:
            disabled: false
            type: risk
            languages:
                - ruby
            patterns:
                - |
                  CSV.open(...) { <$DATA_TYPE> }
                - |
                  CSV.open(...) do
                    <$DATA_TYPE>
                  end
                - |
                  File.open(...) do
                    <$DATA_TYPE>
                  end
                - |
                  File.open(...) { <$DATA_TYPE> }
            param_parenting: true
            processors: []
            root_singularize: false
            root_lowercase: false
            metavars: {}
            stored: false
    debug: false
    disable-domain-resolution: false
    domain-resolution-timeout: 3s
    internal-domains: []
    quiet: false
    skip-path: []
worker:
    existing-worker: ""
    file-size-max: 25000000
    files-to-batch: 1
    memory-max: 800000000
    timeout: 10m0s
    timeout-file-max: 5m0s
    timeout-file-min: 5s
    timeout-file-second-per-bytes: 10000
    timeout-worker-online: 1m0s
    workers: 1

